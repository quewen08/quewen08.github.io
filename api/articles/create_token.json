{"title":"一步步教你创建自己的数字货币（代币）进行ICO","slug":"create_token","date":"2018-03-08T07:02:22.000Z","updated":"2022-10-19T14:40:00.246Z","comments":true,"path":"api/articles/create_token.json","realPath":"/2018/create_token/index/","excerpt":null,"covers":["/img/token_info.jpeg","/img/metamask_main.png","/img/token_create_remix.jpeg","/img/metamask_add_token.png","/img/metamask_token_added.png","/img/myetherwaller.jpeg","/img/myetherwaller_connected.jpeg","/img/myetherwaller_transfer.jpeg","/img/metamask_token_tansfered.png"],"cover":"/img/token_info.jpeg","content":"<p>本文从技术角度详细介绍如何基于以太坊ERC20创建代币的流程.</p>\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>本文所讲的代币是使用以太坊智能合约创建，阅读本文前，你应该对以太坊、智能合约有所了解，如果你还不了解，建议你先看<a href=\"/posts/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E5%8C%BA%E5%9D%97%E9%93%BE/%E4%BB%A5%E5%A4%AA%E5%9D%8A/2018-02-22-whatiseth.html\">以太坊是什么</a></p>\n<h2 id=\"代币Token\"><a href=\"#代币Token\" class=\"headerlink\" title=\"代币Token\"></a>代币Token</h2><p>如果不那么追求精确的定义，代币就是数字货币，比特币、以太币就是一个代币。<br>利用以太坊的智能合约可以轻松编写出属于自己的代币，代币可以代表任何可以交易的东西，如：积分、财产、证书等等。<br>因此不管是出于商业，还是学习很多人想创建一个自己的代币，先贴一个图看看创建的代币是什么样子。</p>\n<p><img src=\"/img/token_info.jpeg\"></p>\n<p>今天我们就来详细讲一讲怎样创建一个这样的代币。</p>\n<h3 id=\"ERC20-Token\"><a href=\"#ERC20-Token\" class=\"headerlink\" title=\"ERC20 Token\"></a>ERC20 Token</h3><p>也许你经常看到ERC20和代币一同出现， ERC20是以太坊定义的一个代币标准。<br>要求我们在实现代币的时候必须要遵守的协议，如指定代币名称、总量、实现代币交易函数等，只有支持了协议才能被以太坊钱包支持。<br>其接口如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">contract ERC20Interface &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    string public constant name = &quot;Token Name&quot;;</span><br><span class=\"line\">    string public constant symbol = &quot;SYM&quot;;</span><br><span class=\"line\">    uint8 public constant decimals = 18;  // 18 is the most common number of decimal places</span><br><span class=\"line\"></span><br><span class=\"line\">    function totalSupply() public constant returns (uint);</span><br><span class=\"line\">    function balanceOf(address tokenOwner) public constant returns (uint balance);</span><br><span class=\"line\">    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);</span><br><span class=\"line\">    function transfer(address to, uint tokens) public returns (bool success);</span><br><span class=\"line\">    function approve(address spender, uint tokens) public returns (bool success);</span><br><span class=\"line\">    function transferFrom(address from, address to, uint tokens) public returns (bool success);</span><br><span class=\"line\"></span><br><span class=\"line\">    event Transfer(address indexed from, address indexed to, uint tokens);</span><br><span class=\"line\">    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>简单说明一下：<br>name ： 代币名称<br>symbol： 代币符号<br>decimals： 代币小数点位数，代币的最小单位， 18表示我们可以拥有 .0000000000000000001单位个代币。<br>totalSupply() : 发行代币总量。<br>balanceOf(): 查看对应账号的代币余额。<br>transfer(): 实现代币交易，用于给用户发送代币（从我们的账户里）。<br>transferFrom(): 实现代币用户之间的交易。<br>allowance(): 控制代币的交易，如可交易账号及资产。<br>approve(): 允许用户可花费的代币数。</p>\n<h2 id=\"编写代币合约代码\"><a href=\"#编写代币合约代码\" class=\"headerlink\" title=\"编写代币合约代码\"></a>编写代币合约代码</h2><p>代币合约代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pragma solidity ^0.4.16;</span><br><span class=\"line\"></span><br><span class=\"line\">interface tokenRecipient &#123; function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">contract TokenERC20 &#123;</span><br><span class=\"line\">    string public name;</span><br><span class=\"line\">    string public symbol;</span><br><span class=\"line\">    uint8 public decimals = 18;  // 18 是建议的默认值</span><br><span class=\"line\">    uint256 public totalSupply;</span><br><span class=\"line\"></span><br><span class=\"line\">    mapping (address =&gt; uint256) public balanceOf;  //</span><br><span class=\"line\">    mapping (address =&gt; mapping (address =&gt; uint256)) public allowance;</span><br><span class=\"line\"></span><br><span class=\"line\">    event Transfer(address indexed from, address indexed to, uint256 value);</span><br><span class=\"line\"></span><br><span class=\"line\">    event Burn(address indexed from, uint256 value);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    function TokenERC20(uint256 initialSupply, string tokenName, string tokenSymbol) public &#123;</span><br><span class=\"line\">        totalSupply = initialSupply * 10 ** uint256(decimals);</span><br><span class=\"line\">        balanceOf[msg.sender] = totalSupply;</span><br><span class=\"line\">        name = tokenName;</span><br><span class=\"line\">        symbol = tokenSymbol;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    function _transfer(address _from, address _to, uint _value) internal &#123;</span><br><span class=\"line\">        require(_to != 0x0);</span><br><span class=\"line\">        require(balanceOf[_from] &gt;= _value);</span><br><span class=\"line\">        require(balanceOf[_to] + _value &gt; balanceOf[_to]);</span><br><span class=\"line\">        uint previousBalances = balanceOf[_from] + balanceOf[_to];</span><br><span class=\"line\">        balanceOf[_from] -= _value;</span><br><span class=\"line\">        balanceOf[_to] += _value;</span><br><span class=\"line\">        Transfer(_from, _to, _value);</span><br><span class=\"line\">        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function transfer(address _to, uint256 _value) public &#123;</span><br><span class=\"line\">        _transfer(msg.sender, _to, _value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) &#123;</span><br><span class=\"line\">        require(_value &lt;= allowance[_from][msg.sender]);     // Check allowance</span><br><span class=\"line\">        allowance[_from][msg.sender] -= _value;</span><br><span class=\"line\">        _transfer(_from, _to, _value);</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function approve(address _spender, uint256 _value) public</span><br><span class=\"line\">        returns (bool success) &#123;</span><br><span class=\"line\">        allowance[msg.sender][_spender] = _value;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) &#123;</span><br><span class=\"line\">        tokenRecipient spender = tokenRecipient(_spender);</span><br><span class=\"line\">        if (approve(_spender, _value)) &#123;</span><br><span class=\"line\">            spender.receiveApproval(msg.sender, _value, this, _extraData);</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function burn(uint256 _value) public returns (bool success) &#123;</span><br><span class=\"line\">        require(balanceOf[msg.sender] &gt;= _value);</span><br><span class=\"line\">        balanceOf[msg.sender] -= _value;</span><br><span class=\"line\">        totalSupply -= _value;</span><br><span class=\"line\">        Burn(msg.sender, _value);</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function burnFrom(address _from, uint256 _value) public returns (bool success) &#123;</span><br><span class=\"line\">        require(balanceOf[_from] &gt;= _value);</span><br><span class=\"line\">        require(_value &lt;= allowance[_from][msg.sender]);</span><br><span class=\"line\">        balanceOf[_from] -= _value;</span><br><span class=\"line\">        allowance[_from][msg.sender] -= _value;</span><br><span class=\"line\">        totalSupply -= _value;</span><br><span class=\"line\">        Burn(_from, _value);</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><p>在开发测试智能合约时，<a href=\"https://metamask.io/\">MetaMask</a>和<a href=\"https://remix.ethereum.org/\">Remix Solidity IDE</a>是两个非常好用的工具，今天就用他们来完成部署。</p>\n<ol>\n<li>安装和配置MetaMask请参考<a href=\"/posts/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E5%8C%BA%E5%9D%97%E9%93%BE/%E4%BB%A5%E5%A4%AA%E5%9D%8A/Dapp/2018-02-25-first-dapp.html\">开发、部署第一个去中心化应用</a>，不同的上本文选择了以太坊的测试网络Ropsten，如果你没有余额请点击购买buy，进入的网站可以送一些测试以太币给你，配置好之后，界面应该如下：</li>\n</ol>\n<p>  <img src=\"/img/metamask_main.png\"></p>\n<ol start=\"2\">\n<li>浏览器打开Remix Solidity IDE，\b复制以上源码粘贴上，在右侧选项参考如图的设置：</li>\n</ol>\n<p>  <img src=\"/img/token_create_remix.jpeg\"></p>\n<p>  注意Environment和Account和MetaMask保持一致，然后选择合约TokenERC20，填入你想要的发行量，名称及代号，就可以创建合约了。<br>  这时MetaMask会弹出一个交易确认框，点SUBMIT。待合约部署交易确认之后，复制合约地址。</p>\n<ol start=\"3\">\n<li>打开Metamask界面，切换到TOKENS，点添加合约，出现如下对话框：</li>\n</ol>\n<p>  <img src=\"/img/metamask_add_token.png\"></p>\n<p>  填入刚刚复制的地址，点击ADD，这时你就可以看到你创建的代币了，如图：</p>\n<p>  <img src=\"/img/metamask_token_added.png\"></p>\n<p>哈哈，你已经完成了代币的创建和部署(正式网络和测试网络部署方法一样)，可以在<a href=\"https://ropsten.etherscan.io/token/0x1f0c085ad323bb69758111cf9ecdc32a32d9a5bb\">Etherscan</a>查询到我们刚刚部署的代币。可以用它进行ICO了，从此走上人生巅峰（玩笑话，不鼓励大家发行无意义的代币）。</p>\n<h2 id=\"代币交易\"><a href=\"#代币交易\" class=\"headerlink\" title=\"代币交易\"></a>代币交易</h2><p>由于MetaMask插件没有提供代币交易功能，同时考虑到很多人并没有以太坊钱包或是被以太坊钱包网络同步问题折磨，今天我用<a href=\"https://www.myetherwallet.com/\">网页钱包</a>来讲解代币交易。</p>\n<ol>\n<li>进入<a href=\"https://www.myetherwallet.com/#send-transaction\">网页钱包地址</a>，第一次进入有一些安全提示需要用户确认。</li>\n<li>进入之后，按照下图进行设置：</li>\n</ol>\n<p>  <img src=\"/img/myetherwaller.jpeg\"></p>\n<ol start=\"3\">\n<li>连接上之后，如图</li>\n</ol>\n<p>  <img src=\"/img/myetherwaller_connected.jpeg\"></p>\n<p>  需要添加代币，填入代币合约地址</p>\n<ol start=\"4\">\n<li>进行代币转账交易</li>\n</ol>\n<p>  <img src=\"/img/myetherwaller_transfer.jpeg\"></p>\n<p>  接下来的交易确认也点击确认即可。</p>\n<ol start=\"5\">\n<li>交易完成后，可以看到MetaMask中代币余额减少了，如图：</li>\n</ol>\n<p>  <img src=\"/img/metamask_token_tansfered.png\"></p>\n<p>代币交易是不是很简单，只要明白了交易流程，使用其他的钱包也是一样的道理。</p>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><ul>\n<li><a href=\"https://theethereum.wiki/w/index.php/ERC20_Token_Standard\">代币标准</a></li>\n<li><a href=\"https://ethereum.org/token\">Create your own crypto-currency with ethereum</a></li>\n</ul>\n","more":"<p>本文从技术角度详细介绍如何基于以太坊ERC20创建代币的流程.</p>\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>本文所讲的代币是使用以太坊智能合约创建，阅读本文前，你应该对以太坊、智能合约有所了解，如果你还不了解，建议你先看<a href=\"/posts/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E5%8C%BA%E5%9D%97%E9%93%BE/%E4%BB%A5%E5%A4%AA%E5%9D%8A/2018-02-22-whatiseth.html\">以太坊是什么</a></p>\n<h2 id=\"代币Token\"><a href=\"#代币Token\" class=\"headerlink\" title=\"代币Token\"></a>代币Token</h2><p>如果不那么追求精确的定义，代币就是数字货币，比特币、以太币就是一个代币。<br>利用以太坊的智能合约可以轻松编写出属于自己的代币，代币可以代表任何可以交易的东西，如：积分、财产、证书等等。<br>因此不管是出于商业，还是学习很多人想创建一个自己的代币，先贴一个图看看创建的代币是什么样子。</p>\n<p><img src=\"/img/token_info.jpeg\"></p>\n<p>今天我们就来详细讲一讲怎样创建一个这样的代币。</p>\n<h3 id=\"ERC20-Token\"><a href=\"#ERC20-Token\" class=\"headerlink\" title=\"ERC20 Token\"></a>ERC20 Token</h3><p>也许你经常看到ERC20和代币一同出现， ERC20是以太坊定义的一个代币标准。<br>要求我们在实现代币的时候必须要遵守的协议，如指定代币名称、总量、实现代币交易函数等，只有支持了协议才能被以太坊钱包支持。<br>其接口如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">contract ERC20Interface &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    string public constant name = &quot;Token Name&quot;;</span><br><span class=\"line\">    string public constant symbol = &quot;SYM&quot;;</span><br><span class=\"line\">    uint8 public constant decimals = 18;  // 18 is the most common number of decimal places</span><br><span class=\"line\"></span><br><span class=\"line\">    function totalSupply() public constant returns (uint);</span><br><span class=\"line\">    function balanceOf(address tokenOwner) public constant returns (uint balance);</span><br><span class=\"line\">    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);</span><br><span class=\"line\">    function transfer(address to, uint tokens) public returns (bool success);</span><br><span class=\"line\">    function approve(address spender, uint tokens) public returns (bool success);</span><br><span class=\"line\">    function transferFrom(address from, address to, uint tokens) public returns (bool success);</span><br><span class=\"line\"></span><br><span class=\"line\">    event Transfer(address indexed from, address indexed to, uint tokens);</span><br><span class=\"line\">    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>简单说明一下：<br>name ： 代币名称<br>symbol： 代币符号<br>decimals： 代币小数点位数，代币的最小单位， 18表示我们可以拥有 .0000000000000000001单位个代币。<br>totalSupply() : 发行代币总量。<br>balanceOf(): 查看对应账号的代币余额。<br>transfer(): 实现代币交易，用于给用户发送代币（从我们的账户里）。<br>transferFrom(): 实现代币用户之间的交易。<br>allowance(): 控制代币的交易，如可交易账号及资产。<br>approve(): 允许用户可花费的代币数。</p>\n<h2 id=\"编写代币合约代码\"><a href=\"#编写代币合约代码\" class=\"headerlink\" title=\"编写代币合约代码\"></a>编写代币合约代码</h2><p>代币合约代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pragma solidity ^0.4.16;</span><br><span class=\"line\"></span><br><span class=\"line\">interface tokenRecipient &#123; function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">contract TokenERC20 &#123;</span><br><span class=\"line\">    string public name;</span><br><span class=\"line\">    string public symbol;</span><br><span class=\"line\">    uint8 public decimals = 18;  // 18 是建议的默认值</span><br><span class=\"line\">    uint256 public totalSupply;</span><br><span class=\"line\"></span><br><span class=\"line\">    mapping (address =&gt; uint256) public balanceOf;  //</span><br><span class=\"line\">    mapping (address =&gt; mapping (address =&gt; uint256)) public allowance;</span><br><span class=\"line\"></span><br><span class=\"line\">    event Transfer(address indexed from, address indexed to, uint256 value);</span><br><span class=\"line\"></span><br><span class=\"line\">    event Burn(address indexed from, uint256 value);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    function TokenERC20(uint256 initialSupply, string tokenName, string tokenSymbol) public &#123;</span><br><span class=\"line\">        totalSupply = initialSupply * 10 ** uint256(decimals);</span><br><span class=\"line\">        balanceOf[msg.sender] = totalSupply;</span><br><span class=\"line\">        name = tokenName;</span><br><span class=\"line\">        symbol = tokenSymbol;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    function _transfer(address _from, address _to, uint _value) internal &#123;</span><br><span class=\"line\">        require(_to != 0x0);</span><br><span class=\"line\">        require(balanceOf[_from] &gt;= _value);</span><br><span class=\"line\">        require(balanceOf[_to] + _value &gt; balanceOf[_to]);</span><br><span class=\"line\">        uint previousBalances = balanceOf[_from] + balanceOf[_to];</span><br><span class=\"line\">        balanceOf[_from] -= _value;</span><br><span class=\"line\">        balanceOf[_to] += _value;</span><br><span class=\"line\">        Transfer(_from, _to, _value);</span><br><span class=\"line\">        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function transfer(address _to, uint256 _value) public &#123;</span><br><span class=\"line\">        _transfer(msg.sender, _to, _value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) &#123;</span><br><span class=\"line\">        require(_value &lt;= allowance[_from][msg.sender]);     // Check allowance</span><br><span class=\"line\">        allowance[_from][msg.sender] -= _value;</span><br><span class=\"line\">        _transfer(_from, _to, _value);</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function approve(address _spender, uint256 _value) public</span><br><span class=\"line\">        returns (bool success) &#123;</span><br><span class=\"line\">        allowance[msg.sender][_spender] = _value;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) &#123;</span><br><span class=\"line\">        tokenRecipient spender = tokenRecipient(_spender);</span><br><span class=\"line\">        if (approve(_spender, _value)) &#123;</span><br><span class=\"line\">            spender.receiveApproval(msg.sender, _value, this, _extraData);</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function burn(uint256 _value) public returns (bool success) &#123;</span><br><span class=\"line\">        require(balanceOf[msg.sender] &gt;= _value);</span><br><span class=\"line\">        balanceOf[msg.sender] -= _value;</span><br><span class=\"line\">        totalSupply -= _value;</span><br><span class=\"line\">        Burn(msg.sender, _value);</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function burnFrom(address _from, uint256 _value) public returns (bool success) &#123;</span><br><span class=\"line\">        require(balanceOf[_from] &gt;= _value);</span><br><span class=\"line\">        require(_value &lt;= allowance[_from][msg.sender]);</span><br><span class=\"line\">        balanceOf[_from] -= _value;</span><br><span class=\"line\">        allowance[_from][msg.sender] -= _value;</span><br><span class=\"line\">        totalSupply -= _value;</span><br><span class=\"line\">        Burn(_from, _value);</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><p>在开发测试智能合约时，<a href=\"https://metamask.io/\">MetaMask</a>和<a href=\"https://remix.ethereum.org/\">Remix Solidity IDE</a>是两个非常好用的工具，今天就用他们来完成部署。</p>\n<ol>\n<li>安装和配置MetaMask请参考<a href=\"/posts/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E5%8C%BA%E5%9D%97%E9%93%BE/%E4%BB%A5%E5%A4%AA%E5%9D%8A/Dapp/2018-02-25-first-dapp.html\">开发、部署第一个去中心化应用</a>，不同的上本文选择了以太坊的测试网络Ropsten，如果你没有余额请点击购买buy，进入的网站可以送一些测试以太币给你，配置好之后，界面应该如下：</li>\n</ol>\n<p>  <img src=\"/img/metamask_main.png\"></p>\n<ol start=\"2\">\n<li>浏览器打开Remix Solidity IDE，\b复制以上源码粘贴上，在右侧选项参考如图的设置：</li>\n</ol>\n<p>  <img src=\"/img/token_create_remix.jpeg\"></p>\n<p>  注意Environment和Account和MetaMask保持一致，然后选择合约TokenERC20，填入你想要的发行量，名称及代号，就可以创建合约了。<br>  这时MetaMask会弹出一个交易确认框，点SUBMIT。待合约部署交易确认之后，复制合约地址。</p>\n<ol start=\"3\">\n<li>打开Metamask界面，切换到TOKENS，点添加合约，出现如下对话框：</li>\n</ol>\n<p>  <img src=\"/img/metamask_add_token.png\"></p>\n<p>  填入刚刚复制的地址，点击ADD，这时你就可以看到你创建的代币了，如图：</p>\n<p>  <img src=\"/img/metamask_token_added.png\"></p>\n<p>哈哈，你已经完成了代币的创建和部署(正式网络和测试网络部署方法一样)，可以在<a href=\"https://ropsten.etherscan.io/token/0x1f0c085ad323bb69758111cf9ecdc32a32d9a5bb\">Etherscan</a>查询到我们刚刚部署的代币。可以用它进行ICO了，从此走上人生巅峰（玩笑话，不鼓励大家发行无意义的代币）。</p>\n<h2 id=\"代币交易\"><a href=\"#代币交易\" class=\"headerlink\" title=\"代币交易\"></a>代币交易</h2><p>由于MetaMask插件没有提供代币交易功能，同时考虑到很多人并没有以太坊钱包或是被以太坊钱包网络同步问题折磨，今天我用<a href=\"https://www.myetherwallet.com/\">网页钱包</a>来讲解代币交易。</p>\n<ol>\n<li>进入<a href=\"https://www.myetherwallet.com/#send-transaction\">网页钱包地址</a>，第一次进入有一些安全提示需要用户确认。</li>\n<li>进入之后，按照下图进行设置：</li>\n</ol>\n<p>  <img src=\"/img/myetherwaller.jpeg\"></p>\n<ol start=\"3\">\n<li>连接上之后，如图</li>\n</ol>\n<p>  <img src=\"/img/myetherwaller_connected.jpeg\"></p>\n<p>  需要添加代币，填入代币合约地址</p>\n<ol start=\"4\">\n<li>进行代币转账交易</li>\n</ol>\n<p>  <img src=\"/img/myetherwaller_transfer.jpeg\"></p>\n<p>  接下来的交易确认也点击确认即可。</p>\n<ol start=\"5\">\n<li>交易完成后，可以看到MetaMask中代币余额减少了，如图：</li>\n</ol>\n<p>  <img src=\"/img/metamask_token_tansfered.png\"></p>\n<p>代币交易是不是很简单，只要明白了交易流程，使用其他的钱包也是一样的道理。</p>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><ul>\n<li><a href=\"https://theethereum.wiki/w/index.php/ERC20_Token_Standard\">代币标准</a></li>\n<li><a href=\"https://ethereum.org/token\">Create your own crypto-currency with ethereum</a></li>\n</ul>\n","categories":[{"name":"学习记录","path":"api/categories/学习记录.json"},{"name":"区块链","path":"api/categories/区块链.json"},{"name":"以太坊","path":"api/categories/以太坊.json"}],"tags":[{"name":"区块链","path":"api/tags/区块链.json"},{"name":"以太坊","path":"api/tags/以太坊.json"}]}