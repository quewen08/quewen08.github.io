{"title":"镜像管理","slug":"docker-hub","date":"2022-06-13T05:34:34.000Z","updated":"2022-10-19T14:40:00.247Z","comments":true,"path":"api/articles/docker-hub.json","realPath":"/2022/docker-hub/index/","excerpt":null,"covers":["/img/2022/docker-hub/979767-20220612181114029-1547561283.png","/img/2022/docker-hub/979767-20220612181125322-23214919.png","/img/2022/docker-hub/979767-20220612181143608-2120734119.png","/img/2022/docker-hub/979767-20220612181201719-136720622.png","/img/2022/docker-hub/979767-20220612181240712-106763821.png","/img/2022/docker-hub/979767-20220612181257167-639154413.png","/img/2022/docker-hub/979767-20220612181314136-1294251006.png","/img/2022/docker-hub/979767-20220612181338631-1279399900.png","/img/2022/docker-hub/979767-20220612181357799-2107861404.png","/img/2022/docker-hub/979767-20220612181409536-1292770390.png","/img/2022/docker-hub/979767-20220612181435230-234859769.png","/img/2022/docker-hub/979767-20220612181449476-939906458.png"],"cover":"/img/2022/docker-hub/979767-20220612181114029-1547561283.png","content":"<h2 id=\"Docker-Hub\"><a href=\"#Docker-Hub\" class=\"headerlink\" title=\"Docker Hub\"></a>Docker Hub</h2><p><code>docker hub</code>作为默认的注册点，不管是官方还是第三方都上传了很多人们可以直接拿来使用的镜像。</p>\n<blockquote>\n<p><a href=\"https://hub.docker.com/\">https://hub.docker.com/</a></p>\n</blockquote>\n<p>通过搜索功能可以直接搜索到相关的镜像：</p>\n<p><img src=\"/img/2022/docker-hub/979767-20220612181114029-1547561283.png\"></p>\n<p>这里以 Nginx 为例：</p>\n<p><img src=\"/img/2022/docker-hub/979767-20220612181125322-23214919.png\"></p>\n<p>通过在 <code>registry</code> 上面搜索可以发现：</p>\n<ol>\n<li>仓库前面没有用户名，一般都是官方镜像仓库。后面会有 <code>DOCKER OFFICIAL IMAGE</code> 的标识。这意味着我们大概率可以放心大胆的直接拿来使用。</li>\n<li>仓库前面有用户名，一般都第三方的镜像仓库。后面会有 <code>VERIFIED PUBLISHER</code> 的标识（已经验证的开发者）或 <code>OPEN SOURCE PROGRAM</code> 标识（开源项目）。这两者的安全优先级相对于较低，使用需要谨慎。</li>\n<li>右边 <code>Downloads</code> 标识该仓库被下载了多少次，下载次数越多表示用户越多，有问题被发现的概率越大。可以作为镜像是否靠谱的参考依据。</li>\n<li>右边 <code>Stars</code> 也和 Downloads 有着类似的功能。</li>\n<li>通过左边的筛选栏可以对仓库进行筛选。</li>\n</ol>\n<p>点击进入一个仓库可以看到相关详细信息：</p>\n<p><img src=\"/img/2022/docker-hub/979767-20220612181143608-2120734119.png\"></p>\n<p>常见的功能包括：</p>\n<ol>\n<li>怎么下载镜像。</li>\n<li>关于这个仓库的说明介绍与配置使用方法。</li>\n<li>关于这个仓库的用户评价。</li>\n<li>该仓库中的镜像支持的版本，我们可以通过标版编号，下载指定版本。</li>\n</ol>\n<p>除了在页面上查询镜像以外，docker 本身命令行也提供了查询方法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search nginx</span><br></pre></td></tr></table></figure>\n\n<p>如图所示：</p>\n<p><img src=\"/img/2022/docker-hub/979767-20220612181201719-136720622.png\"></p>\n<h2 id=\"镜像操作\"><a href=\"#镜像操作\" class=\"headerlink\" title=\"镜像操作\"></a>镜像操作</h2><p>docker 所有支持的命令都可以使用 <code>docker --help</code> 看到。同时通过该命令，我们也可以发现，docker 的命令分为两大类：<code>Management Commands</code> 和 <code>Commands</code>。</p>\n<p>在 docker 设置之初是没有分类这一概念，到后面因为命令多了加入了分类。所以在学习 docker 命令的时候，建议养成使用 Management Commands 的习惯。虽然命令可能更复杂一点，但是说不定单纯的 Commands 说不定哪天就被删除了。</p>\n<p>对于镜像支持的操作，我们可以使用命令查看：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker image --<span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p>如图所示：</p>\n<p><img src=\"/img/2022/docker-hub/979767-20220612181240712-106763821.png\"></p>\n<h2 id=\"拉取镜像（pull）\"><a href=\"#拉取镜像（pull）\" class=\"headerlink\" title=\"拉取镜像（pull）\"></a>拉取镜像（pull）</h2><p>docker 安装之后本身是没有镜像的，需要从 registry 中下载镜像才能使用：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Management Commands（推荐）</span></span><br><span class=\"line\">docker image pull nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Commands</span></span><br><span class=\"line\">docker pull nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下载指定版本</span></span><br><span class=\"line\">docker image pull nginx:1.22.0</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>如图所示：</p>\n<p><img src=\"/img/2022/docker-hub/979767-20220612181257167-639154413.png\"></p>\n<p>从整个镜像的下载信息可以看出：</p>\n<ol>\n<li>如果没有跟版本号，默认下载 <code>latest</code> 版本。</li>\n<li>镜像是分层结构，一个完整的镜像一般都是一层一层分开 pull 的。<br>查</li>\n</ol>\n<h2 id=\"查看本地镜像（ls）\"><a href=\"#查看本地镜像（ls）\" class=\"headerlink\" title=\"查看本地镜像（ls）\"></a>查看本地镜像（ls）</h2><p>镜像下载完成之后就可以使用相关命令查看它在服务器上面的保存信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Management Commands（推荐）</span></span><br><span class=\"line\">docker image <span class=\"built_in\">ls</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Commands</span></span><br><span class=\"line\">docker images</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>如图所示：</p>\n<p><img src=\"/img/2022/docker-hub/979767-20220612181314136-1294251006.png\"></p>\n<p>通过该命令可以了解镜像的相关信息：</p>\n<ol>\n<li>想要唯一标识一个镜像可以有两种方法：<REPOSITORY>:<TAG> 或者 <code>IMAGE ID</code>。</li>\n<li>通过该命令看到的 IAMGE ID 并非是完整的，但是显示部分一般已经足够区分不同镜像。</li>\n<li>可以看到镜像的大小。</li>\n</ol>\n<h2 id=\"查看镜像详情（inspect）\"><a href=\"#查看镜像详情（inspect）\" class=\"headerlink\" title=\"查看镜像详情（inspect）\"></a>查看镜像详情（inspect）</h2><p>ls 查看到的镜像信息只是很少的一部分，如果想了解更详细的镜像信息，需要使用其他命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Management Commands（推荐）</span></span><br><span class=\"line\">docker image inspect nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Commands</span></span><br><span class=\"line\">docker inspect nginx</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>需要关注以下输出的信息中的以下项目：</p>\n<ul>\n<li>Id：完整的 IMAGE ID，ls 展示的只是这个 ID 的开始部分。</li>\n<li>ExposedPorts：镜像中的服务运行端口。</li>\n<li>Env：镜像中定义的环境变量。</li>\n<li>Cmd：启动镜像中服务所使用的命令。</li>\n<li>Volumes：镜像挂载的持久化数据卷。</li>\n</ul>\n<h2 id=\"删除指定镜像（rm）\"><a href=\"#删除指定镜像（rm）\" class=\"headerlink\" title=\"删除指定镜像（rm）\"></a>删除指定镜像（rm）</h2><p>如果下载错了镜像或者需要为了清理磁盘空间而删除不需要的镜像，可以执行以下命令进行删除：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Management Commands（推荐）</span></span><br><span class=\"line\">docker image <span class=\"built_in\">rm</span> nginx:1.22.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Commands</span></span><br><span class=\"line\">docker rmi nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 也可以通过 ID 镜像删除</span></span><br><span class=\"line\">docker image <span class=\"built_in\">rm</span> 605c77e624dd</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/img/2022/docker-hub/979767-20220612181338631-1279399900.png\"></p>\n<p>删除和拉取镜像类似，也是一层一层的删除。</p>\n<blockquote>\n<p>注意，如果有通过该镜像创建的容器正在运行，则无法直接删除镜像。需要先删除容器或者加入 <code>-f</code> 参数强制删除，容器也会跟着删除。</p>\n</blockquote>\n<h2 id=\"镜像导出（save）\"><a href=\"#镜像导出（save）\" class=\"headerlink\" title=\"镜像导出（save）\"></a>镜像导出（save）</h2><p>在没有私有 registry 或者没有外网环境的机器之间想要运行别的机器上面的镜像，就需要将镜像导出。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Mamagement Commands（推荐）</span></span><br><span class=\"line\">docker image save nginx:1.22.0 nginx:latest -o /tmp/nginx-image.tar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Commands</span></span><br><span class=\"line\">docker save nginx:1.22.0 nginx:latest -o /tmp/nginx-image-2.tar</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/img/2022/docker-hub/979767-20220612181357799-2107861404.png\"></p>\n<h2 id=\"镜像导入（load）\"><a href=\"#镜像导入（load）\" class=\"headerlink\" title=\"镜像导入（load）\"></a>镜像导入（load）</h2><p>为了测试导入，需要先删除所有镜像。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Management Commands（推荐）</span></span><br><span class=\"line\">docker image load -i /tmp/nginx-image.tar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Commands</span></span><br><span class=\"line\">docker load -i /tmp/nginx-image.tar</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/img/2022/docker-hub/979767-20220612181409536-1292770390.png\"></p>\n<h2 id=\"镜像打标签（tag）\"><a href=\"#镜像打标签（tag）\" class=\"headerlink\" title=\"镜像打标签（tag）\"></a>镜像打标签（tag）</h2><p>镜像在下载的时候有自己的 TAG，某些时候可能需要对其进行修改。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Management Commands（推荐）</span></span><br><span class=\"line\">docker image tag nginx:1.20.0 nginx:<span class=\"built_in\">history</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Commands</span></span><br><span class=\"line\">docker tag nginx:1.20.0 nginx:<span class=\"built_in\">history</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>结果如图所示：</p>\n<p><img src=\"/img/2022/docker-hub/979767-20220612181435230-234859769.png\"></p>\n<p>可以发现，打 TAG 其实就是在原来的镜像基础上重新增加一个 TAG 指向该镜像 ID。</p>\n<p>当删除某个 TAG 的时候，镜像并不会跟着全部删除。当然直接删除镜像 ID 除外。</p>\n<h2 id=\"删除未使用镜像（prune）\"><a href=\"#删除未使用镜像（prune）\" class=\"headerlink\" title=\"删除未使用镜像（prune）\"></a>删除未使用镜像（prune）</h2><p>某些镜像在服务器中保存是没用的，如果有很多的话，可以直接使用以下命令全部清理：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Management Commands（推荐）</span></span><br><span class=\"line\">docker image prune -a</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/img/2022/docker-hub/979767-20220612181449476-939906458.png\"></p>\n<p>关于更多镜像相关操作需要等后面容器相关知识整理了之后结合着使用。</p>\n","more":"<h2 id=\"Docker-Hub\"><a href=\"#Docker-Hub\" class=\"headerlink\" title=\"Docker Hub\"></a>Docker Hub</h2><p><code>docker hub</code>作为默认的注册点，不管是官方还是第三方都上传了很多人们可以直接拿来使用的镜像。</p>\n<blockquote>\n<p><a href=\"https://hub.docker.com/\">https://hub.docker.com/</a></p>\n</blockquote>\n<p>通过搜索功能可以直接搜索到相关的镜像：</p>\n<p><img src=\"/img/2022/docker-hub/979767-20220612181114029-1547561283.png\"></p>\n<p>这里以 Nginx 为例：</p>\n<p><img src=\"/img/2022/docker-hub/979767-20220612181125322-23214919.png\"></p>\n<p>通过在 <code>registry</code> 上面搜索可以发现：</p>\n<ol>\n<li>仓库前面没有用户名，一般都是官方镜像仓库。后面会有 <code>DOCKER OFFICIAL IMAGE</code> 的标识。这意味着我们大概率可以放心大胆的直接拿来使用。</li>\n<li>仓库前面有用户名，一般都第三方的镜像仓库。后面会有 <code>VERIFIED PUBLISHER</code> 的标识（已经验证的开发者）或 <code>OPEN SOURCE PROGRAM</code> 标识（开源项目）。这两者的安全优先级相对于较低，使用需要谨慎。</li>\n<li>右边 <code>Downloads</code> 标识该仓库被下载了多少次，下载次数越多表示用户越多，有问题被发现的概率越大。可以作为镜像是否靠谱的参考依据。</li>\n<li>右边 <code>Stars</code> 也和 Downloads 有着类似的功能。</li>\n<li>通过左边的筛选栏可以对仓库进行筛选。</li>\n</ol>\n<p>点击进入一个仓库可以看到相关详细信息：</p>\n<p><img src=\"/img/2022/docker-hub/979767-20220612181143608-2120734119.png\"></p>\n<p>常见的功能包括：</p>\n<ol>\n<li>怎么下载镜像。</li>\n<li>关于这个仓库的说明介绍与配置使用方法。</li>\n<li>关于这个仓库的用户评价。</li>\n<li>该仓库中的镜像支持的版本，我们可以通过标版编号，下载指定版本。</li>\n</ol>\n<p>除了在页面上查询镜像以外，docker 本身命令行也提供了查询方法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search nginx</span><br></pre></td></tr></table></figure>\n\n<p>如图所示：</p>\n<p><img src=\"/img/2022/docker-hub/979767-20220612181201719-136720622.png\"></p>\n<h2 id=\"镜像操作\"><a href=\"#镜像操作\" class=\"headerlink\" title=\"镜像操作\"></a>镜像操作</h2><p>docker 所有支持的命令都可以使用 <code>docker --help</code> 看到。同时通过该命令，我们也可以发现，docker 的命令分为两大类：<code>Management Commands</code> 和 <code>Commands</code>。</p>\n<p>在 docker 设置之初是没有分类这一概念，到后面因为命令多了加入了分类。所以在学习 docker 命令的时候，建议养成使用 Management Commands 的习惯。虽然命令可能更复杂一点，但是说不定单纯的 Commands 说不定哪天就被删除了。</p>\n<p>对于镜像支持的操作，我们可以使用命令查看：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker image --<span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p>如图所示：</p>\n<p><img src=\"/img/2022/docker-hub/979767-20220612181240712-106763821.png\"></p>\n<h2 id=\"拉取镜像（pull）\"><a href=\"#拉取镜像（pull）\" class=\"headerlink\" title=\"拉取镜像（pull）\"></a>拉取镜像（pull）</h2><p>docker 安装之后本身是没有镜像的，需要从 registry 中下载镜像才能使用：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Management Commands（推荐）</span></span><br><span class=\"line\">docker image pull nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Commands</span></span><br><span class=\"line\">docker pull nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下载指定版本</span></span><br><span class=\"line\">docker image pull nginx:1.22.0</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>如图所示：</p>\n<p><img src=\"/img/2022/docker-hub/979767-20220612181257167-639154413.png\"></p>\n<p>从整个镜像的下载信息可以看出：</p>\n<ol>\n<li>如果没有跟版本号，默认下载 <code>latest</code> 版本。</li>\n<li>镜像是分层结构，一个完整的镜像一般都是一层一层分开 pull 的。<br>查</li>\n</ol>\n<h2 id=\"查看本地镜像（ls）\"><a href=\"#查看本地镜像（ls）\" class=\"headerlink\" title=\"查看本地镜像（ls）\"></a>查看本地镜像（ls）</h2><p>镜像下载完成之后就可以使用相关命令查看它在服务器上面的保存信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Management Commands（推荐）</span></span><br><span class=\"line\">docker image <span class=\"built_in\">ls</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Commands</span></span><br><span class=\"line\">docker images</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>如图所示：</p>\n<p><img src=\"/img/2022/docker-hub/979767-20220612181314136-1294251006.png\"></p>\n<p>通过该命令可以了解镜像的相关信息：</p>\n<ol>\n<li>想要唯一标识一个镜像可以有两种方法：<REPOSITORY>:<TAG> 或者 <code>IMAGE ID</code>。</li>\n<li>通过该命令看到的 IAMGE ID 并非是完整的，但是显示部分一般已经足够区分不同镜像。</li>\n<li>可以看到镜像的大小。</li>\n</ol>\n<h2 id=\"查看镜像详情（inspect）\"><a href=\"#查看镜像详情（inspect）\" class=\"headerlink\" title=\"查看镜像详情（inspect）\"></a>查看镜像详情（inspect）</h2><p>ls 查看到的镜像信息只是很少的一部分，如果想了解更详细的镜像信息，需要使用其他命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Management Commands（推荐）</span></span><br><span class=\"line\">docker image inspect nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Commands</span></span><br><span class=\"line\">docker inspect nginx</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>需要关注以下输出的信息中的以下项目：</p>\n<ul>\n<li>Id：完整的 IMAGE ID，ls 展示的只是这个 ID 的开始部分。</li>\n<li>ExposedPorts：镜像中的服务运行端口。</li>\n<li>Env：镜像中定义的环境变量。</li>\n<li>Cmd：启动镜像中服务所使用的命令。</li>\n<li>Volumes：镜像挂载的持久化数据卷。</li>\n</ul>\n<h2 id=\"删除指定镜像（rm）\"><a href=\"#删除指定镜像（rm）\" class=\"headerlink\" title=\"删除指定镜像（rm）\"></a>删除指定镜像（rm）</h2><p>如果下载错了镜像或者需要为了清理磁盘空间而删除不需要的镜像，可以执行以下命令进行删除：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Management Commands（推荐）</span></span><br><span class=\"line\">docker image <span class=\"built_in\">rm</span> nginx:1.22.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Commands</span></span><br><span class=\"line\">docker rmi nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 也可以通过 ID 镜像删除</span></span><br><span class=\"line\">docker image <span class=\"built_in\">rm</span> 605c77e624dd</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/img/2022/docker-hub/979767-20220612181338631-1279399900.png\"></p>\n<p>删除和拉取镜像类似，也是一层一层的删除。</p>\n<blockquote>\n<p>注意，如果有通过该镜像创建的容器正在运行，则无法直接删除镜像。需要先删除容器或者加入 <code>-f</code> 参数强制删除，容器也会跟着删除。</p>\n</blockquote>\n<h2 id=\"镜像导出（save）\"><a href=\"#镜像导出（save）\" class=\"headerlink\" title=\"镜像导出（save）\"></a>镜像导出（save）</h2><p>在没有私有 registry 或者没有外网环境的机器之间想要运行别的机器上面的镜像，就需要将镜像导出。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Mamagement Commands（推荐）</span></span><br><span class=\"line\">docker image save nginx:1.22.0 nginx:latest -o /tmp/nginx-image.tar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Commands</span></span><br><span class=\"line\">docker save nginx:1.22.0 nginx:latest -o /tmp/nginx-image-2.tar</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/img/2022/docker-hub/979767-20220612181357799-2107861404.png\"></p>\n<h2 id=\"镜像导入（load）\"><a href=\"#镜像导入（load）\" class=\"headerlink\" title=\"镜像导入（load）\"></a>镜像导入（load）</h2><p>为了测试导入，需要先删除所有镜像。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Management Commands（推荐）</span></span><br><span class=\"line\">docker image load -i /tmp/nginx-image.tar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Commands</span></span><br><span class=\"line\">docker load -i /tmp/nginx-image.tar</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/img/2022/docker-hub/979767-20220612181409536-1292770390.png\"></p>\n<h2 id=\"镜像打标签（tag）\"><a href=\"#镜像打标签（tag）\" class=\"headerlink\" title=\"镜像打标签（tag）\"></a>镜像打标签（tag）</h2><p>镜像在下载的时候有自己的 TAG，某些时候可能需要对其进行修改。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Management Commands（推荐）</span></span><br><span class=\"line\">docker image tag nginx:1.20.0 nginx:<span class=\"built_in\">history</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Commands</span></span><br><span class=\"line\">docker tag nginx:1.20.0 nginx:<span class=\"built_in\">history</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>结果如图所示：</p>\n<p><img src=\"/img/2022/docker-hub/979767-20220612181435230-234859769.png\"></p>\n<p>可以发现，打 TAG 其实就是在原来的镜像基础上重新增加一个 TAG 指向该镜像 ID。</p>\n<p>当删除某个 TAG 的时候，镜像并不会跟着全部删除。当然直接删除镜像 ID 除外。</p>\n<h2 id=\"删除未使用镜像（prune）\"><a href=\"#删除未使用镜像（prune）\" class=\"headerlink\" title=\"删除未使用镜像（prune）\"></a>删除未使用镜像（prune）</h2><p>某些镜像在服务器中保存是没用的，如果有很多的话，可以直接使用以下命令全部清理：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Management Commands（推荐）</span></span><br><span class=\"line\">docker image prune -a</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/img/2022/docker-hub/979767-20220612181449476-939906458.png\"></p>\n<p>关于更多镜像相关操作需要等后面容器相关知识整理了之后结合着使用。</p>\n","categories":[{"name":"学习记录","path":"api/categories/学习记录.json"},{"name":"Docker","path":"api/categories/Docker.json"}],"tags":[{"name":"docker","path":"api/tags/docker.json"},{"name":"k8s","path":"api/tags/k8s.json"},{"name":"kubernetes","path":"api/tags/kubernetes.json"},{"name":"容器","path":"api/tags/容器.json"},{"name":"云原生","path":"api/tags/云原生.json"}]}