{"title":"智能合约开发环境搭建及Hello World合约","slug":"init-env","date":"2018-02-23T16:00:00.000Z","updated":"2022-10-19T14:40:00.257Z","comments":true,"path":"api/articles/init-env.json","realPath":"/2018/init-env/init-env/","excerpt":null,"covers":["/img/open_geth_eth.jpg","/img/geth_accounts_1.jpg","/img/geth_accounts_2.jpg","/img/geth_accounts_3.jpg","/img/eth_code_hello_step1.jpeg","/img/eth_code_hello_step2.jpeg","/img/init_example_show.jpg"],"cover":"/img/open_geth_eth.jpg","content":"<p>如果你对于以太坊智能合约开发还没有概念（本文会假设你已经知道这些概念），建议先阅读<a href=\"/posts/%E4%BB%A5%E5%A4%AA%E5%9D%8A/2018-02-22-whatiseth.html\">入门篇</a>。<br>就先学习任何编程语言一样，入门的第一个程序都是Hello World。今天我们来一步一步从搭建以太坊智能合约开发环境开始，讲解智能合约的Hello World如何编写。</p>\n<h2 id=\"开发环境搭建\"><a href=\"#开发环境搭建\" class=\"headerlink\" title=\"开发环境搭建\"></a>开发环境搭建</h2><h3 id=\"Solodity安装\"><a href=\"#Solodity安装\" class=\"headerlink\" title=\"Solodity安装\"></a>Solodity安装</h3><p>强烈建议新手使用<a href=\"https://ethereum.github.io/browser-solidity\">Browser-Solidity</a>来进行开发。<br>Browser-Solidity是一个基于浏览器的Solidity，就可以不用安装Solidity，本文的Hello World教程也将基于Browser-Solidity来进行。</p>\n<p>如果你想自己安装请参考<a href=\"https://solidity.readthedocs.io/en/develop/installing-solidity.html\">Solidity安装指引</a>。</p>\n<h3 id=\"geth-安装\"><a href=\"#geth-安装\" class=\"headerlink\" title=\"geth 安装\"></a>geth 安装</h3><p>Ubuntu下安装命令如下：其他平台参考：<a href=\"https://github.com/ethereum/go-ethereum/wiki/Building-Ethereum\">geth官方安装指引</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install software-properties-common</span><br><span class=\"line\">sudo add-apt-repository -y ppa:ethereum/ethereum</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install ethereum</span><br></pre></td></tr></table></figure>\n\n<p>安装完以后，就是把geth控制台启动。</p>\n<h2 id=\"启动环境\"><a href=\"#启动环境\" class=\"headerlink\" title=\"启动环境\"></a>启动环境</h2><p>在入门篇讲过，geth是一个以太坊客户端，现在利用geth\b启动一个以太坊（开发者）网络节点。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">geth --datadir testNet --dev console 2&gt;&gt; test.log</span><br></pre></td></tr></table></figure>\n\n<p>执行命名后，会进入geth控制台，这时光标停在一个向右的箭头处，像这样：</p>\n<p><img src=\"/img/open_geth_eth.jpg\"></p>\n<p>命令参数说明（更多命令详解可阅读<a href=\"\">Geth命令用法-参数详解篇</a>）:<br>–dev 启用开发者网络（模式），开发者网络会使用POA共识，默认预分配一个开发者账户并且会自动开启挖矿。<br>–datadir 后面的参数是区块数据及秘钥存放目录。<br>第一次输入命令后，它会放在当前目录下新建一个testNet目录来存放数据。<br>console 进入控制台<br>2&gt;&gt; test.log 表示把控制台日志输出到test.log文件</p>\n<p>为了更好的理解，建议新开一个命令行终端，实时显示日志：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tail -f test.log</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"准备账户\"><a href=\"#准备账户\" class=\"headerlink\" title=\"准备账户\"></a>准备账户</h2><p>部署智能合约需要一个外部账户，我们先来看看分配的开发者账户，在控制台使用以下命令查看账户：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; eth.accounts</span><br></pre></td></tr></table></figure>\n\n<p>回车后，返回一个账户数组，里面有一个默认账户，如：</p>\n<p><img src=\"/img/geth_accounts_1.jpg\"></p>\n<blockquote>\n<p>也可以使用personal.listAccounts查看账户，</p>\n</blockquote>\n<p>再来看一下账户里的余额，使用一下命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; eth.getBalance(eth.accounts[0])</span><br></pre></td></tr></table></figure>\n\n<p><strong>eth.accounts[0]</strong> 表示账户列表第一个账户<br>回车后，可以看到大量的余额，如：<br>1.15792089237316195423570985008687907853269… e+77</p>\n<p>开发者账户因余额太多，如果用这个账户来部署合约时会无法看到余额变化，为了更好的体验完整的过程，这里选择创建一个新的账户。</p>\n<h3 id=\"创建账户\"><a href=\"#创建账户\" class=\"headerlink\" title=\"创建账户\"></a>创建账户</h3><p>使用以下命令创建账户：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; personal.newAccount(&quot;Juan&quot;)</span><br></pre></td></tr></table></figure>\n\n<p>Juan为新账户的密码，回车后，返回一个新账户。</p>\n<p>这时我们查看账户列表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; eth.accounts</span><br></pre></td></tr></table></figure>\n\n<p>可以看到账户数组你包含两个账户，新账户在第二个（索引为1）位置。</p>\n<p>现在看看账户的余额：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; eth.getBalance(eth.accounts[1])</span><br><span class=\"line\">0</span><br></pre></td></tr></table></figure>\n\n<p>回车后，返回的是0，新账户是0。结果如：<br><img src=\"/img/geth_accounts_2.jpg\"></p>\n<h3 id=\"给新账户转账\"><a href=\"#给新账户转账\" class=\"headerlink\" title=\"给新账户转账\"></a>给新账户转账</h3><p>我们知道没有余额的账户是没法部署合约的，那我们就从默认账户转1以太币给新账户，使用以下命令（请使用你自己eth.accounts对应输出的账户）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eth.sendTransaction(&#123;from: &#x27;0xb0ebe17ef0e96b5c525709c0a1ede347c66bd391&#x27;, to: &#x27;0xf280facfd60d61f6fd3f88c9dee4fb90d0e11dfc&#x27;, value: web3.toWei(1, &quot;ether&quot;)&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>在打开的tail -f test.log日志终端里，可以同时看到挖矿记录<br>再次查看新账户余额，可以新账户有1个以太币</p>\n<p><img src=\"/img/geth_accounts_3.jpg\"></p>\n<h3 id=\"解锁账户\"><a href=\"#解锁账户\" class=\"headerlink\" title=\"解锁账户\"></a>解锁账户</h3><p>在部署合约前需要先解锁账户（就像银行转账要输入密码一样），使用以下命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">personal.unlockAccount(eth.accounts[1],&quot;Juan&quot;);</span><br></pre></td></tr></table></figure>\n\n<p>“Juan”是之前创建账户时的密码。<br>解锁成功后，账户就准备完毕啦，接下来就是编写合约代码。</p>\n<h2 id=\"编写合约代码\"><a href=\"#编写合约代码\" class=\"headerlink\" title=\"编写合约代码\"></a>编写合约代码</h2><p>现在我们来开始编写第一个智能合约代码，solidity代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pragma solidity ^0.4.18;</span><br><span class=\"line\">contract hello &#123;</span><br><span class=\"line\">    string greeting;</span><br><span class=\"line\"></span><br><span class=\"line\">    function hello(string _greeting) public &#123;</span><br><span class=\"line\">        greeting = _greeting;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function say() constant public returns (string) &#123;</span><br><span class=\"line\">        return greeting;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>简单解释下，我们定义了一个名为hello的合约，在合约初始化时保存了一个字符串（我们会传入hello world），每次调用say返回字符串。<br>把这段代码写(拷贝)到<a href=\"https://ethereum.github.io/browser-solidity\">Browser-Solidity</a>，如果没有错误，点击Details获取部署代码，如：</p>\n<p><img src=\"/img/eth_code_hello_step1.jpeg\"></p>\n<p>在弹出的对话框中找到WEB3DEPLOY部分，点拷贝，粘贴到编辑器后，修改初始化字符串为hello world。</p>\n<p><img src=\"/img/eth_code_hello_step2.jpeg\"></p>\n<blockquote>\n<p>solidity版本之间有可能不能兼容，这是你可以在Browser-Solidity的Settings里选择对应的编译器版本。<br>Browser-Solidity也不停的更新中，截图可能和你看到的界面不一样。</p>\n</blockquote>\n<h2 id=\"部署合约\"><a href=\"#部署合约\" class=\"headerlink\" title=\"部署合约\"></a>部署合约</h2><p>Browser-Solidity生成的代码，拷贝到编辑器里修改后的代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var _greeting = &quot;Hello World&quot; ;</span><br><span class=\"line\">var helloContract = web3.eth.contract([&#123;&quot;constant&quot;:true,&quot;inputs&quot;:[],&quot;name&quot;:&quot;say&quot;,&quot;outputs&quot;:[&#123;&quot;name&quot;:&quot;&quot;,&quot;type&quot;:&quot;string&quot;&#125;],&quot;payable&quot;:false,&quot;stateMutability&quot;:&quot;view&quot;,&quot;type&quot;:&quot;function&quot;&#125;,&#123;&quot;inputs&quot;:[&#123;&quot;name&quot;:&quot;_greeting&quot;,&quot;type&quot;:&quot;string&quot;&#125;],&quot;payable&quot;:false,&quot;stateMutability&quot;:&quot;nonpayable&quot;,&quot;type&quot;:&quot;constructor&quot;&#125;]);</span><br><span class=\"line\">var hello = helloContract.new(</span><br><span class=\"line\">   _greeting,</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">     from: web3.eth.accounts[1],</span><br><span class=\"line\">     data: &#x27;0x6060604052341561000f57600080fd5b6040516102b83803806102b8833981016040528080518201919050508060009080519060200190610041929190610048565b50506100ed565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061008957805160ff19168380011785556100b7565b828001600101855582156100b7579182015b828111156100b657825182559160200191906001019061009b565b5b5090506100c491906100c8565b5090565b6100ea91905b808211156100e65760008160009055506001016100ce565b5090565b90565b6101bc806100fc6000396000f300606060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063954ab4b214610046575b600080fd5b341561005157600080fd5b6100596100d4565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561009957808201518184015260208101905061007e565b50505050905090810190601f1680156100c65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6100dc61017c565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156101725780601f1061014757610100808354040283529160200191610172565b820191906000526020600020905b81548152906001019060200180831161015557829003601f168201915b5050505050905090565b6020604051908101604052806000815250905600a165627a7a723058204a5577bb3ad30e02f7a3bdd90eedcc682700d67fc8ed6604d38bb739c0655df90029&#x27;,</span><br><span class=\"line\">     gas: &#x27;4700000&#x27;</span><br><span class=\"line\">   &#125;, function (e, contract)&#123;</span><br><span class=\"line\">    console.log(e, contract);</span><br><span class=\"line\">    if (typeof contract.address !== &#x27;undefined&#x27;) &#123;</span><br><span class=\"line\">         console.log(&#x27;Contract mined! address: &#x27; + contract.address + &#x27; transactionHash: &#x27; + contract.transactionHash);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>第1行：修改字符串为Hello World<br>第2行：修改合约变量名<br>第3行：修改合约实例变量名，之后可以直接用实例调用函数。<br>第6行：修改部署账户为新账户索引，即使用新账户来部署合约。<br>第8行：准备付的gas费用，IDE已经帮我们预估好了。<br>第9行：设置部署回调函数。</p>\n<p>拷贝回geth控制台里，回车后，看到输出如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Contract mined! address: 0x79544078dcd9d560ec3f6eff0af42a9fc84c7d19 transactionHash: 0xe2caab22102e93434888a0b8013a7ae7e804b132e4a8bfd2318356f6cf0480b3</span><br></pre></td></tr></table></figure>\n\n<p>说明合约已经部署成功。</p>\n<blockquote>\n<p>在打开的 <strong>tail -f test.log</strong> 日志终端里，可以同时看到挖矿记录</p>\n</blockquote>\n<p>现在我们查看下新账户的余额：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; eth.getBalance(eth.accounts[1])</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"运行合约\"><a href=\"#运行合约\" class=\"headerlink\" title=\"运行合约\"></a>运行合约</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; hello.say()</span><br><span class=\"line\">&quot;Hello World&quot;</span><br></pre></td></tr></table></figure>\n\n<p>输出Hello World，我们第一个合约Hello World，成功运行了。</p>\n<p>运行截图如下：<br><img src=\"/img/init_example_show.jpg\"></p>\n<p>本文会随geth，solidity语言版本升级保持更新，查看本文原始链接：<a href=\"https://learnblockchain.cn/2017/11/24/init-env/\">https://learnblockchain.cn/2017/11/24/init-env/</a></p>\n<p>第一个合约的意义更重要的是体验智能合约开发流程，对于初学者一些可以选择先放弃一些细节，开发流程打通之后，可以增强信心进行下一步的学习。</p>\n","more":"<p>如果你对于以太坊智能合约开发还没有概念（本文会假设你已经知道这些概念），建议先阅读<a href=\"/posts/%E4%BB%A5%E5%A4%AA%E5%9D%8A/2018-02-22-whatiseth.html\">入门篇</a>。<br>就先学习任何编程语言一样，入门的第一个程序都是Hello World。今天我们来一步一步从搭建以太坊智能合约开发环境开始，讲解智能合约的Hello World如何编写。</p>\n<h2 id=\"开发环境搭建\"><a href=\"#开发环境搭建\" class=\"headerlink\" title=\"开发环境搭建\"></a>开发环境搭建</h2><h3 id=\"Solodity安装\"><a href=\"#Solodity安装\" class=\"headerlink\" title=\"Solodity安装\"></a>Solodity安装</h3><p>强烈建议新手使用<a href=\"https://ethereum.github.io/browser-solidity\">Browser-Solidity</a>来进行开发。<br>Browser-Solidity是一个基于浏览器的Solidity，就可以不用安装Solidity，本文的Hello World教程也将基于Browser-Solidity来进行。</p>\n<p>如果你想自己安装请参考<a href=\"https://solidity.readthedocs.io/en/develop/installing-solidity.html\">Solidity安装指引</a>。</p>\n<h3 id=\"geth-安装\"><a href=\"#geth-安装\" class=\"headerlink\" title=\"geth 安装\"></a>geth 安装</h3><p>Ubuntu下安装命令如下：其他平台参考：<a href=\"https://github.com/ethereum/go-ethereum/wiki/Building-Ethereum\">geth官方安装指引</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install software-properties-common</span><br><span class=\"line\">sudo add-apt-repository -y ppa:ethereum/ethereum</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install ethereum</span><br></pre></td></tr></table></figure>\n\n<p>安装完以后，就是把geth控制台启动。</p>\n<h2 id=\"启动环境\"><a href=\"#启动环境\" class=\"headerlink\" title=\"启动环境\"></a>启动环境</h2><p>在入门篇讲过，geth是一个以太坊客户端，现在利用geth\b启动一个以太坊（开发者）网络节点。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">geth --datadir testNet --dev console 2&gt;&gt; test.log</span><br></pre></td></tr></table></figure>\n\n<p>执行命名后，会进入geth控制台，这时光标停在一个向右的箭头处，像这样：</p>\n<p><img src=\"/img/open_geth_eth.jpg\"></p>\n<p>命令参数说明（更多命令详解可阅读<a href=\"\">Geth命令用法-参数详解篇</a>）:<br>–dev 启用开发者网络（模式），开发者网络会使用POA共识，默认预分配一个开发者账户并且会自动开启挖矿。<br>–datadir 后面的参数是区块数据及秘钥存放目录。<br>第一次输入命令后，它会放在当前目录下新建一个testNet目录来存放数据。<br>console 进入控制台<br>2&gt;&gt; test.log 表示把控制台日志输出到test.log文件</p>\n<p>为了更好的理解，建议新开一个命令行终端，实时显示日志：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tail -f test.log</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"准备账户\"><a href=\"#准备账户\" class=\"headerlink\" title=\"准备账户\"></a>准备账户</h2><p>部署智能合约需要一个外部账户，我们先来看看分配的开发者账户，在控制台使用以下命令查看账户：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; eth.accounts</span><br></pre></td></tr></table></figure>\n\n<p>回车后，返回一个账户数组，里面有一个默认账户，如：</p>\n<p><img src=\"/img/geth_accounts_1.jpg\"></p>\n<blockquote>\n<p>也可以使用personal.listAccounts查看账户，</p>\n</blockquote>\n<p>再来看一下账户里的余额，使用一下命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; eth.getBalance(eth.accounts[0])</span><br></pre></td></tr></table></figure>\n\n<p><strong>eth.accounts[0]</strong> 表示账户列表第一个账户<br>回车后，可以看到大量的余额，如：<br>1.15792089237316195423570985008687907853269… e+77</p>\n<p>开发者账户因余额太多，如果用这个账户来部署合约时会无法看到余额变化，为了更好的体验完整的过程，这里选择创建一个新的账户。</p>\n<h3 id=\"创建账户\"><a href=\"#创建账户\" class=\"headerlink\" title=\"创建账户\"></a>创建账户</h3><p>使用以下命令创建账户：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; personal.newAccount(&quot;Juan&quot;)</span><br></pre></td></tr></table></figure>\n\n<p>Juan为新账户的密码，回车后，返回一个新账户。</p>\n<p>这时我们查看账户列表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; eth.accounts</span><br></pre></td></tr></table></figure>\n\n<p>可以看到账户数组你包含两个账户，新账户在第二个（索引为1）位置。</p>\n<p>现在看看账户的余额：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; eth.getBalance(eth.accounts[1])</span><br><span class=\"line\">0</span><br></pre></td></tr></table></figure>\n\n<p>回车后，返回的是0，新账户是0。结果如：<br><img src=\"/img/geth_accounts_2.jpg\"></p>\n<h3 id=\"给新账户转账\"><a href=\"#给新账户转账\" class=\"headerlink\" title=\"给新账户转账\"></a>给新账户转账</h3><p>我们知道没有余额的账户是没法部署合约的，那我们就从默认账户转1以太币给新账户，使用以下命令（请使用你自己eth.accounts对应输出的账户）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eth.sendTransaction(&#123;from: &#x27;0xb0ebe17ef0e96b5c525709c0a1ede347c66bd391&#x27;, to: &#x27;0xf280facfd60d61f6fd3f88c9dee4fb90d0e11dfc&#x27;, value: web3.toWei(1, &quot;ether&quot;)&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>在打开的tail -f test.log日志终端里，可以同时看到挖矿记录<br>再次查看新账户余额，可以新账户有1个以太币</p>\n<p><img src=\"/img/geth_accounts_3.jpg\"></p>\n<h3 id=\"解锁账户\"><a href=\"#解锁账户\" class=\"headerlink\" title=\"解锁账户\"></a>解锁账户</h3><p>在部署合约前需要先解锁账户（就像银行转账要输入密码一样），使用以下命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">personal.unlockAccount(eth.accounts[1],&quot;Juan&quot;);</span><br></pre></td></tr></table></figure>\n\n<p>“Juan”是之前创建账户时的密码。<br>解锁成功后，账户就准备完毕啦，接下来就是编写合约代码。</p>\n<h2 id=\"编写合约代码\"><a href=\"#编写合约代码\" class=\"headerlink\" title=\"编写合约代码\"></a>编写合约代码</h2><p>现在我们来开始编写第一个智能合约代码，solidity代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pragma solidity ^0.4.18;</span><br><span class=\"line\">contract hello &#123;</span><br><span class=\"line\">    string greeting;</span><br><span class=\"line\"></span><br><span class=\"line\">    function hello(string _greeting) public &#123;</span><br><span class=\"line\">        greeting = _greeting;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function say() constant public returns (string) &#123;</span><br><span class=\"line\">        return greeting;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>简单解释下，我们定义了一个名为hello的合约，在合约初始化时保存了一个字符串（我们会传入hello world），每次调用say返回字符串。<br>把这段代码写(拷贝)到<a href=\"https://ethereum.github.io/browser-solidity\">Browser-Solidity</a>，如果没有错误，点击Details获取部署代码，如：</p>\n<p><img src=\"/img/eth_code_hello_step1.jpeg\"></p>\n<p>在弹出的对话框中找到WEB3DEPLOY部分，点拷贝，粘贴到编辑器后，修改初始化字符串为hello world。</p>\n<p><img src=\"/img/eth_code_hello_step2.jpeg\"></p>\n<blockquote>\n<p>solidity版本之间有可能不能兼容，这是你可以在Browser-Solidity的Settings里选择对应的编译器版本。<br>Browser-Solidity也不停的更新中，截图可能和你看到的界面不一样。</p>\n</blockquote>\n<h2 id=\"部署合约\"><a href=\"#部署合约\" class=\"headerlink\" title=\"部署合约\"></a>部署合约</h2><p>Browser-Solidity生成的代码，拷贝到编辑器里修改后的代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var _greeting = &quot;Hello World&quot; ;</span><br><span class=\"line\">var helloContract = web3.eth.contract([&#123;&quot;constant&quot;:true,&quot;inputs&quot;:[],&quot;name&quot;:&quot;say&quot;,&quot;outputs&quot;:[&#123;&quot;name&quot;:&quot;&quot;,&quot;type&quot;:&quot;string&quot;&#125;],&quot;payable&quot;:false,&quot;stateMutability&quot;:&quot;view&quot;,&quot;type&quot;:&quot;function&quot;&#125;,&#123;&quot;inputs&quot;:[&#123;&quot;name&quot;:&quot;_greeting&quot;,&quot;type&quot;:&quot;string&quot;&#125;],&quot;payable&quot;:false,&quot;stateMutability&quot;:&quot;nonpayable&quot;,&quot;type&quot;:&quot;constructor&quot;&#125;]);</span><br><span class=\"line\">var hello = helloContract.new(</span><br><span class=\"line\">   _greeting,</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">     from: web3.eth.accounts[1],</span><br><span class=\"line\">     data: &#x27;0x6060604052341561000f57600080fd5b6040516102b83803806102b8833981016040528080518201919050508060009080519060200190610041929190610048565b50506100ed565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061008957805160ff19168380011785556100b7565b828001600101855582156100b7579182015b828111156100b657825182559160200191906001019061009b565b5b5090506100c491906100c8565b5090565b6100ea91905b808211156100e65760008160009055506001016100ce565b5090565b90565b6101bc806100fc6000396000f300606060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063954ab4b214610046575b600080fd5b341561005157600080fd5b6100596100d4565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561009957808201518184015260208101905061007e565b50505050905090810190601f1680156100c65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6100dc61017c565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156101725780601f1061014757610100808354040283529160200191610172565b820191906000526020600020905b81548152906001019060200180831161015557829003601f168201915b5050505050905090565b6020604051908101604052806000815250905600a165627a7a723058204a5577bb3ad30e02f7a3bdd90eedcc682700d67fc8ed6604d38bb739c0655df90029&#x27;,</span><br><span class=\"line\">     gas: &#x27;4700000&#x27;</span><br><span class=\"line\">   &#125;, function (e, contract)&#123;</span><br><span class=\"line\">    console.log(e, contract);</span><br><span class=\"line\">    if (typeof contract.address !== &#x27;undefined&#x27;) &#123;</span><br><span class=\"line\">         console.log(&#x27;Contract mined! address: &#x27; + contract.address + &#x27; transactionHash: &#x27; + contract.transactionHash);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>第1行：修改字符串为Hello World<br>第2行：修改合约变量名<br>第3行：修改合约实例变量名，之后可以直接用实例调用函数。<br>第6行：修改部署账户为新账户索引，即使用新账户来部署合约。<br>第8行：准备付的gas费用，IDE已经帮我们预估好了。<br>第9行：设置部署回调函数。</p>\n<p>拷贝回geth控制台里，回车后，看到输出如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Contract mined! address: 0x79544078dcd9d560ec3f6eff0af42a9fc84c7d19 transactionHash: 0xe2caab22102e93434888a0b8013a7ae7e804b132e4a8bfd2318356f6cf0480b3</span><br></pre></td></tr></table></figure>\n\n<p>说明合约已经部署成功。</p>\n<blockquote>\n<p>在打开的 <strong>tail -f test.log</strong> 日志终端里，可以同时看到挖矿记录</p>\n</blockquote>\n<p>现在我们查看下新账户的余额：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; eth.getBalance(eth.accounts[1])</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"运行合约\"><a href=\"#运行合约\" class=\"headerlink\" title=\"运行合约\"></a>运行合约</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; hello.say()</span><br><span class=\"line\">&quot;Hello World&quot;</span><br></pre></td></tr></table></figure>\n\n<p>输出Hello World，我们第一个合约Hello World，成功运行了。</p>\n<p>运行截图如下：<br><img src=\"/img/init_example_show.jpg\"></p>\n<p>本文会随geth，solidity语言版本升级保持更新，查看本文原始链接：<a href=\"https://learnblockchain.cn/2017/11/24/init-env/\">https://learnblockchain.cn/2017/11/24/init-env/</a></p>\n<p>第一个合约的意义更重要的是体验智能合约开发流程，对于初学者一些可以选择先放弃一些细节，开发流程打通之后，可以增强信心进行下一步的学习。</p>\n","categories":[{"name":"学习记录","path":"api/categories/学习记录.json"},{"name":"区块链","path":"api/categories/区块链.json"},{"name":"以太坊","path":"api/categories/以太坊.json"}],"tags":[{"name":"以太坊","path":"api/tags/以太坊.json"}]}