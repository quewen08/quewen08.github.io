{"title":"数据持久化","slug":"docker-volume","date":"2022-09-21T13:39:39.000Z","updated":"2022-10-20T13:28:49.302Z","comments":true,"path":"api/articles/docker-volume.json","realPath":"/2022/docker-volume/index/","excerpt":null,"covers":["/img/2022/docker-volume/979767-20220616225959742-922397250.png","/img/2022/docker-volume/979767-20220616230012670-157780076.png","/img/2022/docker-volume/979767-20220616230025341-858480054.png","/img/2022/docker-volume/979767-20220616230042565-21286420.png","/img/2022/docker-volume/979767-20220616230056286-1861018710.png"],"cover":"/img/2022/docker-volume/979767-20220616225959742-922397250.png","content":"<h3 id=\"数据卷\"><a href=\"#数据卷\" class=\"headerlink\" title=\"数据卷\"></a>数据卷</h3><p>默认情况下，容器被删除，容器中数据也会随着一起删除。这对于某些重要的数据是绝对不允许的。此时就需要对数据进行持久化。<br><code>数据卷</code>是一个可以提供给一个或者多个容器使用的特殊目录，它绕过 UFS，能提供以下特性：</p>\n<ul>\n<li>多个容器可以共享和重用。</li>\n<li>对数据卷的修改会马上生效。</li>\n<li>对数据卷的更新不会影响镜像。</li>\n<li>数据卷会一直存在，即使删除容器。</li>\n</ul>\n<p>常用的数据卷操作命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建一个数据卷</span></span><br><span class=\"line\">docker volume create demo_volume</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看数据卷</span></span><br><span class=\"line\">docker volume <span class=\"built_in\">ls</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看数据卷详情</span></span><br><span class=\"line\">docker volume inspect demo_volume</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除数据卷</span></span><br><span class=\"line\">docker volume <span class=\"built_in\">rm</span> demo_volume</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除没用的数据卷</span></span><br><span class=\"line\">docker volume prune</span><br></pre></td></tr></table></figure>\n\n<p>如图所示：</p>\n<p><img src=\"/img/2022/docker-volume/979767-20220616225959742-922397250.png\"></p>\n<p>启动一个挂载了数据卷的容器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker container run -d --mount <span class=\"built_in\">source</span>=demo02_volume,target=/usr/share/nginx/html --name demo02 nginx</span><br></pre></td></tr></table></figure>\n\n<p>如图所示 ：</p>\n<p><img src=\"/img/2022/docker-volume/979767-20220616230012670-157780076.png\"></p>\n<p>配置说明：</p>\n<ul>\n<li><code>--mount</code>：用于标记挂载数据卷到容器中，可以有多个。</li>\n<li><code>source</code>：指定数据卷，如果数据卷不存在，则会自动创建。</li>\n<li><code>target</code>：指定容器内挂载的目录。</li>\n</ul>\n<p>查看容器相关信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker container inspect demo02</span><br></pre></td></tr></table></figure>\n\n<p>其中挂载部分内容如下</p>\n<p><img src=\"/img/2022/docker-volume/979767-20220616230025341-858480054.png\"></p>\n<blockquote>\n<p>数据卷是用来持久化容器数据的，它的生命周期独立于容器之外。</p>\n</blockquote>\n<p>如果在删除容器的时候想要一并删除存储卷的话，只需要<code>docker container rm -v</code>即可。</p>\n<h3 id=\"挂载主机目录和文件\"><a href=\"#挂载主机目录和文件\" class=\"headerlink\" title=\"挂载主机目录和文件\"></a>挂载主机目录和文件</h3><p>使用<code>--mount</code>参数除了能够挂载数据卷，还能挂载本机的目录到容器中。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --mount <span class=\"built_in\">type</span>=<span class=\"built_in\">bind</span>,<span class=\"built_in\">source</span>=/tmp,target=/usr/share/nginx/html,<span class=\"built_in\">readonly</span> --name demo03 nginx</span><br></pre></td></tr></table></figure>\n\n<p>需要注意：</p>\n<ul>\n<li>默认情况下，<code>--mount</code>挂载的数据卷<code>volume</code>，如果需要挂载目录，需要指定<code>type=bind</code>。</li>\n<li>source 在 bind 挂载中必须事先存在。</li>\n<li>在挂载最后可以加上<code>readonly</code>，标识容器对该目录只读。</li>\n</ul>\n<p>此时进入容器测试：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker container <span class=\"built_in\">exec</span> -it demo03 /bin/bash</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/img/2022/docker-volume/979767-20220616230042565-21286420.png\"></p>\n<p>可以发现，文件是宿主机的 &#x2F;tmp 下面的文件，并且只读无法创建文件。</p>\n<p>当然，也可以单独只挂载某个文件，但是前提是这个文件事先得存在：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker container run -d --mount <span class=\"built_in\">type</span>=<span class=\"built_in\">bind</span>,<span class=\"built_in\">source</span>=/tmp/1.txt,target=/root/.bash_history --name demo04 nginx</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/img/2022/docker-volume/979767-20220616230056286-1861018710.png\"></p>\n<p>历史命令就能被记录到本地。</p>\n<h3 id=\"其它挂载方式\"><a href=\"#其它挂载方式\" class=\"headerlink\" title=\"其它挂载方式\"></a>其它挂载方式</h3><p>除了<code>--mount</code>以外，还有<code>-v</code>，<code>--volume</code>的方式挂载数据卷，使用方法类似。示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 挂载目录并只读</span></span><br><span class=\"line\">docker container run -d -v /tmp:/usr/share/nginx/html:ro --name demo05 nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 挂载文件</span></span><br><span class=\"line\">docker container run -d -v /tmp/1.txt:/root/.bash_history --name demo08 nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 挂载一个随机生成的数据卷到指定目录</span></span><br><span class=\"line\">docker container run -d -v /usr/share/nginx/html --name demo06 nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 挂载一个已经存在的数据卷到指定目录</span></span><br><span class=\"line\">docker container run -d -v demo02_volume:/usr/share/nginx/html --name demo07 nginx</span><br></pre></td></tr></table></figure>\n\n<p>使用方法类似，而且在<code>Dockerfile</code>中的<code>VOLUME</code>指令就能定义。</p>\n","more":"<h3 id=\"数据卷\"><a href=\"#数据卷\" class=\"headerlink\" title=\"数据卷\"></a>数据卷</h3><p>默认情况下，容器被删除，容器中数据也会随着一起删除。这对于某些重要的数据是绝对不允许的。此时就需要对数据进行持久化。<br><code>数据卷</code>是一个可以提供给一个或者多个容器使用的特殊目录，它绕过 UFS，能提供以下特性：</p>\n<ul>\n<li>多个容器可以共享和重用。</li>\n<li>对数据卷的修改会马上生效。</li>\n<li>对数据卷的更新不会影响镜像。</li>\n<li>数据卷会一直存在，即使删除容器。</li>\n</ul>\n<p>常用的数据卷操作命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建一个数据卷</span></span><br><span class=\"line\">docker volume create demo_volume</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看数据卷</span></span><br><span class=\"line\">docker volume <span class=\"built_in\">ls</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看数据卷详情</span></span><br><span class=\"line\">docker volume inspect demo_volume</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除数据卷</span></span><br><span class=\"line\">docker volume <span class=\"built_in\">rm</span> demo_volume</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除没用的数据卷</span></span><br><span class=\"line\">docker volume prune</span><br></pre></td></tr></table></figure>\n\n<p>如图所示：</p>\n<p><img src=\"/img/2022/docker-volume/979767-20220616225959742-922397250.png\"></p>\n<p>启动一个挂载了数据卷的容器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker container run -d --mount <span class=\"built_in\">source</span>=demo02_volume,target=/usr/share/nginx/html --name demo02 nginx</span><br></pre></td></tr></table></figure>\n\n<p>如图所示 ：</p>\n<p><img src=\"/img/2022/docker-volume/979767-20220616230012670-157780076.png\"></p>\n<p>配置说明：</p>\n<ul>\n<li><code>--mount</code>：用于标记挂载数据卷到容器中，可以有多个。</li>\n<li><code>source</code>：指定数据卷，如果数据卷不存在，则会自动创建。</li>\n<li><code>target</code>：指定容器内挂载的目录。</li>\n</ul>\n<p>查看容器相关信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker container inspect demo02</span><br></pre></td></tr></table></figure>\n\n<p>其中挂载部分内容如下</p>\n<p><img src=\"/img/2022/docker-volume/979767-20220616230025341-858480054.png\"></p>\n<blockquote>\n<p>数据卷是用来持久化容器数据的，它的生命周期独立于容器之外。</p>\n</blockquote>\n<p>如果在删除容器的时候想要一并删除存储卷的话，只需要<code>docker container rm -v</code>即可。</p>\n<h3 id=\"挂载主机目录和文件\"><a href=\"#挂载主机目录和文件\" class=\"headerlink\" title=\"挂载主机目录和文件\"></a>挂载主机目录和文件</h3><p>使用<code>--mount</code>参数除了能够挂载数据卷，还能挂载本机的目录到容器中。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --mount <span class=\"built_in\">type</span>=<span class=\"built_in\">bind</span>,<span class=\"built_in\">source</span>=/tmp,target=/usr/share/nginx/html,<span class=\"built_in\">readonly</span> --name demo03 nginx</span><br></pre></td></tr></table></figure>\n\n<p>需要注意：</p>\n<ul>\n<li>默认情况下，<code>--mount</code>挂载的数据卷<code>volume</code>，如果需要挂载目录，需要指定<code>type=bind</code>。</li>\n<li>source 在 bind 挂载中必须事先存在。</li>\n<li>在挂载最后可以加上<code>readonly</code>，标识容器对该目录只读。</li>\n</ul>\n<p>此时进入容器测试：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker container <span class=\"built_in\">exec</span> -it demo03 /bin/bash</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/img/2022/docker-volume/979767-20220616230042565-21286420.png\"></p>\n<p>可以发现，文件是宿主机的 &#x2F;tmp 下面的文件，并且只读无法创建文件。</p>\n<p>当然，也可以单独只挂载某个文件，但是前提是这个文件事先得存在：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker container run -d --mount <span class=\"built_in\">type</span>=<span class=\"built_in\">bind</span>,<span class=\"built_in\">source</span>=/tmp/1.txt,target=/root/.bash_history --name demo04 nginx</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/img/2022/docker-volume/979767-20220616230056286-1861018710.png\"></p>\n<p>历史命令就能被记录到本地。</p>\n<h3 id=\"其它挂载方式\"><a href=\"#其它挂载方式\" class=\"headerlink\" title=\"其它挂载方式\"></a>其它挂载方式</h3><p>除了<code>--mount</code>以外，还有<code>-v</code>，<code>--volume</code>的方式挂载数据卷，使用方法类似。示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 挂载目录并只读</span></span><br><span class=\"line\">docker container run -d -v /tmp:/usr/share/nginx/html:ro --name demo05 nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 挂载文件</span></span><br><span class=\"line\">docker container run -d -v /tmp/1.txt:/root/.bash_history --name demo08 nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 挂载一个随机生成的数据卷到指定目录</span></span><br><span class=\"line\">docker container run -d -v /usr/share/nginx/html --name demo06 nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 挂载一个已经存在的数据卷到指定目录</span></span><br><span class=\"line\">docker container run -d -v demo02_volume:/usr/share/nginx/html --name demo07 nginx</span><br></pre></td></tr></table></figure>\n\n<p>使用方法类似，而且在<code>Dockerfile</code>中的<code>VOLUME</code>指令就能定义。</p>\n","categories":[{"name":"学习记录","path":"api/categories/学习记录.json"},{"name":"Docker","path":"api/categories/Docker.json"}],"tags":[{"name":"docker","path":"api/tags/docker.json"},{"name":"k8s","path":"api/tags/k8s.json"},{"name":"kubernetes","path":"api/tags/kubernetes.json"},{"name":"容器","path":"api/tags/容器.json"},{"name":"云原生","path":"api/tags/云原生.json"}]}