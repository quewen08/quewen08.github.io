{"title":"版本管理操作规范及gitflow使用","slug":"git-flow","date":"2022-04-29T05:35:33.000Z","updated":"2022-10-19T14:40:00.252Z","comments":true,"path":"api/articles/git-flow.json","realPath":"/2022/git-flow/git-flow/","excerpt":null,"covers":["/img/2022/git-flow/20210720145803822.png"],"cover":"/img/2022/git-flow/20210720145803822.png","content":"<blockquote>\n<p>版本&#x2F;分支管理规范，主要包括 commit 规范，版本号管理规范，mversion 的使用方法，commitizen 的使用方法，git 常用命令收集，gitflow 使用说明</p>\n</blockquote>\n<h3 id=\"有模板的项目，要以统一的模板创建项目\"><a href=\"#有模板的项目，要以统一的模板创建项目\" class=\"headerlink\" title=\"有模板的项目，要以统一的模板创建项目\"></a>有模板的项目，要以统一的模板创建项目</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@git.com:your-project/your-project.git</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"git-commit-规范\"><a href=\"#git-commit-规范\" class=\"headerlink\" title=\"git commit 规范\"></a>git commit 规范</h3><p>git commit 提交样式标准</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m &quot;type(scope): 描述(#issue)&quot;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>git commit -m “type(类型): 描述(#issue)”</p>\n</blockquote>\n<h4 id=\"lt-类型-gt\"><a href=\"#lt-类型-gt\" class=\"headerlink\" title=\"&lt;类型&gt;\"></a><strong style=\"color: #c7254e;background-color: #f9f2f4;\">&lt;类型&gt;</strong></h4><p>用于说明 commit 的类别，只允许使用下面 7 个标识。</p>\n<ul>\n<li>feat：新功能（feature）</li>\n<li>fix：修补 bug</li>\n<li>docs：文档（documentation）</li>\n<li>style： 格式（不影响代码运行的变动）</li>\n<li>refactor：重构（即不是新增功能，也不是修改 bug 的代码变动）</li>\n<li>test：增加测试</li>\n<li>chore：构建过程或辅助工具的变动</li>\n</ul>\n<h4 id=\"lt-内容-gt\"><a href=\"#lt-内容-gt\" class=\"headerlink\" title=\"&lt;内容&gt;\"></a><strong style=\"color: #c7254e;background-color: #f9f2f4;\">&lt;内容&gt;</strong></h4><p>对本次 commit 的详细描述，可以分成多行，可详细说明代码变动的动机</p>\n<h4 id=\"lt-结尾-gt\"><a href=\"#lt-结尾-gt\" class=\"headerlink\" title=\"&lt;结尾&gt;\"></a><strong style=\"color: #c7254e;background-color: #f9f2f4;\">&lt;结尾&gt;</strong></h4><p>如果当前 commit 针对某个 issue，那么可以在 Footer 部分关闭这个 issue：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Closes #234</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>commitizen 使用说明</strong><br>全局安装：</p>\n<p><code>npm install -g commitizen</code></p>\n<p>进入到<code>.git</code>目录</p>\n<p><code>commitizen init cz-conventional-changelog --save --save-exact</code></p>\n<p>用<code>git cz</code>命令来取代<code>git commit</code></p>\n</blockquote>\n<h3 id=\"版本号规范\"><a href=\"#版本号规范\" class=\"headerlink\" title=\"版本号规范\"></a>版本号规范</h3><p>初期开发版本号从 0.1.0 开始</p>\n<p>初次上线版本号更换为 1.0.0</p>\n<p>使用 npm install -g mversion 更新版本号</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g mversion</span><br></pre></td></tr></table></figure>\n\n<p><strong>版本号修改规则及命令：</strong></p>\n<p>v1.0.0 （主版本号.次版本号.修订版）</p>\n<ul>\n<li>主版本号：当功能模块有较大的变动（不向下兼容），比如增加多个模块或者整体架构有较大改动的情况<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mversion m // 1.0.0 =&gt; 2.0.0</span><br></pre></td></tr></table></figure></li>\n<li>子版本号：当功能有一定的增加或变化（向下兼容），比如增加了对权限控制、增加登录校验……<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mversion i // 1.0.0 =&gt; 1.1.0</span><br></pre></td></tr></table></figure></li>\n<li>修订号：一般是<code>Bug</code>修复或是一些小的变动（向下兼容），要经常发布修订版，时间间隔短<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mversion p // 1.0.0 =&gt; 1.0.1</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>修改完成测试通过后在项目文档中写入更新内容，新建 tag 并推送到远程分支</p>\n<p>可在.mversionrc 中添加 hooks 自动添加 tag</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;preupdate&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;echo &#x27;Bumping version&#x27;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;postupdate&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;git add package.json &amp;&amp; git commit -m v%s&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;precommit&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;echo &#x27;precommit&#x27;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;postcommit&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;echo &#x27;postcommit&#x27;&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.npmjs.com/package/mversion\">mversion 文档</a></p>\n<p><code>git tag -a v1.4 -m &#39;version 1.4&#39;</code></p>\n<p><code>git push --tags</code></p>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><p><code>commit</code>统一规范</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m &#x27;type(scope): 描述(#issue)&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>切换到指定 tag</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout tag_name</span><br></pre></td></tr></table></figure>\n\n<p>使用<code>git tag</code>命令添加一个新的标签：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -a v1.4 -m &#x27;version 1.4&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>删除本地<code>tag</code>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -d tag_name</span><br></pre></td></tr></table></figure>\n\n<p>从指定 tag 新建分支</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b branch_name tag_name</span><br></pre></td></tr></table></figure>\n\n<p>clone 指定 tag</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone --branch [tags标签] [git地址]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Git-flow\"><a href=\"#Git-flow\" class=\"headerlink\" title=\"Git flow\"></a>Git flow</h3><blockquote>\n<p>新项目第一次必须执行</p>\n</blockquote>\n<p><code>git flow init</code></p>\n<h4 id=\"分支操作说明\"><a href=\"#分支操作说明\" class=\"headerlink\" title=\"分支操作说明\"></a>分支操作说明</h4><h5 id=\"feature-新功能开发：从-dev-新建-feature-分支-开发完成后会合并到-dev\"><a href=\"#feature-新功能开发：从-dev-新建-feature-分支-开发完成后会合并到-dev\" class=\"headerlink\" title=\"feature 新功能开发：从 dev 新建 feature 分支 开发完成后会合并到 dev\"></a>feature 新功能开发：从 dev 新建 feature 分支 开发完成后会合并到 dev</h5><p><code>git flow feature start [version]</code></p>\n<p>some commit…</p>\n<p><code>git flow feature publish [version]</code></p>\n<p><code>git flow feature finish [version]</code></p>\n<p><code>git push</code></p>\n<h5 id=\"release：从-dev-新建-release-分支-gt-最后会合并到-master-和-dev-gt-发布新版\"><a href=\"#release：从-dev-新建-release-分支-gt-最后会合并到-master-和-dev-gt-发布新版\" class=\"headerlink\" title=\"release：从 dev 新建 release 分支 -&gt; 最后会合并到 master 和 dev -&gt; 发布新版\"></a>release：从 dev 新建 release 分支 -&gt; 最后会合并到 master 和 dev -&gt; 发布新版</h5><p><code>git flow release start [version]</code></p>\n<p><code>mversion p</code> &#x2F;&#x2F; 更新版本号</p>\n<p>some commit…</p>\n<p><code>git flow release publish [version]</code></p>\n<p><code>git flow release finish [version]</code></p>\n<p><code>git push --all &amp;&amp; git push --tag</code></p>\n<h5 id=\"修复线上-bug：从-master-新建-hotfix-分支-gt-合并-master-和-dev-gt-发布新版\"><a href=\"#修复线上-bug：从-master-新建-hotfix-分支-gt-合并-master-和-dev-gt-发布新版\" class=\"headerlink\" title=\"修复线上 bug：从 master 新建 hotfix 分支 -&gt; 合并 master 和 dev -&gt; 发布新版\"></a>修复线上 bug：从 master 新建 hotfix 分支 -&gt; 合并 master 和 dev -&gt; 发布新版</h5><p><code>git flow hotfix start [version]</code></p>\n<p><code>mversion p</code> &#x2F;&#x2F; 更新版本号</p>\n<p><code>some commit…</code></p>\n<p><code>git flow hotfix publish [version]</code></p>\n<p><code>git flow hotfix finish [version]</code></p>\n<p><code>git push --all &amp;&amp; git push --tag</code></p>\n<h3 id=\"Git-Flow-的常用分支\"><a href=\"#Git-Flow-的常用分支\" class=\"headerlink\" title=\"Git Flow 的常用分支\"></a>Git Flow 的常用分支</h3><h4 id=\"master\"><a href=\"#master\" class=\"headerlink\" title=\"master\"></a>master</h4><ul>\n<li>主分支 , 产品的功能全部实现后 , 最终在 master 分支对外发布</li>\n<li>该分支为只读唯一分支 , 只能从其他分支(release&#x2F;hotfix)合并 , 不能在此分支修改</li>\n<li>另外所有在 master 分支的推送应该打标签做记录,方便追溯</li>\n<li>例如 release 合并到 master , 或 hotfix 合并到 master</li>\n</ul>\n<h4 id=\"develop\"><a href=\"#develop\" class=\"headerlink\" title=\"develop\"></a>develop</h4><ul>\n<li>主开发分支 , 基于 master 分支克隆</li>\n<li>包含所有要发布到下一个 release 的代码</li>\n<li>该分支为只读唯一分支 , 只能从其他分支合并</li>\n<li>feature 功能分支完成 , 合并到 develop(不推送)</li>\n<li>develop 拉取 release 分支 , 提测</li>\n<li>release&#x2F;hotfix 分支上线完毕 , 合并到 develop 并推送</li>\n</ul>\n<h4 id=\"feature\"><a href=\"#feature\" class=\"headerlink\" title=\"feature\"></a>feature</h4><ul>\n<li>功能开发分支 , 基于 develop 分支克隆 , 主要用于新需求新功能的开发</li>\n<li>功能开发完毕后合到 develop 分支(未正式上线之前不推送到远程中央仓库!!!)</li>\n<li>feature 分支可同时存在多个 , 用于团队中多个功能同时开发 , 属于临时分支 , 功能完成后可选删除</li>\n</ul>\n<h4 id=\"release\"><a href=\"#release\" class=\"headerlink\" title=\"release\"></a>release</h4><ul>\n<li>测试分支 , 基于 feature 分支合并到 develop 之后 , 从 develop 分支克隆</li>\n<li>主要用于提交给测试人员进行功能测试 , 测试过程中发现的 BUG 在本分支进行修复 , 修复完成上线后合并到 develop&#x2F;master 分支并推送(完成功能) , 打 Tag</li>\n<li>属于临时分支 , 功能上线后可选删除</li>\n</ul>\n<h4 id=\"hotfix\"><a href=\"#hotfix\" class=\"headerlink\" title=\"hotfix\"></a>hotfix</h4><ul>\n<li>补丁分支 , 基于 master 分支克隆 , 主要用于对线上的版本进行 BUG 修复</li>\n<li>修复完毕后合并到 develop&#x2F;master 分支并推送 , 打 Tag</li>\n<li>属于临时分支 , 补丁修复上线后可选删除</li>\n<li>所有 hotfix 分支的修改会进入到下一个 release</li>\n</ul>\n<h3 id=\"Git-flow-分支流程图\"><a href=\"#Git-flow-分支流程图\" class=\"headerlink\" title=\"Git flow 分支流程图\"></a>Git flow 分支流程图</h3><p><img src=\"/img/2022/git-flow/20210720145803822.png\"></p>\n","more":"<blockquote>\n<p>版本&#x2F;分支管理规范，主要包括 commit 规范，版本号管理规范，mversion 的使用方法，commitizen 的使用方法，git 常用命令收集，gitflow 使用说明</p>\n</blockquote>\n<h3 id=\"有模板的项目，要以统一的模板创建项目\"><a href=\"#有模板的项目，要以统一的模板创建项目\" class=\"headerlink\" title=\"有模板的项目，要以统一的模板创建项目\"></a>有模板的项目，要以统一的模板创建项目</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@git.com:your-project/your-project.git</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"git-commit-规范\"><a href=\"#git-commit-规范\" class=\"headerlink\" title=\"git commit 规范\"></a>git commit 规范</h3><p>git commit 提交样式标准</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m &quot;type(scope): 描述(#issue)&quot;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>git commit -m “type(类型): 描述(#issue)”</p>\n</blockquote>\n<h4 id=\"lt-类型-gt\"><a href=\"#lt-类型-gt\" class=\"headerlink\" title=\"&lt;类型&gt;\"></a><strong style=\"color: #c7254e;background-color: #f9f2f4;\">&lt;类型&gt;</strong></h4><p>用于说明 commit 的类别，只允许使用下面 7 个标识。</p>\n<ul>\n<li>feat：新功能（feature）</li>\n<li>fix：修补 bug</li>\n<li>docs：文档（documentation）</li>\n<li>style： 格式（不影响代码运行的变动）</li>\n<li>refactor：重构（即不是新增功能，也不是修改 bug 的代码变动）</li>\n<li>test：增加测试</li>\n<li>chore：构建过程或辅助工具的变动</li>\n</ul>\n<h4 id=\"lt-内容-gt\"><a href=\"#lt-内容-gt\" class=\"headerlink\" title=\"&lt;内容&gt;\"></a><strong style=\"color: #c7254e;background-color: #f9f2f4;\">&lt;内容&gt;</strong></h4><p>对本次 commit 的详细描述，可以分成多行，可详细说明代码变动的动机</p>\n<h4 id=\"lt-结尾-gt\"><a href=\"#lt-结尾-gt\" class=\"headerlink\" title=\"&lt;结尾&gt;\"></a><strong style=\"color: #c7254e;background-color: #f9f2f4;\">&lt;结尾&gt;</strong></h4><p>如果当前 commit 针对某个 issue，那么可以在 Footer 部分关闭这个 issue：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Closes #234</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>commitizen 使用说明</strong><br>全局安装：</p>\n<p><code>npm install -g commitizen</code></p>\n<p>进入到<code>.git</code>目录</p>\n<p><code>commitizen init cz-conventional-changelog --save --save-exact</code></p>\n<p>用<code>git cz</code>命令来取代<code>git commit</code></p>\n</blockquote>\n<h3 id=\"版本号规范\"><a href=\"#版本号规范\" class=\"headerlink\" title=\"版本号规范\"></a>版本号规范</h3><p>初期开发版本号从 0.1.0 开始</p>\n<p>初次上线版本号更换为 1.0.0</p>\n<p>使用 npm install -g mversion 更新版本号</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g mversion</span><br></pre></td></tr></table></figure>\n\n<p><strong>版本号修改规则及命令：</strong></p>\n<p>v1.0.0 （主版本号.次版本号.修订版）</p>\n<ul>\n<li>主版本号：当功能模块有较大的变动（不向下兼容），比如增加多个模块或者整体架构有较大改动的情况<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mversion m // 1.0.0 =&gt; 2.0.0</span><br></pre></td></tr></table></figure></li>\n<li>子版本号：当功能有一定的增加或变化（向下兼容），比如增加了对权限控制、增加登录校验……<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mversion i // 1.0.0 =&gt; 1.1.0</span><br></pre></td></tr></table></figure></li>\n<li>修订号：一般是<code>Bug</code>修复或是一些小的变动（向下兼容），要经常发布修订版，时间间隔短<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mversion p // 1.0.0 =&gt; 1.0.1</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>修改完成测试通过后在项目文档中写入更新内容，新建 tag 并推送到远程分支</p>\n<p>可在.mversionrc 中添加 hooks 自动添加 tag</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;preupdate&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;echo &#x27;Bumping version&#x27;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;postupdate&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;git add package.json &amp;&amp; git commit -m v%s&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;precommit&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;echo &#x27;precommit&#x27;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;postcommit&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;echo &#x27;postcommit&#x27;&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.npmjs.com/package/mversion\">mversion 文档</a></p>\n<p><code>git tag -a v1.4 -m &#39;version 1.4&#39;</code></p>\n<p><code>git push --tags</code></p>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><p><code>commit</code>统一规范</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m &#x27;type(scope): 描述(#issue)&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>切换到指定 tag</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout tag_name</span><br></pre></td></tr></table></figure>\n\n<p>使用<code>git tag</code>命令添加一个新的标签：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -a v1.4 -m &#x27;version 1.4&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>删除本地<code>tag</code>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -d tag_name</span><br></pre></td></tr></table></figure>\n\n<p>从指定 tag 新建分支</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b branch_name tag_name</span><br></pre></td></tr></table></figure>\n\n<p>clone 指定 tag</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone --branch [tags标签] [git地址]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Git-flow\"><a href=\"#Git-flow\" class=\"headerlink\" title=\"Git flow\"></a>Git flow</h3><blockquote>\n<p>新项目第一次必须执行</p>\n</blockquote>\n<p><code>git flow init</code></p>\n<h4 id=\"分支操作说明\"><a href=\"#分支操作说明\" class=\"headerlink\" title=\"分支操作说明\"></a>分支操作说明</h4><h5 id=\"feature-新功能开发：从-dev-新建-feature-分支-开发完成后会合并到-dev\"><a href=\"#feature-新功能开发：从-dev-新建-feature-分支-开发完成后会合并到-dev\" class=\"headerlink\" title=\"feature 新功能开发：从 dev 新建 feature 分支 开发完成后会合并到 dev\"></a>feature 新功能开发：从 dev 新建 feature 分支 开发完成后会合并到 dev</h5><p><code>git flow feature start [version]</code></p>\n<p>some commit…</p>\n<p><code>git flow feature publish [version]</code></p>\n<p><code>git flow feature finish [version]</code></p>\n<p><code>git push</code></p>\n<h5 id=\"release：从-dev-新建-release-分支-gt-最后会合并到-master-和-dev-gt-发布新版\"><a href=\"#release：从-dev-新建-release-分支-gt-最后会合并到-master-和-dev-gt-发布新版\" class=\"headerlink\" title=\"release：从 dev 新建 release 分支 -&gt; 最后会合并到 master 和 dev -&gt; 发布新版\"></a>release：从 dev 新建 release 分支 -&gt; 最后会合并到 master 和 dev -&gt; 发布新版</h5><p><code>git flow release start [version]</code></p>\n<p><code>mversion p</code> &#x2F;&#x2F; 更新版本号</p>\n<p>some commit…</p>\n<p><code>git flow release publish [version]</code></p>\n<p><code>git flow release finish [version]</code></p>\n<p><code>git push --all &amp;&amp; git push --tag</code></p>\n<h5 id=\"修复线上-bug：从-master-新建-hotfix-分支-gt-合并-master-和-dev-gt-发布新版\"><a href=\"#修复线上-bug：从-master-新建-hotfix-分支-gt-合并-master-和-dev-gt-发布新版\" class=\"headerlink\" title=\"修复线上 bug：从 master 新建 hotfix 分支 -&gt; 合并 master 和 dev -&gt; 发布新版\"></a>修复线上 bug：从 master 新建 hotfix 分支 -&gt; 合并 master 和 dev -&gt; 发布新版</h5><p><code>git flow hotfix start [version]</code></p>\n<p><code>mversion p</code> &#x2F;&#x2F; 更新版本号</p>\n<p><code>some commit…</code></p>\n<p><code>git flow hotfix publish [version]</code></p>\n<p><code>git flow hotfix finish [version]</code></p>\n<p><code>git push --all &amp;&amp; git push --tag</code></p>\n<h3 id=\"Git-Flow-的常用分支\"><a href=\"#Git-Flow-的常用分支\" class=\"headerlink\" title=\"Git Flow 的常用分支\"></a>Git Flow 的常用分支</h3><h4 id=\"master\"><a href=\"#master\" class=\"headerlink\" title=\"master\"></a>master</h4><ul>\n<li>主分支 , 产品的功能全部实现后 , 最终在 master 分支对外发布</li>\n<li>该分支为只读唯一分支 , 只能从其他分支(release&#x2F;hotfix)合并 , 不能在此分支修改</li>\n<li>另外所有在 master 分支的推送应该打标签做记录,方便追溯</li>\n<li>例如 release 合并到 master , 或 hotfix 合并到 master</li>\n</ul>\n<h4 id=\"develop\"><a href=\"#develop\" class=\"headerlink\" title=\"develop\"></a>develop</h4><ul>\n<li>主开发分支 , 基于 master 分支克隆</li>\n<li>包含所有要发布到下一个 release 的代码</li>\n<li>该分支为只读唯一分支 , 只能从其他分支合并</li>\n<li>feature 功能分支完成 , 合并到 develop(不推送)</li>\n<li>develop 拉取 release 分支 , 提测</li>\n<li>release&#x2F;hotfix 分支上线完毕 , 合并到 develop 并推送</li>\n</ul>\n<h4 id=\"feature\"><a href=\"#feature\" class=\"headerlink\" title=\"feature\"></a>feature</h4><ul>\n<li>功能开发分支 , 基于 develop 分支克隆 , 主要用于新需求新功能的开发</li>\n<li>功能开发完毕后合到 develop 分支(未正式上线之前不推送到远程中央仓库!!!)</li>\n<li>feature 分支可同时存在多个 , 用于团队中多个功能同时开发 , 属于临时分支 , 功能完成后可选删除</li>\n</ul>\n<h4 id=\"release\"><a href=\"#release\" class=\"headerlink\" title=\"release\"></a>release</h4><ul>\n<li>测试分支 , 基于 feature 分支合并到 develop 之后 , 从 develop 分支克隆</li>\n<li>主要用于提交给测试人员进行功能测试 , 测试过程中发现的 BUG 在本分支进行修复 , 修复完成上线后合并到 develop&#x2F;master 分支并推送(完成功能) , 打 Tag</li>\n<li>属于临时分支 , 功能上线后可选删除</li>\n</ul>\n<h4 id=\"hotfix\"><a href=\"#hotfix\" class=\"headerlink\" title=\"hotfix\"></a>hotfix</h4><ul>\n<li>补丁分支 , 基于 master 分支克隆 , 主要用于对线上的版本进行 BUG 修复</li>\n<li>修复完毕后合并到 develop&#x2F;master 分支并推送 , 打 Tag</li>\n<li>属于临时分支 , 补丁修复上线后可选删除</li>\n<li>所有 hotfix 分支的修改会进入到下一个 release</li>\n</ul>\n<h3 id=\"Git-flow-分支流程图\"><a href=\"#Git-flow-分支流程图\" class=\"headerlink\" title=\"Git flow 分支流程图\"></a>Git flow 分支流程图</h3><p><img src=\"/img/2022/git-flow/20210720145803822.png\"></p>\n","categories":[{"name":"教程分享","path":"api/categories/教程分享.json"},{"name":"Git","path":"api/categories/Git.json"}],"tags":[{"name":"Git","path":"api/tags/Git.json"}]}