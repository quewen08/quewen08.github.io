{"title":"比特币脚本及交易分析 - 智能合约雏形","slug":"bitcoin-script","date":"2018-02-13T22:22:43.000Z","updated":"2022-10-19T14:40:00.243Z","comments":true,"path":"api/articles/bitcoin-script.json","realPath":"/2018/bitcoin-script/bitcoin-script/","excerpt":null,"covers":["/img/own_chain.jpeg","/img/script.jpeg","/img/script_run1.jpeg","/img/script_run2.jpeg","/img/tx_struce.jpeg","/img/tx_input_struce.jpeg","/img/tx_input_overview.jpeg","/img/tx_output_struce.jpeg","/img/tx_output_overview.jpeg"],"cover":"/img/own_chain.jpeg","content":"<p>大家都有转过账，每笔交易是这样的：张三账上减￥200，李四账上加￥200。<br>在比特币区块链中，交易不是这么简单，\b\b交易实际是通过脚本来完成，以承载更多的功能个，这也是为什么比特币被称为是一种“可编程的货币”。<br>本文就来分析一下交易是如何实现可编程的。</p>\n<h2 id=\"未花费的交易输出-UTXO\"><a href=\"#未花费的交易输出-UTXO\" class=\"headerlink\" title=\"未花费的交易输出(UTXO)\"></a>未花费的交易输出(UTXO)</h2><p>先引入一个概念：未花费的交易输出——UTXO（Unspent Transaction Output）</p>\n<p>其实比特币的交易都是基于UTXO上的，即交易的输入是之前交易未花费的输出，这笔交易的输出可以被当做下一笔新交易的输入。</p>\n<blockquote>\n<p>挖矿奖励属于一个特殊的交易（称为coinbase交易），可以没有输入。<br>UTXO是交易的基本单元，不能再分割。<br>在比特币没有余额概念，只有分散到区块链里的UTXO</p>\n</blockquote>\n<p>随着钱从一个地址被移动到另一个地址的同时形成了一条所有权链，像这样：</p>\n<p><img src=\"/img/own_chain.jpeg\"></p>\n<h2 id=\"比特币脚本\"><a href=\"#比特币脚本\" class=\"headerlink\" title=\"比特币脚本\"></a>比特币脚本</h2><p>比特币交易是首先要提供一个用于解锁UTXO（用私钥去匹配锁定脚本）的脚本（常称为解锁脚本：Signature script)，这也叫交易输入，<br>交易的输出则是指向一个脚本（称为锁定脚本：PubKey script），这个脚本表达了：谁的签名（签名是常见形式，\b并不一定必须是签名）能匹配这个输出地址，钱就支付给谁。</p>\n<p>每一个比特币节点会通过同时执行这解锁和锁定脚本（不是当前的锁定脚本，是指上一个交易的锁定脚本）来验证一笔交易，脚本组合结果为真，则为有效交易。</p>\n<blockquote>\n<p>当解锁版脚本与锁定版脚本的设定条件相匹配时，执行组合有效脚本时才会显示结果为真</p>\n</blockquote>\n<p>如最为常见类型的比特币交易脚本（支付到公钥哈希：P2PKH（Pay-to-Public-Key-Hash））组合是这样：<br><img src=\"/img/script.jpeg\"></p>\n<h3 id=\"常见交易脚本验证过程\"><a href=\"#常见交易脚本验证过程\" class=\"headerlink\" title=\"常见交易脚本验证过程\"></a>常见交易脚本验证过程</h3><p>比特币交易脚本语言是一种基于逆波兰表示法的基于栈的执行语言（不知道逆波兰和栈的同学去翻大学数据结构课本，你也可跳过这个部分）。</p>\n<blockquote>\n<p>比特币脚本语言包含基本算数计算、基本逻辑(比如if…then)、报错以及返回结果和一些加密指令，不支持循环。想了解更多语言细节可参考:<a href=\"http://www.8btc.com/bitcoin_scripts\">比特币脚本</a></p>\n</blockquote>\n<p>脚本语言通过从左至右地处理每个项目的方式执行脚本。</p>\n<p>下面用两个图说明下常见类型的比特币交易脚本验证执行过程：</p>\n<p><img src=\"/img/script_run1.jpeg\"></p>\n<p>上图为解锁脚本运行过程（主要是入栈）</p>\n<p><img src=\"/img/script_run2.jpeg\"></p>\n<p>上图为锁定脚本运行过程（主要是出栈），最后的结果为真，说明交易有效。</p>\n<h2 id=\"交易分析\"><a href=\"#交易分析\" class=\"headerlink\" title=\"交易分析\"></a>交易分析</h2><p>实际上比特币的交易被设计为可以纳入多个输入和输出。</p>\n<h3 id=\"交易结构\"><a href=\"#交易结构\" class=\"headerlink\" title=\"交易结构\"></a>交易结构</h3><p>我们来看看完整的交易结构<br><img src=\"/img/tx_struce.jpeg\"></p>\n<blockquote>\n<p>交易的锁定时间定义了能被加到区块链里的最早的交易时间。在大多数交易里，它被设置成0，用来表示立即执行。<br>如果锁定时间不是0并且小于5亿，就被视为区块高度，意指在这个指定的区块高度之前，该交易不会被包含在区块链里。<br>如果锁定时间大于5亿，则它被当作是一个Unix纪元时间戳（从1970年1月1日以来的秒数），并且在这个指定时间之前，该交易不会被包含在区块链里。</p>\n</blockquote>\n<p>交易的数据结构没有交易费的字段，交易费通过所有输入的总和，以及所有输出的总和之间的差来表示，即：</p>\n<blockquote>\n<p>交易费 &#x3D; 求和（所有输入） - 求和（所有输出）</p>\n</blockquote>\n<h3 id=\"交易输入结构\"><a href=\"#交易输入结构\" class=\"headerlink\" title=\"交易输入结构\"></a>交易输入结构</h3><p>刚刚我们提过输入需要提供一个解锁脚本，现在来看看一个交易的输入结构：</p>\n<p><img src=\"/img/tx_input_struce.jpeg\"></p>\n<p>我们结合整个交易的结构里看输入结构就是这样子：</p>\n<p><img src=\"/img/tx_input_overview.jpeg\"></p>\n<h3 id=\"交易输出结构\"><a href=\"#交易输出结构\" class=\"headerlink\" title=\"交易输出结构\"></a>交易输出结构</h3><p>刚刚我们提过输出是指向一个解锁脚本，具体交易的输出结构为：<br><img src=\"/img/tx_output_struce.jpeg\"></p>\n<p>我们结合整个交易的结构里看输出结构就是这样子：</p>\n<p><img src=\"/img/tx_output_overview.jpeg\"></p>\n<h3 id=\"交易哈希计算\"><a href=\"#交易哈希计算\" class=\"headerlink\" title=\"交易哈希计算\"></a>交易哈希计算</h3><p>在<a href=\"/posts/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E5%8C%BA%E5%9D%97%E9%93%BE/2018-02-14-merkle.html\">比特币区块结构Merkle 树及简单支付验证分析</a>讲到区块结构，区块结构包含多个交易的哈希。<br>那么交易哈希是怎么计算的呢？</p>\n<ol>\n<li>交易结构各字段序列化为字节数组</li>\n<li>把字节数组拼接为支付串</li>\n<li>对支付串计算两次SHA256 得到交易hash<br>了解详情可进一步参考<a href=\"https://bitcoin.stackexchange.com/questions/2859/how-are-transaction-hashes-calculated\">如何计算交易Hash?</a>及<a href=\"https://bitcointalk.org/index.php?topic=54451.msg649253#msg649253\">如何创建Hash?</a></li>\n</ol>\n<p>现在是不是对完整的交易到区块有了更清晰的认识。</p>\n<h2 id=\"智能合约雏形-应用场景说明\"><a href=\"#智能合约雏形-应用场景说明\" class=\"headerlink\" title=\"智能合约雏形 - 应用场景说明\"></a>智能合约雏形 - 应用场景说明</h2><p>由于交易是通过脚本来实现，脚本语言可以表达出无数的条件变种。</p>\n<p>比特币的脚本目前常用的主要分为两种，一种是常见的P2PKH（支付给公钥哈希），另一种是P2SH（Pay-to-Script-Hash支付脚本哈希）。<br>P2SH支付中，锁定脚本被密码学哈希所取代，当一笔交易试图支付UTXO时，要解锁支付脚本，它必须含有与哈希相匹配的脚本。</p>\n<p>这里不展开技术细节，下面说明一些应用场景，以便大家有更直观的认识。</p>\n<ul>\n<li><p>多重签名应用<br>合伙经营中，如只有一半以上的的股东同意签名就可以进行支付，可为公司治理提供管控便利，同时也能有效防范盗窃、挪用和遗失。</p>\n<p>用于担保和争端调解，一个买家想和他不认识或不信任的某人交易，在一般情况交易正常进行时，买家不想任何第三方参与。那交易双方可以发起支付，但如果交易出现问题时，那第三方就可以根据裁定，使用自己的签名和裁定认可的一方共同签名来兑现这笔交易。</p>\n</li>\n<li><p>保证合同<br>保证合同是建造公众商品时的集资办法，公众商品是指一旦建成，任何人都可以免费享受到好处。标准的例子是灯塔，所有人都认同应该建造一个，但是对于个人航海者来说灯塔太贵了，灯塔同时也会方便其他航海者。</p>\n<p>一个解决方案是向所有人集资，只有当筹集的资金超过所需的建造成本时，每个人才真正付钱，如果集资款不足，则谁都不用付钱。</p>\n</li>\n<li><p>依靠预言<br>假如老人想让他孙子继承遗产，继承时间是在他死后或者在孙子年满18岁时（也是一个带锁定时间交易），无论哪个条件先满足，他的孙子都可以得到遗产。</p>\n<p>因为比特币节点可依靠预言对死亡条件进行判断，预言是指具有密钥对的服务器，当用户自定义的表达式被证明是真的，它能按照要求对交易签名。</p>\n</li>\n</ul>\n<p>相信随着区块链的普及，会对未来的交易模式和商业结构带来巨大的影响。不过由于比特币的脚本语言不是图灵完备的，交易模式依旧有限，以太坊就是为解决这一问题而出现，后面会有大量介绍以太坊的文章。</p>\n<h2 id=\"参考文献-amp-补充阅读\"><a href=\"#参考文献-amp-补充阅读\" class=\"headerlink\" title=\"参考文献 &amp; 补充阅读\"></a>参考文献 &amp; 补充阅读</h2><ol>\n<li><a href=\"http://book.8btc.com/master_bitcoin\">精通比特币</a></li>\n<li>廖雪峰的<a href=\"http://www.infoq.com/cn/articles/deep-understanding-of-bitcoin-transaction-script\">深入理解比特币交易的脚本</a></li>\n<li><a href=\"http://www.8btc.com/bitcoin_contracts\">比特币合同</a></li>\n</ol>\n","more":"<p>大家都有转过账，每笔交易是这样的：张三账上减￥200，李四账上加￥200。<br>在比特币区块链中，交易不是这么简单，\b\b交易实际是通过脚本来完成，以承载更多的功能个，这也是为什么比特币被称为是一种“可编程的货币”。<br>本文就来分析一下交易是如何实现可编程的。</p>\n<h2 id=\"未花费的交易输出-UTXO\"><a href=\"#未花费的交易输出-UTXO\" class=\"headerlink\" title=\"未花费的交易输出(UTXO)\"></a>未花费的交易输出(UTXO)</h2><p>先引入一个概念：未花费的交易输出——UTXO（Unspent Transaction Output）</p>\n<p>其实比特币的交易都是基于UTXO上的，即交易的输入是之前交易未花费的输出，这笔交易的输出可以被当做下一笔新交易的输入。</p>\n<blockquote>\n<p>挖矿奖励属于一个特殊的交易（称为coinbase交易），可以没有输入。<br>UTXO是交易的基本单元，不能再分割。<br>在比特币没有余额概念，只有分散到区块链里的UTXO</p>\n</blockquote>\n<p>随着钱从一个地址被移动到另一个地址的同时形成了一条所有权链，像这样：</p>\n<p><img src=\"/img/own_chain.jpeg\"></p>\n<h2 id=\"比特币脚本\"><a href=\"#比特币脚本\" class=\"headerlink\" title=\"比特币脚本\"></a>比特币脚本</h2><p>比特币交易是首先要提供一个用于解锁UTXO（用私钥去匹配锁定脚本）的脚本（常称为解锁脚本：Signature script)，这也叫交易输入，<br>交易的输出则是指向一个脚本（称为锁定脚本：PubKey script），这个脚本表达了：谁的签名（签名是常见形式，\b并不一定必须是签名）能匹配这个输出地址，钱就支付给谁。</p>\n<p>每一个比特币节点会通过同时执行这解锁和锁定脚本（不是当前的锁定脚本，是指上一个交易的锁定脚本）来验证一笔交易，脚本组合结果为真，则为有效交易。</p>\n<blockquote>\n<p>当解锁版脚本与锁定版脚本的设定条件相匹配时，执行组合有效脚本时才会显示结果为真</p>\n</blockquote>\n<p>如最为常见类型的比特币交易脚本（支付到公钥哈希：P2PKH（Pay-to-Public-Key-Hash））组合是这样：<br><img src=\"/img/script.jpeg\"></p>\n<h3 id=\"常见交易脚本验证过程\"><a href=\"#常见交易脚本验证过程\" class=\"headerlink\" title=\"常见交易脚本验证过程\"></a>常见交易脚本验证过程</h3><p>比特币交易脚本语言是一种基于逆波兰表示法的基于栈的执行语言（不知道逆波兰和栈的同学去翻大学数据结构课本，你也可跳过这个部分）。</p>\n<blockquote>\n<p>比特币脚本语言包含基本算数计算、基本逻辑(比如if…then)、报错以及返回结果和一些加密指令，不支持循环。想了解更多语言细节可参考:<a href=\"http://www.8btc.com/bitcoin_scripts\">比特币脚本</a></p>\n</blockquote>\n<p>脚本语言通过从左至右地处理每个项目的方式执行脚本。</p>\n<p>下面用两个图说明下常见类型的比特币交易脚本验证执行过程：</p>\n<p><img src=\"/img/script_run1.jpeg\"></p>\n<p>上图为解锁脚本运行过程（主要是入栈）</p>\n<p><img src=\"/img/script_run2.jpeg\"></p>\n<p>上图为锁定脚本运行过程（主要是出栈），最后的结果为真，说明交易有效。</p>\n<h2 id=\"交易分析\"><a href=\"#交易分析\" class=\"headerlink\" title=\"交易分析\"></a>交易分析</h2><p>实际上比特币的交易被设计为可以纳入多个输入和输出。</p>\n<h3 id=\"交易结构\"><a href=\"#交易结构\" class=\"headerlink\" title=\"交易结构\"></a>交易结构</h3><p>我们来看看完整的交易结构<br><img src=\"/img/tx_struce.jpeg\"></p>\n<blockquote>\n<p>交易的锁定时间定义了能被加到区块链里的最早的交易时间。在大多数交易里，它被设置成0，用来表示立即执行。<br>如果锁定时间不是0并且小于5亿，就被视为区块高度，意指在这个指定的区块高度之前，该交易不会被包含在区块链里。<br>如果锁定时间大于5亿，则它被当作是一个Unix纪元时间戳（从1970年1月1日以来的秒数），并且在这个指定时间之前，该交易不会被包含在区块链里。</p>\n</blockquote>\n<p>交易的数据结构没有交易费的字段，交易费通过所有输入的总和，以及所有输出的总和之间的差来表示，即：</p>\n<blockquote>\n<p>交易费 &#x3D; 求和（所有输入） - 求和（所有输出）</p>\n</blockquote>\n<h3 id=\"交易输入结构\"><a href=\"#交易输入结构\" class=\"headerlink\" title=\"交易输入结构\"></a>交易输入结构</h3><p>刚刚我们提过输入需要提供一个解锁脚本，现在来看看一个交易的输入结构：</p>\n<p><img src=\"/img/tx_input_struce.jpeg\"></p>\n<p>我们结合整个交易的结构里看输入结构就是这样子：</p>\n<p><img src=\"/img/tx_input_overview.jpeg\"></p>\n<h3 id=\"交易输出结构\"><a href=\"#交易输出结构\" class=\"headerlink\" title=\"交易输出结构\"></a>交易输出结构</h3><p>刚刚我们提过输出是指向一个解锁脚本，具体交易的输出结构为：<br><img src=\"/img/tx_output_struce.jpeg\"></p>\n<p>我们结合整个交易的结构里看输出结构就是这样子：</p>\n<p><img src=\"/img/tx_output_overview.jpeg\"></p>\n<h3 id=\"交易哈希计算\"><a href=\"#交易哈希计算\" class=\"headerlink\" title=\"交易哈希计算\"></a>交易哈希计算</h3><p>在<a href=\"/posts/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E5%8C%BA%E5%9D%97%E9%93%BE/2018-02-14-merkle.html\">比特币区块结构Merkle 树及简单支付验证分析</a>讲到区块结构，区块结构包含多个交易的哈希。<br>那么交易哈希是怎么计算的呢？</p>\n<ol>\n<li>交易结构各字段序列化为字节数组</li>\n<li>把字节数组拼接为支付串</li>\n<li>对支付串计算两次SHA256 得到交易hash<br>了解详情可进一步参考<a href=\"https://bitcoin.stackexchange.com/questions/2859/how-are-transaction-hashes-calculated\">如何计算交易Hash?</a>及<a href=\"https://bitcointalk.org/index.php?topic=54451.msg649253#msg649253\">如何创建Hash?</a></li>\n</ol>\n<p>现在是不是对完整的交易到区块有了更清晰的认识。</p>\n<h2 id=\"智能合约雏形-应用场景说明\"><a href=\"#智能合约雏形-应用场景说明\" class=\"headerlink\" title=\"智能合约雏形 - 应用场景说明\"></a>智能合约雏形 - 应用场景说明</h2><p>由于交易是通过脚本来实现，脚本语言可以表达出无数的条件变种。</p>\n<p>比特币的脚本目前常用的主要分为两种，一种是常见的P2PKH（支付给公钥哈希），另一种是P2SH（Pay-to-Script-Hash支付脚本哈希）。<br>P2SH支付中，锁定脚本被密码学哈希所取代，当一笔交易试图支付UTXO时，要解锁支付脚本，它必须含有与哈希相匹配的脚本。</p>\n<p>这里不展开技术细节，下面说明一些应用场景，以便大家有更直观的认识。</p>\n<ul>\n<li><p>多重签名应用<br>合伙经营中，如只有一半以上的的股东同意签名就可以进行支付，可为公司治理提供管控便利，同时也能有效防范盗窃、挪用和遗失。</p>\n<p>用于担保和争端调解，一个买家想和他不认识或不信任的某人交易，在一般情况交易正常进行时，买家不想任何第三方参与。那交易双方可以发起支付，但如果交易出现问题时，那第三方就可以根据裁定，使用自己的签名和裁定认可的一方共同签名来兑现这笔交易。</p>\n</li>\n<li><p>保证合同<br>保证合同是建造公众商品时的集资办法，公众商品是指一旦建成，任何人都可以免费享受到好处。标准的例子是灯塔，所有人都认同应该建造一个，但是对于个人航海者来说灯塔太贵了，灯塔同时也会方便其他航海者。</p>\n<p>一个解决方案是向所有人集资，只有当筹集的资金超过所需的建造成本时，每个人才真正付钱，如果集资款不足，则谁都不用付钱。</p>\n</li>\n<li><p>依靠预言<br>假如老人想让他孙子继承遗产，继承时间是在他死后或者在孙子年满18岁时（也是一个带锁定时间交易），无论哪个条件先满足，他的孙子都可以得到遗产。</p>\n<p>因为比特币节点可依靠预言对死亡条件进行判断，预言是指具有密钥对的服务器，当用户自定义的表达式被证明是真的，它能按照要求对交易签名。</p>\n</li>\n</ul>\n<p>相信随着区块链的普及，会对未来的交易模式和商业结构带来巨大的影响。不过由于比特币的脚本语言不是图灵完备的，交易模式依旧有限，以太坊就是为解决这一问题而出现，后面会有大量介绍以太坊的文章。</p>\n<h2 id=\"参考文献-amp-补充阅读\"><a href=\"#参考文献-amp-补充阅读\" class=\"headerlink\" title=\"参考文献 &amp; 补充阅读\"></a>参考文献 &amp; 补充阅读</h2><ol>\n<li><a href=\"http://book.8btc.com/master_bitcoin\">精通比特币</a></li>\n<li>廖雪峰的<a href=\"http://www.infoq.com/cn/articles/deep-understanding-of-bitcoin-transaction-script\">深入理解比特币交易的脚本</a></li>\n<li><a href=\"http://www.8btc.com/bitcoin_contracts\">比特币合同</a></li>\n</ol>\n","categories":[{"name":"学习记录","path":"api/categories/学习记录.json"},{"name":"区块链","path":"api/categories/区块链.json"}],"tags":[{"name":"学习记录","path":"api/tags/学习记录.json"},{"name":"区块链","path":"api/tags/区块链.json"}]}