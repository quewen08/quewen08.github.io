{"title":"Git 操作 (一)","slug":"git_step_1","date":"2018-12-10T03:21:00.000Z","updated":"2022-10-19T14:40:00.252Z","comments":true,"path":"api/articles/git_step_1.json","realPath":"/2018/git_step_1/index/","excerpt":null,"covers":null,"cover":null,"content":"<h1 id=\"Git的奇技淫巧-see-no-evil\"><a href=\"#Git的奇技淫巧-see-no-evil\" class=\"headerlink\" title=\"Git的奇技淫巧:see_no_evil:\"></a>Git的奇技淫巧:see_no_evil:</h1><blockquote>\n<p>Git常用命令集合，Fork于<a href=\"https://github.com/git-tips/tips\">tips</a>项目</p>\n</blockquote>\n<p>Git是一个“分布式版本管理工具”，简单的理解版本管理工具：大家在写东西的时候都用过“回撤”这个功能，但是回撤只能回撤几步，假如想要找回我三天之前的修改，光用“回撤”是找不回来的。而“版本管理工具”能记录每次的修改，只要提交到版本仓库，你就可以找到之前任何时刻的状态（文本状态）。</p>\n<p>下面的内容就是列举了常用的Git命令和一些小技巧，可以通过”页面内查找”的方式进行快速查询：<code>Ctrl/Command+f</code>。</p>\n<h2 id=\"开卷必读\"><a href=\"#开卷必读\" class=\"headerlink\" title=\"开卷必读\"></a>开卷必读</h2><p><em>如果之前未使用过Git，可以学习<a href=\"/posts/Tips/Git/2018-12-08-git_step.html\">Git小白教程</a>入门</em></p>\n<ol>\n<li><strong>一定要先测试命令的效果后</strong>，再用于工作环境中，以防造成不能弥补的后果！<strong>到时候别拿着砍刀来找我</strong></li>\n<li>所有的命令都在<code>git version 2.7.4 (Apple Git-66)</code>下测试通过</li>\n<li>统一概念：<ul>\n<li>工作区：改动（增删文件和内容）</li>\n<li>暂存区：输入命令：<code>git add 改动的文件名</code>，此次改动就放到了‘暂存区’</li>\n<li>本地仓库(简称：本地)：输入命令：<code>git commit 此次修改的描述</code>，此次改动就放到了’本地仓库’，每个commit，我叫它为一个‘版本’。</li>\n<li>远程仓库(简称：远程)：输入命令：<code>git push 远程仓库</code>，此次改动就放到了‘远程仓库’（GitHub等)</li>\n<li>commit-id：输出命令：<code>git log</code>，最上面那行<code>commit xxxxxx</code>，后面的字符串就是commit-id</li>\n</ul>\n</li>\n<li>如果喜欢这个项目，欢迎Star、提交Pr、<a href=\"https://github.com/521xueweihan/git-tips/issues\">反馈问题</a>😊</li>\n</ol>\n<h2 id=\"展示帮助信息\"><a href=\"#展示帮助信息\" class=\"headerlink\" title=\"展示帮助信息\"></a>展示帮助信息</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">help</span> -g</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"回到远程仓库的状态\"><a href=\"#回到远程仓库的状态\" class=\"headerlink\" title=\"回到远程仓库的状态\"></a>回到远程仓库的状态</h2><p>抛弃本地所有的修改，回到远程仓库的状态。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch --all &amp;&amp; git reset --hard origin/master</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"重设第一个commit\"><a href=\"#重设第一个commit\" class=\"headerlink\" title=\"重设第一个commit\"></a>重设第一个commit</h2><p>也就是把所有的改动都重新放回工作区，并<strong>清空所有的commit</strong>，这样就可以重新提交第一个commit了</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git update-ref -d HEAD</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"展示工作区和暂存区的不同\"><a href=\"#展示工作区和暂存区的不同\" class=\"headerlink\" title=\"展示工作区和暂存区的不同\"></a>展示工作区和暂存区的不同</h2><p>输出<strong>工作区</strong>和<strong>暂存区</strong>的different(不同)。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff</span><br></pre></td></tr></table></figure>\n\n<p>还可以展示本地仓库中任意两个commit之间的文件变动：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff &lt;commit-id&gt; &lt;commit-id&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"展示暂存区和最近版本的不同\"><a href=\"#展示暂存区和最近版本的不同\" class=\"headerlink\" title=\"展示暂存区和最近版本的不同\"></a>展示暂存区和最近版本的不同</h2><p>输出<strong>暂存区</strong>和本地最近的版本(commit)的different(不同)。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff --cached</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"展示暂存区、工作区和最近版本的不同\"><a href=\"#展示暂存区、工作区和最近版本的不同\" class=\"headerlink\" title=\"展示暂存区、工作区和最近版本的不同\"></a>展示暂存区、工作区和最近版本的不同</h2><p>输出<strong>工作区</strong>、<strong>暂存区</strong> 和本地最近的版本(commit)的different(不同)。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff HEAD</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"快速切换分支\"><a href=\"#快速切换分支\" class=\"headerlink\" title=\"快速切换分支\"></a>快速切换分支</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除已经合并到master的分支\"><a href=\"#删除已经合并到master的分支\" class=\"headerlink\" title=\"删除已经合并到master的分支\"></a>删除已经合并到master的分支</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch --merged master | grep -v <span class=\"string\">&#x27;^\\*\\|  master&#x27;</span> | xargs -n 1 git branch -d</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"展示本地分支关联远程仓库的情况\"><a href=\"#展示本地分支关联远程仓库的情况\" class=\"headerlink\" title=\"展示本地分支关联远程仓库的情况\"></a>展示本地分支关联远程仓库的情况</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -vv</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"关联远程分支\"><a href=\"#关联远程分支\" class=\"headerlink\" title=\"关联远程分支\"></a>关联远程分支</h2><p>关联之后，<code>git branch -vv</code>就可以展示关联的远程分支名了，同时推送到远程仓库直接：<code>git push</code>，不需要指定远程仓库了。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -u origin/mybranch</span><br></pre></td></tr></table></figure>\n\n<p>或者在push时加上<code>-u</code>参数</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin/mybranch -u</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"列出所有远程分支\"><a href=\"#列出所有远程分支\" class=\"headerlink\" title=\"列出所有远程分支\"></a>列出所有远程分支</h2><p>-r参数相当于：remote</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -r</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"列出本地和远程分支\"><a href=\"#列出本地和远程分支\" class=\"headerlink\" title=\"列出本地和远程分支\"></a>列出本地和远程分支</h2><p>-a参数相当于：all</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -a</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建并切换到本地分支\"><a href=\"#创建并切换到本地分支\" class=\"headerlink\" title=\"创建并切换到本地分支\"></a>创建并切换到本地分支</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建并切换到远程分支\"><a href=\"#创建并切换到远程分支\" class=\"headerlink\" title=\"创建并切换到远程分支\"></a>创建并切换到远程分支</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b &lt;branch-name&gt; origin/&lt;branch-name&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除本地分支\"><a href=\"#删除本地分支\" class=\"headerlink\" title=\"删除本地分支\"></a>删除本地分支</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d &lt;local-branchname&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除远程分支\"><a href=\"#删除远程分支\" class=\"headerlink\" title=\"删除远程分支\"></a>删除远程分支</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin --delete &lt;remote-branchname&gt;</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin :&lt;remote-branchname&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"重命名本地分支\"><a href=\"#重命名本地分支\" class=\"headerlink\" title=\"重命名本地分支\"></a>重命名本地分支</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -m &lt;new-branch-name&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看标签\"><a href=\"#查看标签\" class=\"headerlink\" title=\"查看标签\"></a>查看标签</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag</span><br></pre></td></tr></table></figure>\n<p>展示当前分支的最近的tag</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git describe --tags --abbrev=0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看标签详细信息\"><a href=\"#查看标签详细信息\" class=\"headerlink\" title=\"查看标签详细信息\"></a>查看标签详细信息</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -ln</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"本地创建标签\"><a href=\"#本地创建标签\" class=\"headerlink\" title=\"本地创建标签\"></a>本地创建标签</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag &lt;version-number&gt;</span><br></pre></td></tr></table></figure>\n\n<p>默认tag是打在最近的一次commit上，如果需要指定commit打tag：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag -a &lt;version-number&gt; -m <span class=\"string\">&quot;v1.0 发布(描述)&quot;</span> &lt;commit-id&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"推送标签到远程仓库\"><a href=\"#推送标签到远程仓库\" class=\"headerlink\" title=\"推送标签到远程仓库\"></a>推送标签到远程仓库</h2><p>首先要保证本地创建好了标签才可以推送标签到远程仓库：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin &lt;local-version-number&gt;</span><br></pre></td></tr></table></figure>\n\n<p>一次性推送所有标签，同步到远程仓库：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin --tags</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除本地标签\"><a href=\"#删除本地标签\" class=\"headerlink\" title=\"删除本地标签\"></a>删除本地标签</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -d &lt;tag-name&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除远程标签\"><a href=\"#删除远程标签\" class=\"headerlink\" title=\"删除远程标签\"></a>删除远程标签</h2><p>删除远程标签需要<strong>先删除本地标签</strong>，再执行下面的命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin :refs/tags/&lt;tag-name&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"切回到某个标签\"><a href=\"#切回到某个标签\" class=\"headerlink\" title=\"切回到某个标签\"></a>切回到某个标签</h2><p>一般上线之前都会打tag，就是为了防止上线后出现问题，方便快速回退到上一版本。下面的命令是回到某一标签下的状态：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b branch_name tag_name</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"放弃工作区的修改\"><a href=\"#放弃工作区的修改\" class=\"headerlink\" title=\"放弃工作区的修改\"></a>放弃工作区的修改</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout &lt;file-name&gt;</span><br></pre></td></tr></table></figure>\n\n<p>放弃所有修改：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout .</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"恢复删除的文件\"><a href=\"#恢复删除的文件\" class=\"headerlink\" title=\"恢复删除的文件\"></a>恢复删除的文件</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rev-list -n 1 HEAD -- &lt;file_path&gt; <span class=\"comment\">#得到 deleting_commit</span></span><br><span class=\"line\"></span><br><span class=\"line\">git checkout &lt;deleting_commit&gt;^ -- &lt;file_path&gt; <span class=\"comment\">#回到删除文件 deleting_commit 之前的状态</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"以新增一个commit的方式还原某一个commit的修改\"><a href=\"#以新增一个commit的方式还原某一个commit的修改\" class=\"headerlink\" title=\"以新增一个commit的方式还原某一个commit的修改\"></a>以新增一个commit的方式还原某一个commit的修改</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git revert &lt;commit-id&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"回到某个commit的状态，并删除后面的commit\"><a href=\"#回到某个commit的状态，并删除后面的commit\" class=\"headerlink\" title=\"回到某个commit的状态，并删除后面的commit\"></a>回到某个commit的状态，并删除后面的commit</h2><p>和revert的区别：reset命令会抹去某个commit id之后的所有commit</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset &lt;commit-id&gt;  <span class=\"comment\">#默认就是-mixed参数。</span></span><br><span class=\"line\"></span><br><span class=\"line\">git reset –mixed HEAD^  <span class=\"comment\">#回退至上个版本，它将重置HEAD到另外一个commit,并且重置暂存区以便和HEAD相匹配，但是也到此为止。工作区不会被更改。</span></span><br><span class=\"line\"></span><br><span class=\"line\">git reset –soft HEAD~3  <span class=\"comment\">#回退至三个版本之前，只回退了commit的信息，暂存区和工作区与回退之前保持一致。如果还要提交，直接commit即可  </span></span><br><span class=\"line\"></span><br><span class=\"line\">git reset –hard &lt;commit-id&gt;  <span class=\"comment\">#彻底回退到指定commit-id的状态，暂存区和工作区也会变为指定commit-id版本的内容</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"修改上一个commit的描述\"><a href=\"#修改上一个commit的描述\" class=\"headerlink\" title=\"修改上一个commit的描述\"></a>修改上一个commit的描述</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit --amend</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看commit历史\"><a href=\"#查看commit历史\" class=\"headerlink\" title=\"查看commit历史\"></a>查看commit历史</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看某段代码是谁写的\"><a href=\"#查看某段代码是谁写的\" class=\"headerlink\" title=\"查看某段代码是谁写的\"></a>查看某段代码是谁写的</h2><p>blame的意思为‘责怪’，你懂的。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git blame &lt;file-name&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"显示本地更新过HEAD的git命令记录\"><a href=\"#显示本地更新过HEAD的git命令记录\" class=\"headerlink\" title=\"显示本地更新过HEAD的git命令记录\"></a>显示本地更新过HEAD的git命令记录</h2><p>每次更新了HEAD 的git 命令比如 commint、amend、cherry-pick、reset、revert等都会被记录下来（不限分支），就像shell的history一样。<br>这样你可以reset 到任何一次更新了HEAD 的操作之后，而不仅仅是回到当前分支下的某个commit 之后的状态。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reflog</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"修改作者名\"><a href=\"#修改作者名\" class=\"headerlink\" title=\"修改作者名\"></a>修改作者名</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit --amend --author=<span class=\"string\">&#x27;Author Name &lt;email@address.com&gt;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"修改远程仓库的url\"><a href=\"#修改远程仓库的url\" class=\"headerlink\" title=\"修改远程仓库的url\"></a>修改远程仓库的url</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote set-url origin &lt;URL&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"增加远程仓库\"><a href=\"#增加远程仓库\" class=\"headerlink\" title=\"增加远程仓库\"></a>增加远程仓库</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin &lt;remote-url&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"列出所有远程仓库\"><a href=\"#列出所有远程仓库\" class=\"headerlink\" title=\"列出所有远程仓库\"></a>列出所有远程仓库</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看两个星期内的改动\"><a href=\"#查看两个星期内的改动\" class=\"headerlink\" title=\"查看两个星期内的改动\"></a>查看两个星期内的改动</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git whatchanged --since=<span class=\"string\">&#x27;2 weeks ago&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"把A分支的某一个commit，放到B分支上\"><a href=\"#把A分支的某一个commit，放到B分支上\" class=\"headerlink\" title=\"把A分支的某一个commit，放到B分支上\"></a>把A分支的某一个commit，放到B分支上</h2><p>这个过程需要<code>cherry-pick</code>命令，<a href=\"http://sg552.iteye.com/blog/1300713#bc2367928\">参考</a></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout &lt;branch-name&gt; &amp;&amp; git cherry-pick &lt;commit-id&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"给git命令起别名\"><a href=\"#给git命令起别名\" class=\"headerlink\" title=\"给git命令起别名\"></a>给git命令起别名</h2><p>简化命令</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global <span class=\"built_in\">alias</span>.&lt;handle&gt; &lt;<span class=\"built_in\">command</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">比如：git status 改成 git st，这样可以简化命令</span><br><span class=\"line\"></span><br><span class=\"line\">git config --global alias.st status</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"存储当前的修改，但不用提交commit\"><a href=\"#存储当前的修改，但不用提交commit\" class=\"headerlink\" title=\"存储当前的修改，但不用提交commit\"></a>存储当前的修改，但不用提交commit</h2><p>详解可以参考<a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137602359178794d966923e5c4134bc8bf98dfb03aea3000\">廖雪峰老师的git教程</a></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"保存当前状态，包括untracked的文件\"><a href=\"#保存当前状态，包括untracked的文件\" class=\"headerlink\" title=\"保存当前状态，包括untracked的文件\"></a>保存当前状态，包括untracked的文件</h2><p>untracked文件：新建的文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash -u</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"展示所有stashes\"><a href=\"#展示所有stashes\" class=\"headerlink\" title=\"展示所有stashes\"></a>展示所有stashes</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash list</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"回到某个stash的状态\"><a href=\"#回到某个stash的状态\" class=\"headerlink\" title=\"回到某个stash的状态\"></a>回到某个stash的状态</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash apply &lt;stash@&#123;n&#125;&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"回到最后一个stash的状态，并删除这个stash\"><a href=\"#回到最后一个stash的状态，并删除这个stash\" class=\"headerlink\" title=\"回到最后一个stash的状态，并删除这个stash\"></a>回到最后一个stash的状态，并删除这个stash</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash pop</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除所有的stash\"><a href=\"#删除所有的stash\" class=\"headerlink\" title=\"删除所有的stash\"></a>删除所有的stash</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash clear</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"从stash中拿出某个文件的修改\"><a href=\"#从stash中拿出某个文件的修改\" class=\"headerlink\" title=\"从stash中拿出某个文件的修改\"></a>从stash中拿出某个文件的修改</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout &lt;stash@&#123;n&#125;&gt; -- &lt;file-path&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"展示所有tracked的文件\"><a href=\"#展示所有tracked的文件\" class=\"headerlink\" title=\"展示所有tracked的文件\"></a>展示所有tracked的文件</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git ls-files -t</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"展示所有untracked的文件\"><a href=\"#展示所有untracked的文件\" class=\"headerlink\" title=\"展示所有untracked的文件\"></a>展示所有untracked的文件</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git ls-files --others</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"展示所有忽略的文件\"><a href=\"#展示所有忽略的文件\" class=\"headerlink\" title=\"展示所有忽略的文件\"></a>展示所有忽略的文件</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git ls-files --others -i --exclude-standard</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"强制删除untracked的文件\"><a href=\"#强制删除untracked的文件\" class=\"headerlink\" title=\"强制删除untracked的文件\"></a>强制删除untracked的文件</h2><p>可以用来删除新建的文件。如果不指定文件文件名，则清空所有工作的untracked文件。<code>clean</code>命令，<strong>注意两点</strong>：</p>\n<ol>\n<li>clean后，删除的文件无法找回</li>\n<li>不会影响tracked的文件的改动，只会删除untracked的文件</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clean &lt;file-name&gt; -f</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"强制删除untracked的目录\"><a href=\"#强制删除untracked的目录\" class=\"headerlink\" title=\"强制删除untracked的目录\"></a>强制删除untracked的目录</h2><p>可以用来删除新建的目录，<strong>注意</strong>:这个命令也可以用来删除untracked的文件。详情见上一条</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clean &lt;directory-name&gt; -<span class=\"built_in\">df</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"展示简化的commit历史\"><a href=\"#展示简化的commit历史\" class=\"headerlink\" title=\"展示简化的commit历史\"></a>展示简化的commit历史</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> --pretty=oneline --graph --decorate --all</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"把某一个分支到导出成一个文件\"><a href=\"#把某一个分支到导出成一个文件\" class=\"headerlink\" title=\"把某一个分支到导出成一个文件\"></a>把某一个分支到导出成一个文件</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git bundle create &lt;file&gt; &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"从包中导入分支\"><a href=\"#从包中导入分支\" class=\"headerlink\" title=\"从包中导入分支\"></a>从包中导入分支</h2><p>新建一个分支，分支内容就是上面<code>git bundle create</code>命令导出的内容</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> repo.bundle &lt;repo-dir&gt; -b &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"执行rebase之前自动stash\"><a href=\"#执行rebase之前自动stash\" class=\"headerlink\" title=\"执行rebase之前自动stash\"></a>执行rebase之前自动stash</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rebase --autostash</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"从远程仓库根据ID，拉下某一状态，到本地分支\"><a href=\"#从远程仓库根据ID，拉下某一状态，到本地分支\" class=\"headerlink\" title=\"从远程仓库根据ID，拉下某一状态，到本地分支\"></a>从远程仓库根据ID，拉下某一状态，到本地分支</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch origin pull/&lt;<span class=\"built_in\">id</span>&gt;/head:&lt;branch-name&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"详细展示一行中的修改\"><a href=\"#详细展示一行中的修改\" class=\"headerlink\" title=\"详细展示一行中的修改\"></a>详细展示一行中的修改</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff --word-diff</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"清除gitignore文件中记录的文件\"><a href=\"#清除gitignore文件中记录的文件\" class=\"headerlink\" title=\"清除gitignore文件中记录的文件\"></a>清除gitignore文件中记录的文件</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clean -X -f</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"展示所有alias和configs\"><a href=\"#展示所有alias和configs\" class=\"headerlink\" title=\"展示所有alias和configs\"></a>展示所有alias和configs</h2><p><strong>注意：</strong> config分为：当前目录（local）和全局（golbal）的config，默认为当前目录的config</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --<span class=\"built_in\">local</span> --list (当前目录)</span><br><span class=\"line\">git config --global --list (全局)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"展示忽略的文件\"><a href=\"#展示忽略的文件\" class=\"headerlink\" title=\"展示忽略的文件\"></a>展示忽略的文件</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status --ignored</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"commit历史中显示Branch1有的，但是Branch2没有commit\"><a href=\"#commit历史中显示Branch1有的，但是Branch2没有commit\" class=\"headerlink\" title=\"commit历史中显示Branch1有的，但是Branch2没有commit\"></a>commit历史中显示Branch1有的，但是Branch2没有commit</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> Branch1 ^Branch2</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"在commit-log中显示GPG签名\"><a href=\"#在commit-log中显示GPG签名\" class=\"headerlink\" title=\"在commit log中显示GPG签名\"></a>在commit log中显示GPG签名</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> --show-signature</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除全局设置\"><a href=\"#删除全局设置\" class=\"headerlink\" title=\"删除全局设置\"></a>删除全局设置</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> &lt;entry-name&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"新建并切换到新分支上，同时这个分支没有任何commit\"><a href=\"#新建并切换到新分支上，同时这个分支没有任何commit\" class=\"headerlink\" title=\"新建并切换到新分支上，同时这个分支没有任何commit\"></a>新建并切换到新分支上，同时这个分支没有任何commit</h2><p>相当于保存修改，但是重写commit历史</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout --orphan &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"展示任意分支某一文件的内容\"><a href=\"#展示任意分支某一文件的内容\" class=\"headerlink\" title=\"展示任意分支某一文件的内容\"></a>展示任意分支某一文件的内容</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git show &lt;branch-name&gt;:&lt;file-name&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"clone下来指定的单一分支\"><a href=\"#clone下来指定的单一分支\" class=\"headerlink\" title=\"clone下来指定的单一分支\"></a>clone下来指定的单一分支</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> -b &lt;branch-name&gt; --single-branch https://github.com/user/repo.git</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"忽略某个文件的改动\"><a href=\"#忽略某个文件的改动\" class=\"headerlink\" title=\"忽略某个文件的改动\"></a>忽略某个文件的改动</h2><p>关闭 track 指定文件的改动，也就是 Git 将不会在记录这个文件的改动</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git update-index --assume-unchanged path/to/file</span><br></pre></td></tr></table></figure>\n\n<p>恢复 track 指定文件的改动</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git update-index --no-assume-unchanged path/to/file</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"忽略文件的权限变化\"><a href=\"#忽略文件的权限变化\" class=\"headerlink\" title=\"忽略文件的权限变化\"></a>忽略文件的权限变化</h2><p>不再将文件的权限变化视作改动</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config core.fileMode <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"以最后提交的顺序列出所有Git分支\"><a href=\"#以最后提交的顺序列出所有Git分支\" class=\"headerlink\" title=\"以最后提交的顺序列出所有Git分支\"></a>以最后提交的顺序列出所有Git分支</h2><p>最新的放在最上面</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git for-each-ref --<span class=\"built_in\">sort</span>=-committerdate --format=<span class=\"string\">&#x27;%(refname:short)&#x27;</span> refs/heads/</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"在commit-log中查找相关内容\"><a href=\"#在commit-log中查找相关内容\" class=\"headerlink\" title=\"在commit log中查找相关内容\"></a>在commit log中查找相关内容</h2><p>通过grep查找，given-text：所需要查找的字段</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> --all --grep=<span class=\"string\">&#x27;&lt;given-text&gt;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"把暂存区的指定file放到工作区中\"><a href=\"#把暂存区的指定file放到工作区中\" class=\"headerlink\" title=\"把暂存区的指定file放到工作区中\"></a>把暂存区的指定file放到工作区中</h2><p>不添加参数，默认是-mixed</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset &lt;file-name&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"强制推送\"><a href=\"#强制推送\" class=\"headerlink\" title=\"强制推送\"></a>强制推送</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -f &lt;remote-name&gt; &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>","more":"<h1 id=\"Git的奇技淫巧-see-no-evil\"><a href=\"#Git的奇技淫巧-see-no-evil\" class=\"headerlink\" title=\"Git的奇技淫巧:see_no_evil:\"></a>Git的奇技淫巧:see_no_evil:</h1><blockquote>\n<p>Git常用命令集合，Fork于<a href=\"https://github.com/git-tips/tips\">tips</a>项目</p>\n</blockquote>\n<p>Git是一个“分布式版本管理工具”，简单的理解版本管理工具：大家在写东西的时候都用过“回撤”这个功能，但是回撤只能回撤几步，假如想要找回我三天之前的修改，光用“回撤”是找不回来的。而“版本管理工具”能记录每次的修改，只要提交到版本仓库，你就可以找到之前任何时刻的状态（文本状态）。</p>\n<p>下面的内容就是列举了常用的Git命令和一些小技巧，可以通过”页面内查找”的方式进行快速查询：<code>Ctrl/Command+f</code>。</p>\n<h2 id=\"开卷必读\"><a href=\"#开卷必读\" class=\"headerlink\" title=\"开卷必读\"></a>开卷必读</h2><p><em>如果之前未使用过Git，可以学习<a href=\"/posts/Tips/Git/2018-12-08-git_step.html\">Git小白教程</a>入门</em></p>\n<ol>\n<li><strong>一定要先测试命令的效果后</strong>，再用于工作环境中，以防造成不能弥补的后果！<strong>到时候别拿着砍刀来找我</strong></li>\n<li>所有的命令都在<code>git version 2.7.4 (Apple Git-66)</code>下测试通过</li>\n<li>统一概念：<ul>\n<li>工作区：改动（增删文件和内容）</li>\n<li>暂存区：输入命令：<code>git add 改动的文件名</code>，此次改动就放到了‘暂存区’</li>\n<li>本地仓库(简称：本地)：输入命令：<code>git commit 此次修改的描述</code>，此次改动就放到了’本地仓库’，每个commit，我叫它为一个‘版本’。</li>\n<li>远程仓库(简称：远程)：输入命令：<code>git push 远程仓库</code>，此次改动就放到了‘远程仓库’（GitHub等)</li>\n<li>commit-id：输出命令：<code>git log</code>，最上面那行<code>commit xxxxxx</code>，后面的字符串就是commit-id</li>\n</ul>\n</li>\n<li>如果喜欢这个项目，欢迎Star、提交Pr、<a href=\"https://github.com/521xueweihan/git-tips/issues\">反馈问题</a>😊</li>\n</ol>\n<h2 id=\"展示帮助信息\"><a href=\"#展示帮助信息\" class=\"headerlink\" title=\"展示帮助信息\"></a>展示帮助信息</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">help</span> -g</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"回到远程仓库的状态\"><a href=\"#回到远程仓库的状态\" class=\"headerlink\" title=\"回到远程仓库的状态\"></a>回到远程仓库的状态</h2><p>抛弃本地所有的修改，回到远程仓库的状态。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch --all &amp;&amp; git reset --hard origin/master</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"重设第一个commit\"><a href=\"#重设第一个commit\" class=\"headerlink\" title=\"重设第一个commit\"></a>重设第一个commit</h2><p>也就是把所有的改动都重新放回工作区，并<strong>清空所有的commit</strong>，这样就可以重新提交第一个commit了</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git update-ref -d HEAD</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"展示工作区和暂存区的不同\"><a href=\"#展示工作区和暂存区的不同\" class=\"headerlink\" title=\"展示工作区和暂存区的不同\"></a>展示工作区和暂存区的不同</h2><p>输出<strong>工作区</strong>和<strong>暂存区</strong>的different(不同)。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff</span><br></pre></td></tr></table></figure>\n\n<p>还可以展示本地仓库中任意两个commit之间的文件变动：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff &lt;commit-id&gt; &lt;commit-id&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"展示暂存区和最近版本的不同\"><a href=\"#展示暂存区和最近版本的不同\" class=\"headerlink\" title=\"展示暂存区和最近版本的不同\"></a>展示暂存区和最近版本的不同</h2><p>输出<strong>暂存区</strong>和本地最近的版本(commit)的different(不同)。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff --cached</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"展示暂存区、工作区和最近版本的不同\"><a href=\"#展示暂存区、工作区和最近版本的不同\" class=\"headerlink\" title=\"展示暂存区、工作区和最近版本的不同\"></a>展示暂存区、工作区和最近版本的不同</h2><p>输出<strong>工作区</strong>、<strong>暂存区</strong> 和本地最近的版本(commit)的different(不同)。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff HEAD</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"快速切换分支\"><a href=\"#快速切换分支\" class=\"headerlink\" title=\"快速切换分支\"></a>快速切换分支</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除已经合并到master的分支\"><a href=\"#删除已经合并到master的分支\" class=\"headerlink\" title=\"删除已经合并到master的分支\"></a>删除已经合并到master的分支</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch --merged master | grep -v <span class=\"string\">&#x27;^\\*\\|  master&#x27;</span> | xargs -n 1 git branch -d</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"展示本地分支关联远程仓库的情况\"><a href=\"#展示本地分支关联远程仓库的情况\" class=\"headerlink\" title=\"展示本地分支关联远程仓库的情况\"></a>展示本地分支关联远程仓库的情况</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -vv</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"关联远程分支\"><a href=\"#关联远程分支\" class=\"headerlink\" title=\"关联远程分支\"></a>关联远程分支</h2><p>关联之后，<code>git branch -vv</code>就可以展示关联的远程分支名了，同时推送到远程仓库直接：<code>git push</code>，不需要指定远程仓库了。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -u origin/mybranch</span><br></pre></td></tr></table></figure>\n\n<p>或者在push时加上<code>-u</code>参数</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin/mybranch -u</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"列出所有远程分支\"><a href=\"#列出所有远程分支\" class=\"headerlink\" title=\"列出所有远程分支\"></a>列出所有远程分支</h2><p>-r参数相当于：remote</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -r</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"列出本地和远程分支\"><a href=\"#列出本地和远程分支\" class=\"headerlink\" title=\"列出本地和远程分支\"></a>列出本地和远程分支</h2><p>-a参数相当于：all</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -a</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建并切换到本地分支\"><a href=\"#创建并切换到本地分支\" class=\"headerlink\" title=\"创建并切换到本地分支\"></a>创建并切换到本地分支</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建并切换到远程分支\"><a href=\"#创建并切换到远程分支\" class=\"headerlink\" title=\"创建并切换到远程分支\"></a>创建并切换到远程分支</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b &lt;branch-name&gt; origin/&lt;branch-name&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除本地分支\"><a href=\"#删除本地分支\" class=\"headerlink\" title=\"删除本地分支\"></a>删除本地分支</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d &lt;local-branchname&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除远程分支\"><a href=\"#删除远程分支\" class=\"headerlink\" title=\"删除远程分支\"></a>删除远程分支</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin --delete &lt;remote-branchname&gt;</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin :&lt;remote-branchname&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"重命名本地分支\"><a href=\"#重命名本地分支\" class=\"headerlink\" title=\"重命名本地分支\"></a>重命名本地分支</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -m &lt;new-branch-name&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看标签\"><a href=\"#查看标签\" class=\"headerlink\" title=\"查看标签\"></a>查看标签</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag</span><br></pre></td></tr></table></figure>\n<p>展示当前分支的最近的tag</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git describe --tags --abbrev=0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看标签详细信息\"><a href=\"#查看标签详细信息\" class=\"headerlink\" title=\"查看标签详细信息\"></a>查看标签详细信息</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -ln</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"本地创建标签\"><a href=\"#本地创建标签\" class=\"headerlink\" title=\"本地创建标签\"></a>本地创建标签</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag &lt;version-number&gt;</span><br></pre></td></tr></table></figure>\n\n<p>默认tag是打在最近的一次commit上，如果需要指定commit打tag：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag -a &lt;version-number&gt; -m <span class=\"string\">&quot;v1.0 发布(描述)&quot;</span> &lt;commit-id&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"推送标签到远程仓库\"><a href=\"#推送标签到远程仓库\" class=\"headerlink\" title=\"推送标签到远程仓库\"></a>推送标签到远程仓库</h2><p>首先要保证本地创建好了标签才可以推送标签到远程仓库：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin &lt;local-version-number&gt;</span><br></pre></td></tr></table></figure>\n\n<p>一次性推送所有标签，同步到远程仓库：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin --tags</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除本地标签\"><a href=\"#删除本地标签\" class=\"headerlink\" title=\"删除本地标签\"></a>删除本地标签</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -d &lt;tag-name&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除远程标签\"><a href=\"#删除远程标签\" class=\"headerlink\" title=\"删除远程标签\"></a>删除远程标签</h2><p>删除远程标签需要<strong>先删除本地标签</strong>，再执行下面的命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin :refs/tags/&lt;tag-name&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"切回到某个标签\"><a href=\"#切回到某个标签\" class=\"headerlink\" title=\"切回到某个标签\"></a>切回到某个标签</h2><p>一般上线之前都会打tag，就是为了防止上线后出现问题，方便快速回退到上一版本。下面的命令是回到某一标签下的状态：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b branch_name tag_name</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"放弃工作区的修改\"><a href=\"#放弃工作区的修改\" class=\"headerlink\" title=\"放弃工作区的修改\"></a>放弃工作区的修改</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout &lt;file-name&gt;</span><br></pre></td></tr></table></figure>\n\n<p>放弃所有修改：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout .</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"恢复删除的文件\"><a href=\"#恢复删除的文件\" class=\"headerlink\" title=\"恢复删除的文件\"></a>恢复删除的文件</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rev-list -n 1 HEAD -- &lt;file_path&gt; <span class=\"comment\">#得到 deleting_commit</span></span><br><span class=\"line\"></span><br><span class=\"line\">git checkout &lt;deleting_commit&gt;^ -- &lt;file_path&gt; <span class=\"comment\">#回到删除文件 deleting_commit 之前的状态</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"以新增一个commit的方式还原某一个commit的修改\"><a href=\"#以新增一个commit的方式还原某一个commit的修改\" class=\"headerlink\" title=\"以新增一个commit的方式还原某一个commit的修改\"></a>以新增一个commit的方式还原某一个commit的修改</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git revert &lt;commit-id&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"回到某个commit的状态，并删除后面的commit\"><a href=\"#回到某个commit的状态，并删除后面的commit\" class=\"headerlink\" title=\"回到某个commit的状态，并删除后面的commit\"></a>回到某个commit的状态，并删除后面的commit</h2><p>和revert的区别：reset命令会抹去某个commit id之后的所有commit</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset &lt;commit-id&gt;  <span class=\"comment\">#默认就是-mixed参数。</span></span><br><span class=\"line\"></span><br><span class=\"line\">git reset –mixed HEAD^  <span class=\"comment\">#回退至上个版本，它将重置HEAD到另外一个commit,并且重置暂存区以便和HEAD相匹配，但是也到此为止。工作区不会被更改。</span></span><br><span class=\"line\"></span><br><span class=\"line\">git reset –soft HEAD~3  <span class=\"comment\">#回退至三个版本之前，只回退了commit的信息，暂存区和工作区与回退之前保持一致。如果还要提交，直接commit即可  </span></span><br><span class=\"line\"></span><br><span class=\"line\">git reset –hard &lt;commit-id&gt;  <span class=\"comment\">#彻底回退到指定commit-id的状态，暂存区和工作区也会变为指定commit-id版本的内容</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"修改上一个commit的描述\"><a href=\"#修改上一个commit的描述\" class=\"headerlink\" title=\"修改上一个commit的描述\"></a>修改上一个commit的描述</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit --amend</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看commit历史\"><a href=\"#查看commit历史\" class=\"headerlink\" title=\"查看commit历史\"></a>查看commit历史</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看某段代码是谁写的\"><a href=\"#查看某段代码是谁写的\" class=\"headerlink\" title=\"查看某段代码是谁写的\"></a>查看某段代码是谁写的</h2><p>blame的意思为‘责怪’，你懂的。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git blame &lt;file-name&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"显示本地更新过HEAD的git命令记录\"><a href=\"#显示本地更新过HEAD的git命令记录\" class=\"headerlink\" title=\"显示本地更新过HEAD的git命令记录\"></a>显示本地更新过HEAD的git命令记录</h2><p>每次更新了HEAD 的git 命令比如 commint、amend、cherry-pick、reset、revert等都会被记录下来（不限分支），就像shell的history一样。<br>这样你可以reset 到任何一次更新了HEAD 的操作之后，而不仅仅是回到当前分支下的某个commit 之后的状态。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reflog</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"修改作者名\"><a href=\"#修改作者名\" class=\"headerlink\" title=\"修改作者名\"></a>修改作者名</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit --amend --author=<span class=\"string\">&#x27;Author Name &lt;email@address.com&gt;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"修改远程仓库的url\"><a href=\"#修改远程仓库的url\" class=\"headerlink\" title=\"修改远程仓库的url\"></a>修改远程仓库的url</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote set-url origin &lt;URL&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"增加远程仓库\"><a href=\"#增加远程仓库\" class=\"headerlink\" title=\"增加远程仓库\"></a>增加远程仓库</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin &lt;remote-url&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"列出所有远程仓库\"><a href=\"#列出所有远程仓库\" class=\"headerlink\" title=\"列出所有远程仓库\"></a>列出所有远程仓库</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看两个星期内的改动\"><a href=\"#查看两个星期内的改动\" class=\"headerlink\" title=\"查看两个星期内的改动\"></a>查看两个星期内的改动</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git whatchanged --since=<span class=\"string\">&#x27;2 weeks ago&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"把A分支的某一个commit，放到B分支上\"><a href=\"#把A分支的某一个commit，放到B分支上\" class=\"headerlink\" title=\"把A分支的某一个commit，放到B分支上\"></a>把A分支的某一个commit，放到B分支上</h2><p>这个过程需要<code>cherry-pick</code>命令，<a href=\"http://sg552.iteye.com/blog/1300713#bc2367928\">参考</a></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout &lt;branch-name&gt; &amp;&amp; git cherry-pick &lt;commit-id&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"给git命令起别名\"><a href=\"#给git命令起别名\" class=\"headerlink\" title=\"给git命令起别名\"></a>给git命令起别名</h2><p>简化命令</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global <span class=\"built_in\">alias</span>.&lt;handle&gt; &lt;<span class=\"built_in\">command</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">比如：git status 改成 git st，这样可以简化命令</span><br><span class=\"line\"></span><br><span class=\"line\">git config --global alias.st status</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"存储当前的修改，但不用提交commit\"><a href=\"#存储当前的修改，但不用提交commit\" class=\"headerlink\" title=\"存储当前的修改，但不用提交commit\"></a>存储当前的修改，但不用提交commit</h2><p>详解可以参考<a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137602359178794d966923e5c4134bc8bf98dfb03aea3000\">廖雪峰老师的git教程</a></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"保存当前状态，包括untracked的文件\"><a href=\"#保存当前状态，包括untracked的文件\" class=\"headerlink\" title=\"保存当前状态，包括untracked的文件\"></a>保存当前状态，包括untracked的文件</h2><p>untracked文件：新建的文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash -u</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"展示所有stashes\"><a href=\"#展示所有stashes\" class=\"headerlink\" title=\"展示所有stashes\"></a>展示所有stashes</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash list</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"回到某个stash的状态\"><a href=\"#回到某个stash的状态\" class=\"headerlink\" title=\"回到某个stash的状态\"></a>回到某个stash的状态</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash apply &lt;stash@&#123;n&#125;&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"回到最后一个stash的状态，并删除这个stash\"><a href=\"#回到最后一个stash的状态，并删除这个stash\" class=\"headerlink\" title=\"回到最后一个stash的状态，并删除这个stash\"></a>回到最后一个stash的状态，并删除这个stash</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash pop</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除所有的stash\"><a href=\"#删除所有的stash\" class=\"headerlink\" title=\"删除所有的stash\"></a>删除所有的stash</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash clear</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"从stash中拿出某个文件的修改\"><a href=\"#从stash中拿出某个文件的修改\" class=\"headerlink\" title=\"从stash中拿出某个文件的修改\"></a>从stash中拿出某个文件的修改</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout &lt;stash@&#123;n&#125;&gt; -- &lt;file-path&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"展示所有tracked的文件\"><a href=\"#展示所有tracked的文件\" class=\"headerlink\" title=\"展示所有tracked的文件\"></a>展示所有tracked的文件</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git ls-files -t</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"展示所有untracked的文件\"><a href=\"#展示所有untracked的文件\" class=\"headerlink\" title=\"展示所有untracked的文件\"></a>展示所有untracked的文件</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git ls-files --others</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"展示所有忽略的文件\"><a href=\"#展示所有忽略的文件\" class=\"headerlink\" title=\"展示所有忽略的文件\"></a>展示所有忽略的文件</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git ls-files --others -i --exclude-standard</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"强制删除untracked的文件\"><a href=\"#强制删除untracked的文件\" class=\"headerlink\" title=\"强制删除untracked的文件\"></a>强制删除untracked的文件</h2><p>可以用来删除新建的文件。如果不指定文件文件名，则清空所有工作的untracked文件。<code>clean</code>命令，<strong>注意两点</strong>：</p>\n<ol>\n<li>clean后，删除的文件无法找回</li>\n<li>不会影响tracked的文件的改动，只会删除untracked的文件</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clean &lt;file-name&gt; -f</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"强制删除untracked的目录\"><a href=\"#强制删除untracked的目录\" class=\"headerlink\" title=\"强制删除untracked的目录\"></a>强制删除untracked的目录</h2><p>可以用来删除新建的目录，<strong>注意</strong>:这个命令也可以用来删除untracked的文件。详情见上一条</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clean &lt;directory-name&gt; -<span class=\"built_in\">df</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"展示简化的commit历史\"><a href=\"#展示简化的commit历史\" class=\"headerlink\" title=\"展示简化的commit历史\"></a>展示简化的commit历史</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> --pretty=oneline --graph --decorate --all</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"把某一个分支到导出成一个文件\"><a href=\"#把某一个分支到导出成一个文件\" class=\"headerlink\" title=\"把某一个分支到导出成一个文件\"></a>把某一个分支到导出成一个文件</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git bundle create &lt;file&gt; &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"从包中导入分支\"><a href=\"#从包中导入分支\" class=\"headerlink\" title=\"从包中导入分支\"></a>从包中导入分支</h2><p>新建一个分支，分支内容就是上面<code>git bundle create</code>命令导出的内容</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> repo.bundle &lt;repo-dir&gt; -b &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"执行rebase之前自动stash\"><a href=\"#执行rebase之前自动stash\" class=\"headerlink\" title=\"执行rebase之前自动stash\"></a>执行rebase之前自动stash</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rebase --autostash</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"从远程仓库根据ID，拉下某一状态，到本地分支\"><a href=\"#从远程仓库根据ID，拉下某一状态，到本地分支\" class=\"headerlink\" title=\"从远程仓库根据ID，拉下某一状态，到本地分支\"></a>从远程仓库根据ID，拉下某一状态，到本地分支</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch origin pull/&lt;<span class=\"built_in\">id</span>&gt;/head:&lt;branch-name&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"详细展示一行中的修改\"><a href=\"#详细展示一行中的修改\" class=\"headerlink\" title=\"详细展示一行中的修改\"></a>详细展示一行中的修改</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff --word-diff</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"清除gitignore文件中记录的文件\"><a href=\"#清除gitignore文件中记录的文件\" class=\"headerlink\" title=\"清除gitignore文件中记录的文件\"></a>清除gitignore文件中记录的文件</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clean -X -f</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"展示所有alias和configs\"><a href=\"#展示所有alias和configs\" class=\"headerlink\" title=\"展示所有alias和configs\"></a>展示所有alias和configs</h2><p><strong>注意：</strong> config分为：当前目录（local）和全局（golbal）的config，默认为当前目录的config</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --<span class=\"built_in\">local</span> --list (当前目录)</span><br><span class=\"line\">git config --global --list (全局)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"展示忽略的文件\"><a href=\"#展示忽略的文件\" class=\"headerlink\" title=\"展示忽略的文件\"></a>展示忽略的文件</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status --ignored</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"commit历史中显示Branch1有的，但是Branch2没有commit\"><a href=\"#commit历史中显示Branch1有的，但是Branch2没有commit\" class=\"headerlink\" title=\"commit历史中显示Branch1有的，但是Branch2没有commit\"></a>commit历史中显示Branch1有的，但是Branch2没有commit</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> Branch1 ^Branch2</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"在commit-log中显示GPG签名\"><a href=\"#在commit-log中显示GPG签名\" class=\"headerlink\" title=\"在commit log中显示GPG签名\"></a>在commit log中显示GPG签名</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> --show-signature</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除全局设置\"><a href=\"#删除全局设置\" class=\"headerlink\" title=\"删除全局设置\"></a>删除全局设置</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> &lt;entry-name&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"新建并切换到新分支上，同时这个分支没有任何commit\"><a href=\"#新建并切换到新分支上，同时这个分支没有任何commit\" class=\"headerlink\" title=\"新建并切换到新分支上，同时这个分支没有任何commit\"></a>新建并切换到新分支上，同时这个分支没有任何commit</h2><p>相当于保存修改，但是重写commit历史</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout --orphan &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"展示任意分支某一文件的内容\"><a href=\"#展示任意分支某一文件的内容\" class=\"headerlink\" title=\"展示任意分支某一文件的内容\"></a>展示任意分支某一文件的内容</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git show &lt;branch-name&gt;:&lt;file-name&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"clone下来指定的单一分支\"><a href=\"#clone下来指定的单一分支\" class=\"headerlink\" title=\"clone下来指定的单一分支\"></a>clone下来指定的单一分支</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> -b &lt;branch-name&gt; --single-branch https://github.com/user/repo.git</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"忽略某个文件的改动\"><a href=\"#忽略某个文件的改动\" class=\"headerlink\" title=\"忽略某个文件的改动\"></a>忽略某个文件的改动</h2><p>关闭 track 指定文件的改动，也就是 Git 将不会在记录这个文件的改动</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git update-index --assume-unchanged path/to/file</span><br></pre></td></tr></table></figure>\n\n<p>恢复 track 指定文件的改动</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git update-index --no-assume-unchanged path/to/file</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"忽略文件的权限变化\"><a href=\"#忽略文件的权限变化\" class=\"headerlink\" title=\"忽略文件的权限变化\"></a>忽略文件的权限变化</h2><p>不再将文件的权限变化视作改动</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config core.fileMode <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"以最后提交的顺序列出所有Git分支\"><a href=\"#以最后提交的顺序列出所有Git分支\" class=\"headerlink\" title=\"以最后提交的顺序列出所有Git分支\"></a>以最后提交的顺序列出所有Git分支</h2><p>最新的放在最上面</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git for-each-ref --<span class=\"built_in\">sort</span>=-committerdate --format=<span class=\"string\">&#x27;%(refname:short)&#x27;</span> refs/heads/</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"在commit-log中查找相关内容\"><a href=\"#在commit-log中查找相关内容\" class=\"headerlink\" title=\"在commit log中查找相关内容\"></a>在commit log中查找相关内容</h2><p>通过grep查找，given-text：所需要查找的字段</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> --all --grep=<span class=\"string\">&#x27;&lt;given-text&gt;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"把暂存区的指定file放到工作区中\"><a href=\"#把暂存区的指定file放到工作区中\" class=\"headerlink\" title=\"把暂存区的指定file放到工作区中\"></a>把暂存区的指定file放到工作区中</h2><p>不添加参数，默认是-mixed</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset &lt;file-name&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"强制推送\"><a href=\"#强制推送\" class=\"headerlink\" title=\"强制推送\"></a>强制推送</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -f &lt;remote-name&gt; &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>","categories":[{"name":"教程分享","path":"api/categories/教程分享.json"},{"name":"Git","path":"api/categories/Git.json"}],"tags":[{"name":"Git","path":"api/tags/Git.json"}]}