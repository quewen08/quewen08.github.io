{"title":"智能合约语言 Solidity 教程系列9 - 错误处理","slug":"solidity-errorhandler","date":"2018-04-08T07:58:00.000Z","updated":"2022-10-19T14:40:00.266Z","comments":true,"path":"api/articles/solidity-errorhandler.json","realPath":"/2018/solidity-errorhandler/index/","excerpt":null,"covers":["/img/solidity_error1.jpg","/img/solidity_error2.jpg"],"cover":"/img/solidity_error1.jpg","content":"<p>智能合约语言 Solidity 教程系列9 - 错误处理<br>这是Solidity教程系列文章第9篇介绍Solidity 错误处理。<br>Solidity 系列完整的文章列表请查看<a href=\"/categories/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E5%8C%BA%E5%9D%97%E9%93%BE/%E4%BB%A5%E5%A4%AA%E5%9D%8A/Solidity/\">分类-Solidity</a>。</p>\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>Solidity是以太坊智能合约编程语言，阅读本文前，你应该对以太坊、智能合约有所了解，<br>如果你还不了解，建议你先看<a href=\"/posts/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E5%8C%BA%E5%9D%97%E9%93%BE/%E4%BB%A5%E5%A4%AA%E5%9D%8A/2018-02-22-whatiseth.html\">以太坊是什么</a></p>\n<p>本文前半部分是参考Solidity官方文档（当前最新版本：0.4.20）进行翻译，后半部分是结合实际合约代码实例说明类型的使用（仅针对专栏订阅用户）。</p>\n<h2 id=\"什么是错误处理\"><a href=\"#什么是错误处理\" class=\"headerlink\" title=\"什么是错误处理\"></a>什么是错误处理</h2><p>错误处理是指在程序发生错误时的处理方式，Solidity处理错误和我们常见的语言不一样，Solidity是通过回退状态的方式来处理错误。发生异常时会撤消当前调用（及其所有子调用）所改变的状态，同时给调用者返回一个错误标识。注意_捕捉异常是不可能的_ ，因此没有try … catch…。</p>\n<p>为什么Solidity处理错误要这样设计呢？<br>我们可以把区块链理解为是全球共享的分布式事务性数据库。<em>全球共享</em> 意味着参与这个网络的每一个人都可以读写其中的记录。如果想修改这个数据库中的内容，就必须创建一个事务，<em>事务</em> 意味着要做的修改（假如我们想同时修改两个值）只能被完全的应用或者一点都没有进行。<br>学习过数据库的同学，应该理解事务的含义，如果你对事务一词不是很理解，建议你搜索一下“数据库事务“。<br>Solidity错误处理就是要保证每次调用都是事务性的。</p>\n<h2 id=\"如何处理\"><a href=\"#如何处理\" class=\"headerlink\" title=\"如何处理\"></a>如何处理</h2><p>Solidity提供了两个函数assert和require来进行条件检查，如果条件不满足则抛出异常。assert函数通常用来检查（测试）内部错误，而require函数来检查输入变量或合同状态变量是否满足条件以及验证调用外部合约返回值。<br>另外，如果我们正确使用assert，有一个Solidity分析工具就可以帮我们分析出智能合约中的错误，帮助我们发现合约中有逻辑错误的bug。</p>\n<p>除了可以两个函数assert和require来进行条件检查，另外还有两种方式来触发异常：</p>\n<ol>\n<li>revert函数可以用来标记错误并回退当前调用</li>\n<li>使用throw关键字抛出异常（从0.4.13版本，throw关键字已被弃用，将来会被淘汰。）</li>\n</ol>\n<p>当子调用中发生异常时，异常会自动向上“冒泡”。 不过也有一些例外：send，和底层的函数调用call, delegatecall，callcode，当发生异常时，这些函数返回false。</p>\n<p>注意：在一个不存在的地址上调用底层的函数call，delegatecall，callcode 也会返回成功，所以我们在进行调用时，应该总是优先进行函数存在性检查。</p>\n<p>在下面通过一个示例来说明如何使用require来检查输入条件，以及assert用于内部错误检查：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pragma solidity ^0.4.0;</span><br><span class=\"line\"></span><br><span class=\"line\">contract Sharer &#123;</span><br><span class=\"line\">    function sendHalf(address addr) public payable returns (uint balance) &#123;</span><br><span class=\"line\">        require(msg.value % 2 == 0); // 仅允许偶数</span><br><span class=\"line\">        uint balanceBeforeTransfer = this.balance;</span><br><span class=\"line\">        addr.transfer(msg.value / 2);  // 如果失败，会抛出异常，下面的代码就不是执行</span><br><span class=\"line\">        assert(this.balance == balanceBeforeTransfer - msg.value / 2);</span><br><span class=\"line\">        return this.balance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们实际运行下，看看异常是如何发生的：</p>\n<ol>\n<li><p>首先打开<a href=\"https://remix.ethereum.org/\">Remix</a>，贴入代码，点击创建合约。如下图：<br>  <img src=\"/img/solidity_error1.jpg\"></p>\n</li>\n<li><p>运行测试1：附加1wei (奇数)去调用sendHalf，这时会发生异常，如下图:<br>  <img src=\"/img/solidity_error2.jpg\"></p>\n</li>\n<li><p>运行测试2：附加2wei 去调用sendHalf，运行正常。</p>\n</li>\n<li><p>运行测试3：附加2wei以及sendHalf参数为当前合约本身，在转账是发生异常，因为合约无法接收转账，错误提示上图类似。</p>\n</li>\n</ol>\n<h2 id=\"assert类型异常\"><a href=\"#assert类型异常\" class=\"headerlink\" title=\"assert类型异常\"></a>assert类型异常</h2><p>在下述场景中自动产生assert类型的异常:</p>\n<ol>\n<li>如果越界，或负的序号值访问数组，如i &gt;&#x3D; x.length 或 i &lt; 0时访问x[i]</li>\n<li>如果序号越界，或负的序号值时访问一个定长的bytesN。</li>\n<li>被除数为0， 如5&#x2F;0 或 23 % 0。</li>\n<li>对一个二进制移动一个负的值。如:5&lt;&lt;i; i为-1时。</li>\n<li>整数进行可以显式转换为枚举时，如果将过大值，负值转为枚举类型则抛出异常</li>\n<li>如果调用未初始化内部<a href=\"https://learnblockchain.cn/2017/12/12/solidity_func/\">函数类型</a>的变量。</li>\n<li>如果调用assert的参数为false</li>\n</ol>\n<h2 id=\"require类型异常\"><a href=\"#require类型异常\" class=\"headerlink\" title=\"require类型异常\"></a>require类型异常</h2><p>在下述场景中自动产生require类型的异常:</p>\n<ol>\n<li>调用_throw_</li>\n<li>如果调用_require_ 的参数为false</li>\n<li>如果你通过消息调用一个函数，但在调用的过程中，并没有正确结束(gas不足，没有匹配到对应的函数，或被调用的函数出现异常)。底层操作如call,send,delegatecall或callcode除外，它们不会抛出异常，但它们会通过返回false来表示失败。</li>\n<li>如果在使用new创建一个新合约时出现第3条的原因没有正常完成。</li>\n<li>如果调用外部函数调用时，被调用的对象不包含代码。</li>\n<li>如果合约没有payable修饰符的public的函数在接收以太币时（包括构造函数，和回退函数）。</li>\n<li>如果合约通过一个public的getter函数（public getter funciton）接收以太币。</li>\n<li>如果_.transfer()_ 执行失败</li>\n</ol>\n<p>当发生require类型的异常时，Solidity会执行一个回退操作（指令0xfd）。<br>当发生assert类型的异常时，Solidity会执行一个无效操作（指令0xfe）。<br>在上述的两种情况下，EVM都会撤回所有的状态改变。是因为期望的结果没有发生，就没法继续安全执行。必须保证交易的原子性（一致性，要么全部执行，要么一点改变都没有，不能只改变一部分），所以需要撤销所有操作，让整个交易没有任何影响。</p>\n<p>注意assert类型的异常会消耗掉所有的gas, 而require从大都会版本（Metropolis， 即目前主网所在的版本）起不会消耗gas。</p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ul>\n<li><a href=\"https://solidity.readthedocs.io/en/v0.4.21/control-structures.html#error-handling-assert-require-revert-and-exceptions\">Solidity错误处理</a></li>\n</ul>\n","more":"<p>智能合约语言 Solidity 教程系列9 - 错误处理<br>这是Solidity教程系列文章第9篇介绍Solidity 错误处理。<br>Solidity 系列完整的文章列表请查看<a href=\"/categories/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E5%8C%BA%E5%9D%97%E9%93%BE/%E4%BB%A5%E5%A4%AA%E5%9D%8A/Solidity/\">分类-Solidity</a>。</p>\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>Solidity是以太坊智能合约编程语言，阅读本文前，你应该对以太坊、智能合约有所了解，<br>如果你还不了解，建议你先看<a href=\"/posts/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E5%8C%BA%E5%9D%97%E9%93%BE/%E4%BB%A5%E5%A4%AA%E5%9D%8A/2018-02-22-whatiseth.html\">以太坊是什么</a></p>\n<p>本文前半部分是参考Solidity官方文档（当前最新版本：0.4.20）进行翻译，后半部分是结合实际合约代码实例说明类型的使用（仅针对专栏订阅用户）。</p>\n<h2 id=\"什么是错误处理\"><a href=\"#什么是错误处理\" class=\"headerlink\" title=\"什么是错误处理\"></a>什么是错误处理</h2><p>错误处理是指在程序发生错误时的处理方式，Solidity处理错误和我们常见的语言不一样，Solidity是通过回退状态的方式来处理错误。发生异常时会撤消当前调用（及其所有子调用）所改变的状态，同时给调用者返回一个错误标识。注意_捕捉异常是不可能的_ ，因此没有try … catch…。</p>\n<p>为什么Solidity处理错误要这样设计呢？<br>我们可以把区块链理解为是全球共享的分布式事务性数据库。<em>全球共享</em> 意味着参与这个网络的每一个人都可以读写其中的记录。如果想修改这个数据库中的内容，就必须创建一个事务，<em>事务</em> 意味着要做的修改（假如我们想同时修改两个值）只能被完全的应用或者一点都没有进行。<br>学习过数据库的同学，应该理解事务的含义，如果你对事务一词不是很理解，建议你搜索一下“数据库事务“。<br>Solidity错误处理就是要保证每次调用都是事务性的。</p>\n<h2 id=\"如何处理\"><a href=\"#如何处理\" class=\"headerlink\" title=\"如何处理\"></a>如何处理</h2><p>Solidity提供了两个函数assert和require来进行条件检查，如果条件不满足则抛出异常。assert函数通常用来检查（测试）内部错误，而require函数来检查输入变量或合同状态变量是否满足条件以及验证调用外部合约返回值。<br>另外，如果我们正确使用assert，有一个Solidity分析工具就可以帮我们分析出智能合约中的错误，帮助我们发现合约中有逻辑错误的bug。</p>\n<p>除了可以两个函数assert和require来进行条件检查，另外还有两种方式来触发异常：</p>\n<ol>\n<li>revert函数可以用来标记错误并回退当前调用</li>\n<li>使用throw关键字抛出异常（从0.4.13版本，throw关键字已被弃用，将来会被淘汰。）</li>\n</ol>\n<p>当子调用中发生异常时，异常会自动向上“冒泡”。 不过也有一些例外：send，和底层的函数调用call, delegatecall，callcode，当发生异常时，这些函数返回false。</p>\n<p>注意：在一个不存在的地址上调用底层的函数call，delegatecall，callcode 也会返回成功，所以我们在进行调用时，应该总是优先进行函数存在性检查。</p>\n<p>在下面通过一个示例来说明如何使用require来检查输入条件，以及assert用于内部错误检查：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pragma solidity ^0.4.0;</span><br><span class=\"line\"></span><br><span class=\"line\">contract Sharer &#123;</span><br><span class=\"line\">    function sendHalf(address addr) public payable returns (uint balance) &#123;</span><br><span class=\"line\">        require(msg.value % 2 == 0); // 仅允许偶数</span><br><span class=\"line\">        uint balanceBeforeTransfer = this.balance;</span><br><span class=\"line\">        addr.transfer(msg.value / 2);  // 如果失败，会抛出异常，下面的代码就不是执行</span><br><span class=\"line\">        assert(this.balance == balanceBeforeTransfer - msg.value / 2);</span><br><span class=\"line\">        return this.balance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们实际运行下，看看异常是如何发生的：</p>\n<ol>\n<li><p>首先打开<a href=\"https://remix.ethereum.org/\">Remix</a>，贴入代码，点击创建合约。如下图：<br>  <img src=\"/img/solidity_error1.jpg\"></p>\n</li>\n<li><p>运行测试1：附加1wei (奇数)去调用sendHalf，这时会发生异常，如下图:<br>  <img src=\"/img/solidity_error2.jpg\"></p>\n</li>\n<li><p>运行测试2：附加2wei 去调用sendHalf，运行正常。</p>\n</li>\n<li><p>运行测试3：附加2wei以及sendHalf参数为当前合约本身，在转账是发生异常，因为合约无法接收转账，错误提示上图类似。</p>\n</li>\n</ol>\n<h2 id=\"assert类型异常\"><a href=\"#assert类型异常\" class=\"headerlink\" title=\"assert类型异常\"></a>assert类型异常</h2><p>在下述场景中自动产生assert类型的异常:</p>\n<ol>\n<li>如果越界，或负的序号值访问数组，如i &gt;&#x3D; x.length 或 i &lt; 0时访问x[i]</li>\n<li>如果序号越界，或负的序号值时访问一个定长的bytesN。</li>\n<li>被除数为0， 如5&#x2F;0 或 23 % 0。</li>\n<li>对一个二进制移动一个负的值。如:5&lt;&lt;i; i为-1时。</li>\n<li>整数进行可以显式转换为枚举时，如果将过大值，负值转为枚举类型则抛出异常</li>\n<li>如果调用未初始化内部<a href=\"https://learnblockchain.cn/2017/12/12/solidity_func/\">函数类型</a>的变量。</li>\n<li>如果调用assert的参数为false</li>\n</ol>\n<h2 id=\"require类型异常\"><a href=\"#require类型异常\" class=\"headerlink\" title=\"require类型异常\"></a>require类型异常</h2><p>在下述场景中自动产生require类型的异常:</p>\n<ol>\n<li>调用_throw_</li>\n<li>如果调用_require_ 的参数为false</li>\n<li>如果你通过消息调用一个函数，但在调用的过程中，并没有正确结束(gas不足，没有匹配到对应的函数，或被调用的函数出现异常)。底层操作如call,send,delegatecall或callcode除外，它们不会抛出异常，但它们会通过返回false来表示失败。</li>\n<li>如果在使用new创建一个新合约时出现第3条的原因没有正常完成。</li>\n<li>如果调用外部函数调用时，被调用的对象不包含代码。</li>\n<li>如果合约没有payable修饰符的public的函数在接收以太币时（包括构造函数，和回退函数）。</li>\n<li>如果合约通过一个public的getter函数（public getter funciton）接收以太币。</li>\n<li>如果_.transfer()_ 执行失败</li>\n</ol>\n<p>当发生require类型的异常时，Solidity会执行一个回退操作（指令0xfd）。<br>当发生assert类型的异常时，Solidity会执行一个无效操作（指令0xfe）。<br>在上述的两种情况下，EVM都会撤回所有的状态改变。是因为期望的结果没有发生，就没法继续安全执行。必须保证交易的原子性（一致性，要么全部执行，要么一点改变都没有，不能只改变一部分），所以需要撤销所有操作，让整个交易没有任何影响。</p>\n<p>注意assert类型的异常会消耗掉所有的gas, 而require从大都会版本（Metropolis， 即目前主网所在的版本）起不会消耗gas。</p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ul>\n<li><a href=\"https://solidity.readthedocs.io/en/v0.4.21/control-structures.html#error-handling-assert-require-revert-and-exceptions\">Solidity错误处理</a></li>\n</ul>\n","categories":[{"name":"学习记录","path":"api/categories/学习记录.json"},{"name":"区块链","path":"api/categories/区块链.json"},{"name":"以太坊","path":"api/categories/以太坊.json"}],"tags":[{"name":"Solidity手册","path":"api/tags/Solidity手册.json"}]}