{"title":"Android 开发最佳实践","slug":"android-best-practices","date":"2018-10-30T12:22:22.000Z","updated":"2022-10-19T14:40:00.239Z","comments":true,"path":"api/articles/android-best-practices.json","realPath":"/2018/android-best-practices/index/","excerpt":null,"covers":null,"cover":null,"content":"<h1 id=\"Android-开发最佳实践\"><a href=\"#Android-开发最佳实践\" class=\"headerlink\" title=\"Android 开发最佳实践\"></a>Android 开发最佳实践</h1><blockquote>\n<p>原文地址:<a href=\"https://github.com/futurice/android-best-practices\">android-best-practices</a></p>\n</blockquote>\n<p>从<a href=\"http://www.futurice.com/\">Futurice</a>公司Android开发者中学到的经验。<br>遵循以下准则，避免重复发明轮子。若你对开发iOS或Windows Phone 有兴趣，<br>请看<a href=\"https://github.com/futurice/ios-good-practices\"><strong>iOS Good Practices</strong></a> 和 <a href=\"https://github.com/futurice/win-client-dev-good-practices\"><strong>Windows client Good Practices</strong></a> 这两篇文章。</p>\n<h2 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h2><ul>\n<li>使用 Gradle 和它推荐的工程结构</li>\n<li>把密码和敏感数据放在gradle.properties</li>\n<li>不要自己写 HTTP 客户端,使用Volley或OkHttp库</li>\n<li>使用Jackson库解析JSON数据</li>\n<li>避免使用Guava同时使用一些类库来避免<em>65k method limit</em>（一个Android程序中最多能执行65536个方法）</li>\n<li>使用 Fragments来呈现UI视图</li>\n<li>使用 Activities 只是为了管理 Fragments</li>\n<li>Layout 布局是 XMLs代码，组织好它们</li>\n<li>在layoutout XMLs布局时，使用styles文件来避免使用重复的属性</li>\n<li>使用多个style文件来避免单一的一个大style文件</li>\n<li>保持你的colors.xml 简短DRY(不要重复自己)，只是定义调色板</li>\n<li>总是使用dimens.xml DRY(不要重复自己)，定义通用常数</li>\n<li>不要做一个深层次的ViewGroup</li>\n<li>在使用WebViews时避免在客户端做处理，当心内存泄露</li>\n<li>使用Robolectric单元测试，Robotium 做UI测试</li>\n<li>使用Genymotion 作为你的模拟器</li>\n<li>总是使用ProGuard 和 DexGuard混淆来项目</li>\n</ul>\n<h3 id=\"Android-SDK\"><a href=\"#Android-SDK\" class=\"headerlink\" title=\"Android SDK\"></a>Android SDK</h3><p>将你的<a href=\"https://developer.android.com/sdk/installing/index.html?pkg=tools\">Android SDK</a>放在你的home目录或其他应用程序无关的位置。<br>当安装有些包含SDK的IDE的时候，可能会将SDK放在IDE同一目录下，当你需要升级（或重新安装）IDE或更换的IDE时，会非常麻烦。<br>此外，如果你的IDE是在普通用户下运行，而不是在root下运行，还要避免把SDK放到一下需要sudo权限的系统级别目录下。</p>\n<h3 id=\"构建系统\"><a href=\"#构建系统\" class=\"headerlink\" title=\"构建系统\"></a>构建系统</h3><p>你的默认编译环境应该是<a href=\"http://tools.android.com/tech-docs/new-build-system\">Gradle</a>.<br>Ant 有很多限制，也很冗余。使用Gradle，完成以下工作很方便：</p>\n<ul>\n<li>构建APP不同版本的变种</li>\n<li>制作简单类似脚本的任务</li>\n<li>管理和下载依赖</li>\n<li>自定义秘钥</li>\n<li>更多</li>\n</ul>\n<p>同时，Android Gradle插件作为新标准的构建系统正在被Google积极的开发。</p>\n<h3 id=\"工程结构\"><a href=\"#工程结构\" class=\"headerlink\" title=\"工程结构\"></a>工程结构</h3><p>有两种流行的结构：老的Ant &amp; Eclipse ADT 工程结构，和新的Gradle &amp; Android Studio 工程结构，<br>你应该选择新的工程结构，如果你的工程还在使用老的结构，考虑放弃吧，将工程移植到新的结构。</p>\n<p>老的结构:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">old-structure</span><br><span class=\"line\">├─ assets</span><br><span class=\"line\">├─ libs</span><br><span class=\"line\">├─ res</span><br><span class=\"line\">├─ src</span><br><span class=\"line\">│  └─ com/futurice/project</span><br><span class=\"line\">├─ AndroidManifest.xml</span><br><span class=\"line\">├─ build.gradle</span><br><span class=\"line\">├─ project.properties</span><br><span class=\"line\">└─ proguard-rules.pro</span><br></pre></td></tr></table></figure>\n\n<p>新的结构</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new-structure</span><br><span class=\"line\">├─ library-foobar</span><br><span class=\"line\">├─ app</span><br><span class=\"line\">│  ├─ libs</span><br><span class=\"line\">│  ├─ src</span><br><span class=\"line\">│  │  ├─ androidTest</span><br><span class=\"line\">│  │  │  └─ java</span><br><span class=\"line\">│  │  │     └─ com/futurice/project</span><br><span class=\"line\">│  │  └─ main</span><br><span class=\"line\">│  │     ├─ java</span><br><span class=\"line\">│  │     │  └─ com/futurice/project</span><br><span class=\"line\">│  │     ├─ res</span><br><span class=\"line\">│  │     └─ AndroidManifest.xml</span><br><span class=\"line\">│  ├─ build.gradle</span><br><span class=\"line\">│  └─ proguard-rules.pro</span><br><span class=\"line\">├─ build.gradle</span><br><span class=\"line\">└─ settings.gradle</span><br></pre></td></tr></table></figure>\n\n<p>主要的区别在于，新的结构明确的分开了’source sets’ (<code>main</code>,<code>androidTest</code>)，这是Gradle的一个理念。<br>通过这个你可以做到，例如，添加源组‘paid’和‘free’在src中，让你的应用程序具有付费和免费的两种模式的源代码。</p>\n<p>你的项目引用第三方项目库时（例如，library-foobar），拥有一个顶级包名<code>app</code>从第三方库项目区分你的应用程序是非常有用的。<br>然后<code>settings.gradle</code>不断引用这些库项目，其中<code>app/build.gradle</code>可以引用。</p>\n<h3 id=\"Gradle-配置\"><a href=\"#Gradle-配置\" class=\"headerlink\" title=\"Gradle 配置\"></a>Gradle 配置</h3><p><strong>常用结构</strong> 参考<a href=\"http://tools.android.com/tech-docs/new-build-system/user-guide\">Google’s guide on Gradle for Android</a></p>\n<p><strong>小任务</strong> 除了(shell, Python, Perl, etc)这些脚本语言，你也可以使用Gradle 制作任务。<br>更多信息请参考<a href=\"http://www.gradle.org/docs/current/userguide/userguide_single.html#N10CBF\">Gradle’s documentation</a>。</p>\n<p><strong>密码</strong> 在做版本release时你app的 <code>build.gradle</code>你需要定义 <code>signingConfigs</code>.此时你应该避免以下内容：</p>\n<p><em>不要做这个</em> . 这会出现在版本控制中。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">signingConfigs &#123;</span><br><span class=\"line\">\trelease &#123;</span><br><span class=\"line\">\t\tstoreFile file(<span class=\"string\">&quot;myapp.keystore&quot;</span>)</span><br><span class=\"line\">\t\tstorePassword <span class=\"string\">&quot;password123&quot;</span></span><br><span class=\"line\">\t\tkeyAlias <span class=\"string\">&quot;thekey&quot;</span></span><br><span class=\"line\">\t\tkeyPassword <span class=\"string\">&quot;password789&quot;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而是，建立一个不加入版本控制系统的<code>gradle.properties</code>文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">KEYSTORE_PASSWORD=password123</span><br><span class=\"line\">KEY_PASSWORD=password789</span><br></pre></td></tr></table></figure>\n\n\n<p>那个文件是gradle自动引入的，你可以在<code>buld.gradle</code>文件中使用，例如：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">signingConfigs &#123;</span><br><span class=\"line\">\trelease &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tstoreFile file(<span class=\"string\">&quot;myapp.keystore&quot;</span>)</span><br><span class=\"line\">\t\t\tstorePassword KEYSTORE_PASSWORD</span><br><span class=\"line\">\t\t\tkeyAlias <span class=\"string\">&quot;thekey&quot;</span></span><br><span class=\"line\">\t\t\tkeyPassword KEY_PASSWORD</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (ex) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InvalidUserDataException(<span class=\"string\">&quot;You should define KEYSTORE_PASSWORD and KEY_PASSWORD in gradle.properties.&quot;</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p><strong>使用 Maven 依赖方案代替使用导入jar包方案</strong> 如果在你的项目中你明确使用某些<br>jar文件，那么它们可能成为固定的版本，如<code>2.1.1</code>.下载jar包更新他们是很繁琐的，<br>这个问题Maven很好的解决了，这在Android Gradle构建中也是推荐的方法。你可<br>以指定版本的一个范围，如<code>2.1.+</code>,然后Maven会自动升级到制定的最新版本，例如：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">\tcompile <span class=\"string\">&#x27;com.netflix.rxjava:rxjava-core:0.19.+&#x27;</span></span><br><span class=\"line\">\tcompile <span class=\"string\">&#x27;com.netflix.rxjava:rxjava-android:0.19.+&#x27;</span></span><br><span class=\"line\">\tcompile <span class=\"string\">&#x27;com.fasterxml.jackson.core:jackson-databind:2.4.+&#x27;</span></span><br><span class=\"line\">\tcompile <span class=\"string\">&#x27;com.fasterxml.jackson.core:jackson-core:2.4.+&#x27;</span></span><br><span class=\"line\">\tcompile <span class=\"string\">&#x27;com.fasterxml.jackson.core:jackson-annotations:2.4.+&#x27;</span></span><br><span class=\"line\">\tcompile <span class=\"string\">&#x27;com.squareup.okhttp:okhttp:2.0.+&#x27;</span></span><br><span class=\"line\">\tcompile <span class=\"string\">&#x27;com.squareup.okhttp:okhttp-urlconnection:2.0.+&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"IDEs-and-text-editors\"><a href=\"#IDEs-and-text-editors\" class=\"headerlink\" title=\"IDEs and text editors\"></a>IDEs and text editors</h3><h3 id=\"IDE集成开发环境和文本编辑器\"><a href=\"#IDE集成开发环境和文本编辑器\" class=\"headerlink\" title=\"IDE集成开发环境和文本编辑器\"></a>IDE集成开发环境和文本编辑器</h3><p><strong>无论使用什么编辑器，一定要构建一个良好的工程结构。</strong> 编辑器每个人都有自己的<br>选择，让你的编辑器根据工程结构和构建系统运作，那是你自己的责任。</p>\n<p>当下首推<a href=\"https://developer.android.com/sdk/installing/studio.html\">Android Studio</a>,因为他是由谷歌开发，很好地支持Gradle，包含很多有用的检测和分析工具，默认使用最新的工程结构，它就是为Android开发定制的。</p>\n<p>你也可以使用纯文版编辑器如Vim，Sublime Text，或者Emacs。如果那样的话，你需要使用Gradle和<code>adb</code>命令行。</p>\n<p>不再推荐使用Eclipse和ADT开发，因为<a href=\"https://android-developers.googleblog.com/2015/06/an-update-on-eclipse-android-developer.html\">谷歌在2015年年末结束了对ADT的支持</a>，并呼吁开发者尽快迁移到Android Studio。</p>\n<p>无论你使用何种开发工具，避免将你的编辑器配置文件（比如Android Studio的iml文件）加入到版本控制，因为这些文件通常包含与本地机器有关的配置，可能会影响你的同事。</p>\n<p>最后，善待其他开发者，不要强制改变他们的开发工具和偏好。</p>\n<h3 id=\"类库\"><a href=\"#类库\" class=\"headerlink\" title=\"类库\"></a>类库</h3><p><strong><a href=\"http://wiki.fasterxml.com/JacksonHome\">Jackson</a></strong> 是一个将java对象转换成JSON与JSON转化java类的类库。<a href=\"https://code.google.com/p/google-gson/\">Gson</a><br>是解决这个问题的流行方案，然而我们发现Jackson更高效,因为它支持替代的方法处理JSON:流、内存树模型,和传统JSON-POJO数据绑定。不过，请记住，<br>Jsonkson库比起GSON更大，所以根据你的情况选择，你可能选择GSON来避免APP 65k个方法的限制。其它选择: <a href=\"https://code.google.com/p/json-smart/\">Json-smart</a> and <a href=\"https://github.com/RichardHightower/boon/wiki/Boon-JSON-in-five-minutes\">Boon JSON</a></p>\n<p><strong>网络请求，缓存，图片</strong> 执行请求后端服务器，有几种交互的解决方案，你应该考虑实现你自己的网络客户端。使用 <a href=\"https://android.googlesource.com/platform/frameworks/volley\">Volley</a><br>或<a href=\"http://square.github.io/retrofit/\">Retrofit</a>。Volley 同时提供图片缓存类。如果你选择使用Retrofit,那么考虑使用<a href=\"http://square.github.io/picasso/\">Picasso</a><br>来加载图片和缓存，同时使用<a href=\"http://square.github.io/okhttp/\">OkHttp</a>作为高效的网络请求。Retrofit，Picasso和OkHttp都是同一家公司开发（注：<br>是由<a href=\"https://github.com/square\">Square</a> 公司开发），所以它们能很好的在一起运行。<a href=\"http://stackoverflow.com/questions/24375043/how-to-implement-android-volley-with-okhttp-2-0/24951835#24951835\">OkHttp 同样可以和Volley在一起使用 Volley</a>.</p>\n<p><strong>RxJava</strong> 是函数式反应性的一个类库，换句话说，能处理异步的事件。<br>这是一个强大的和有前途的模式，同时也可能会造成混淆，因为它是如此的不同。<br>我们建议在使用这个库架构整个应用程序之前要谨慎考虑。<br>有一些项目是使用RxJava完成的，如果你需要帮助可以跟这些人取得联系：<br>Timo Tuominen, Olli Salonen, Andre Medeiros, Mark Voit, Antti Lammi, Vera Izrailit, Juha Ristolainen.<br>我们也写了一些博客：<br><a href=\"http://blog.futurice.com/tech-pick-of-the-week-rx-for-net-and-rxjava-for-android\">[1]</a>, <a href=\"http://blog.futurice.com/top-7-tips-for-rxjava-on-android\">[2]</a>,<br><a href=\"https://gist.github.com/staltz/868e7e9bc2a7b8c1f754\">[3]</a>,<br><a href=\"http://blog.futurice.com/android-development-has-its-own-swift\">[4]</a>.</p>\n<p>如若你之前有使用过Rx的经历，开始从API响应应用它。<br>另外，从简单的UI事件处理开始运用，如单击事件或在搜索栏输入事件。<br>若对你的Rx技术有信心，同时想要将它应用到你的整体架构中，那么请在复杂的部分写好Javadocs文档。<br>请记住其他不熟悉RxJava的开发人员，可能会非常难理解整个项目。<br>尽你的的全力帮助他们理解你的代码和Rx。</p>\n<p><strong><a href=\"https://github.com/evant/gradle-retrolambda\">Retrolambda</a></strong> 是一个在Android和预JDK8平台上的使用Lambda表达式语法的Java类库。<br>它有助于保持你代码的紧凑性和可读性，特别当你使用如RxJava函数风格编程时。<br>使用它时先安装JDK8，在Android Studio工程结构对话框中把它设置成为SDK路径，同时设置<code>JAVA8_HOME</code>和<code>JAVA7_HOME</code>环境变量，<br>然后在工程根目录下配置 build.gradle：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">\tclasspath <span class=\"string\">&#x27;me.tatarka:gradle-retrolambda:2.4.+&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>同时在每个module 的build.gradle中添加</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply <span class=\"attr\">plugin:</span> <span class=\"string\">&#x27;retrolambda&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">android &#123;</span><br><span class=\"line\">\tcompileOptions &#123;</span><br><span class=\"line\">\tsourceCompatibility JavaVersion.VERSION_1_8</span><br><span class=\"line\">\ttargetCompatibility JavaVersion.VERSION_1_8</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">retrolambda &#123;</span><br><span class=\"line\">\tjdk System.getenv(<span class=\"string\">&quot;JAVA8_HOME&quot;</span>)</span><br><span class=\"line\">\toldJdk System.getenv(<span class=\"string\">&quot;JAVA7_HOME&quot;</span>)</span><br><span class=\"line\">\tjavaVersion JavaVersion.VERSION_1_7</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Android Studio 提供Java8 lambdas表带是代码提示支持。如果你对lambdas不熟悉，只需参照以下开始学习吧：</p>\n<ul>\n<li>任何只包含一个接口的方法都是”lambda friendly”同时代码可以被折叠成更紧凑的语法</li>\n<li>如果对参数或类似有疑问，就写一个普通的匿名内部类，然后让Android Studio 为你生成一个lambda。</li>\n</ul>\n<p><strong>当心dex方法数限制，同时避免使用过多的类库</strong> Android apps，当打包成一个dex文件时，有一个65535个应用方法强硬限制<a href=\"https://medium.com/@rotxed/dex-skys-the-limit-no-65k-methods-is-28e6cb40cf71\">[1]</a> <a href=\"http://blog.persistent.info/2014/05/per-package-method-counts-for-androids.html\">[2]</a> <a href=\"http://jakewharton.com/play-services-is-a-monolith/\">[3]</a>。<br>当你突破65k限制之后你会看到一个致命错误。因此，使用一个正常范围的类库文件，同时使用<a href=\"https://github.com/mihaip/dex-method-counts\">dex-method-counts</a><br>工具来决定哪些类库可以再65k限制之下使用，特别的避免使用Guava类库，因为它包含超过13k个方法。</p>\n<h3 id=\"Activities-and-Fragments\"><a href=\"#Activities-and-Fragments\" class=\"headerlink\" title=\"Activities and Fragments\"></a>Activities and Fragments</h3><p><a href=\"http://developer.android.com/guide/components/fragments.html\">Fragments</a>应该作为你实现UI界面默认选择。你可以重复使用Fragments用户接口来<br>组合成你的应用。我们强烈推荐使用Fragments而不是activity来呈现UI界面，理由如下：</p>\n<ul>\n<li><p><strong>提供多窗格布局解决方案</strong> Fragments 的引入主要将手机应用延伸到平板电脑，所以在平板电脑上你可能有A、B两个窗格，但是在手机应用上A、B可能分别充满<br>  整个屏幕。如果你的应用在最初就使用了fragments，那么以后将你的应用适配到其他不同尺寸屏幕就会非常简单。</p>\n</li>\n<li><p><strong>屏幕间数据通信</strong> 从一个Activity发送复杂数据(例如Java对象)到另外一个Activity，Android的API并没有提供合适的方法。不过使用Fragment，你可以使用<br>一个activity实例作为这个activity子fragments的通信通道。即使这样比Activity与Activity间的通信好，你也想考虑使用Event Bus架构，使用如<br><a href=\"https://square.github.io/otto/\">Otto</a> 或者 <a href=\"https://github.com/greenrobot/EventBus\">greenrobot EventBus</a>作为更简洁的实现。<br>如果你希望避免添加另外一个类库，RxJava同样可以实现一个Event Bus。</p>\n</li>\n<li><p><strong>Fragments 一般通用的不只有UI</strong> 你可以有一个没有界面的fragment作为Activity提供后台工作。<br>进一步你可以使用这个特性来创建一个<a href=\"http://stackoverflow.com/questions/12363790/how-many-activities-vs-fragments/12528434#12528434\">fragment 包含改变其它fragment的逻辑</a><br>而不是把这个逻辑放在activity中。</p>\n</li>\n<li><p><strong>甚至ActionBar 都可以使用内部fragment来管理</strong> 你可以选择使用一个没有UI界面的fragment来专门管理ActionBar,或者你可以选择使用在每个Fragment中<br>添加它自己的action 来作为父Activity的ActionBar.<a href=\"http://www.grokkingandroid.com/adding-action-items-from-within-fragments/\">参考</a>.</p>\n</li>\n</ul>\n<p>很不幸，我们不建议广泛的使用嵌套的<a href=\"https://developer.android.com/about/versions/android-4.2.html#NestedFragments\">fragments</a>，因为<br>有时会引起<a href=\"http://delyan.me/android-s-matryoshka-problem/\">matryoshka bugs</a>。我们只有当它有意义(例如，在水平滑动的ViewPager在<br>像屏幕一样fragment中)或者他的确是一个明智的选择的时候才广泛的使用fragment。</p>\n<p>在一个架构级别，你的APP应该有一个顶级的activity来包含绝大部分业务相关的fragment。你也可能还有一些辅助的activity ，这些辅助的activity与主activity<br>通信很简单限制在这两种方法<br><a href=\"http://developer.android.com/reference/android/content/Intent.html#setData(android.net.Uri)\"><code>Intent.setData()</code></a> 或 <a href=\"http://developer.android.com/reference/android/content/Intent.html#setAction(java.lang.String)\"><code>Intent.setAction()</code></a>或类似的方法。</p>\n<h3 id=\"Java-包结构\"><a href=\"#Java-包结构\" class=\"headerlink\" title=\"Java 包结构\"></a>Java 包结构</h3><p>Android 应用程序在架构上大致是Java中的<a href=\"http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller\">Model-View-Controller</a>结构。<br>在Android 中 Fragment和Activity通常上是控制器类(<a href=\"http://www.informit.com/articles/article.aspx?p=2126865\">http://www.informit.com/articles/article.aspx?p=2126865</a>).<br>换句话说，他们是用户接口的部分，同样也是Views视图的部分。</p>\n<p>正是因为如此，才很难严格的将fragments (或者 activities) 严格的划分成 控制器controlloers还是视图 views。<br>最还是将它们放在自己单独的 <code>fragments</code> 包中。只要你遵循之前提到的建议，Activities 则可以放在顶级目录下。<br>如果你规划有2到3个以上的activity，那么还是同样新建一个<code>activities</code>包吧。</p>\n<p>然而，这种架构可以看做是另一种形式的MVC，<br>包含要被解析API响应的JSON数据，来填充的POJO的<code>models</code>包中。<br>和一个<code>views</code>包来包含你的自定义视图、通知、导航视图，widgets等等。<br>适配器Adapter是在数据和视图之间。然而他们通常需要通过<code>getView()</code>方法来导出一些视图，<br>所以你可以将<code>adapters</code>包放在<code>views</code>包里面。</p>\n<p>一些控制器角色的类是应用程序级别的，同时是接近系统的。<br>这些类放在<code>managers</code>包下面。<br>一些繁杂的数据处理类，比如说”DateUtils”,放在<code>utils</code>包下面。<br>与后端交互负责网络处理类，放在<code>network</code>包下面。</p>\n<p>总而言之，以最接近用户而不是最接近后端去安排他们。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com.futurice.project</span><br><span class=\"line\">├─ network</span><br><span class=\"line\">├─ models</span><br><span class=\"line\">├─ managers</span><br><span class=\"line\">├─ utils</span><br><span class=\"line\">├─ fragments</span><br><span class=\"line\">└─ views</span><br><span class=\"line\">   ├─ adapters</span><br><span class=\"line\">   ├─ actionbar</span><br><span class=\"line\">   ├─ widgets</span><br><span class=\"line\">   └─ notifications</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"资源文件-Resources\"><a href=\"#资源文件-Resources\" class=\"headerlink\" title=\"资源文件 Resources\"></a>资源文件 Resources</h3><ul>\n<li><strong>命名</strong> 遵循前缀表明类型的习惯，形如<code>type_foo_bar.xml</code>。例如：<code>fragment_contact_details.xml</code>,<code>view_primary_button.xml</code>,<code>activity_main.xml</code>.</li>\n</ul>\n<p><strong>组织布局文件</strong> 如果你不确定如何排版一个布局文件，遵循一下规则可能会有帮助。</p>\n<ul>\n<li>每一个属性一行，缩进4个空格</li>\n<li><code>android:id</code> 总是作为第一个属性</li>\n<li><code>android:layout_****</code> 属性在上边</li>\n<li><code>style</code> 属性在底部</li>\n<li>关闭标签<code>/&gt;</code>单独起一行，有助于调整和添加新的属性</li>\n<li>考虑使用<a href=\"http://tools.android.com/tips/layout-designtime-attributes\">Designtime attributes 设计时布局属性</a>，Android Studio已经提供支持，而不是硬编码<code>android:text</code><br>(译者注：墙内也可以参考stormzhang的这篇博客<a href=\"http://stormzhang.com/devtools/2015/01/11/android-studio-tips1/\">链接</a>)。</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:android</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:tools</span>=<span class=\"string\">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:orientation</span>=<span class=\"string\">&quot;vertical&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/name&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">android:layout_alignParentRight</span>=<span class=\"string\">&quot;true&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">android:text</span>=<span class=\"string\">&quot;@string/name&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">style</span>=<span class=\"string\">&quot;@style/FancyText&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">layout</span>=<span class=\"string\">&quot;@layout/reusable_part&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>作为一个经验法则,<code>android:layout_****</code>属性应该在 layout XML 中定义,同时其它属性<code>android:****</code> 应放在 styler XML中。此规则也有例外，不过大体工作<br>的很好。这个思想整体是保持layout属性(positioning, margin, sizing) 和content属性在布局文件中，同时将所有的外观细节属性（colors, padding, font）放<br>在style文件中。</p>\n<p>例外有以下这些:</p>\n<ul>\n<li><code>android:id</code> 明显应该在layout文件中</li>\n<li>layout文件中<code>android:orientation</code>对于一个<code>LinearLayout</code>布局通常更有意义</li>\n<li><code>android:text</code> 由于是定义内容，应该放在layout文件中</li>\n<li>有时候将<code>android:layout_width</code> 和 <code>android:layout_height</code>属性放到一个style中作为一个通用的风格中更有意义，但是默认情况下这些应该放到layout文件中。</li>\n</ul>\n<p><strong>使用styles</strong> 几乎每个项目都需要适当的使用style文件，因为对于一个视图来说有一个重复的外观是很常见的。<br>在应用中对于大多数文本内容，最起码你应该有一个通用的style文件，例如：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;ContentText&quot;</span>&gt;</span><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\">\t<span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;android:textSize&quot;</span>&gt;</span>@dimen/font_normal<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t<span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;android:textColor&quot;</span>&gt;</span>@color/basic_black<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>应用到TextView 中:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:text</span>=<span class=\"string\">&quot;@string/price&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">style</span>=<span class=\"string\">&quot;@style/ContentText&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t/&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>你或许需要为按钮控件做同样的事情，不要停止在那里。将一组相关的和重复<code>android:****</code>的属性放到一个通用的style中。</p>\n<p><strong>将一个大的style文件分割成多个文件</strong> 你可以有多个<code>styles.xml</code> 文件。Android SDK支持其它文件，<code>styles</code>这个文件名称并没有作用，起作用的是在文件<br>里xml的<code>&lt;style&gt;</code>标签。因此你可以有多个style文件<code>styles.xml</code>,<code>style_home.xml</code>,<code>style_item_details.xml</code>,<code>styles_forms.xml</code>。<br>不用于资源文件路径需要为系统构建起的有意义，在<code>res/values</code>目录下的文件可以任意命名。</p>\n<p><strong><code>colors.xml</code>是一个调色板</strong> 在你的<code>colors.xml</code>文件中应该只是映射颜色的名称一个RGBA值，而没有其它的。不要使用它为不同的按钮来定义RGBA值。</p>\n<p><em>不要这样做</em></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;button_foreground&quot;</span>&gt;</span>#FFFFFF<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;button_background&quot;</span>&gt;</span>#2A91BD<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;comment_background_inactive&quot;</span>&gt;</span>#5F5F5F<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;comment_background_active&quot;</span>&gt;</span>#939393<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;comment_foreground&quot;</span>&gt;</span>#FFFFFF<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;comment_foreground_important&quot;</span>&gt;</span>#FF9D2F<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;comment_shadow&quot;</span>&gt;</span>#323232<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>使用这种格式，你会非常容易的开始重复定义RGBA值，这使如果需要改变基本色变的很复杂。同时，这些定义是跟一些环境关联起来的，如<code>button</code>或者<code>comment</code>,<br>应该放到一个按钮风格中，而不是在<code>color.xml</code>文件中。</p>\n<p>相反，这样做:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- grayscale --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;white&quot;</span>     &gt;</span>#FFFFFF<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;gray_light&quot;</span>&gt;</span>#DBDBDB<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;gray&quot;</span>      &gt;</span>#939393<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;gray_dark&quot;</span> &gt;</span>#5F5F5F<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;black&quot;</span>     &gt;</span>#323232<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- basic colors --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;green&quot;</span>&gt;</span>#27D34D<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;blue&quot;</span>&gt;</span>#2A91BD<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;orange&quot;</span>&gt;</span>#FF9D2F<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;red&quot;</span>&gt;</span>#FF432F<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>向应用设计者那里要这个调色板，名称不需要跟”green”, “blue”, 等等相同。<br>“brand_primary”, “brand_secondary”, “brand_negative” 这样的名字也是完全可以接受的。<br>像这样规范的颜色很容易修改或重构，会使应用一共使用了多少种不同的颜色变得非常清晰。<br>通常一个具有审美价值的UI来说，减少使用颜色的种类是非常重要的。</p>\n<p><strong>像对待colors.xml一样对待dimens.xml文件</strong> 与定义颜色调色板一样，你同时也应该定义一个空隙间隔和字体大小的“调色板”。<br>一个好的例子，如下所示：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- font sizes --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;font_larger&quot;</span>&gt;</span>22sp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;font_large&quot;</span>&gt;</span>18sp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;font_normal&quot;</span>&gt;</span>15sp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;font_small&quot;</span>&gt;</span>12sp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- typical spacing between two views --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;spacing_huge&quot;</span>&gt;</span>40dp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;spacing_large&quot;</span>&gt;</span>24dp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;spacing_normal&quot;</span>&gt;</span>14dp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;spacing_small&quot;</span>&gt;</span>10dp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;spacing_tiny&quot;</span>&gt;</span>4dp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- typical sizes of views --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;button_height_tall&quot;</span>&gt;</span>60dp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;button_height_normal&quot;</span>&gt;</span>40dp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;button_height_short&quot;</span>&gt;</span>32dp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>布局时在写 margins 和 paddings 时，你应该使用<code>spacing_****</code>尺寸格式来布局，而不是像对待String字符串一样直接写值。<br>这样写会非常有感觉，会使组织和改变风格或布局是非常容易。</p>\n<p><strong>避免深层次的视图结构</strong> 有时候为了摆放一个视图，你可能尝试添加另一个LinearLayout。你可能使用这种方法解决：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:orientation</span>=<span class=\"string\">&quot;vertical&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">...</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">...</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t<span class=\"attr\">...</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t\t<span class=\"attr\">...</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t\t&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>即使你没有非常明确的在一个layout布局文件中这样使用，如果你在Java文件中从一个view inflate（这个inflate翻译不过去，大家理解就行） 到其他views当中，也是可能会发生的。</p>\n<p>可能会导致一系列的问题。你可能会遇到性能问题，因为处理起需要处理一个复杂的UI树结构。<br>还可能会导致以下更严重的问题<a href=\"http://stackoverflow.com/questions/2762924/java-lang-stackoverflow-error-suspected-too-many-views\">StackOverflowError</a>.</p>\n<p>因此尽量保持你的视图tree：学习如何使用<a href=\"https://developer.android.com/guide/topics/ui/layout/relative.html\">RelativeLayout</a>,<br>如何 <a href=\"http://developer.android.com/training/improving-layouts/optimizing-layout.html\">optimize 你的布局</a> 和如何使用<br><a href=\"http://stackoverflow.com/questions/8834898/what-is-the-purpose-of-androids-merge-tag-in-xml-layouts\"><code>&lt;merge&gt;</code> 标签</a>.</p>\n<p><strong>小心关于WebViews的问题.</strong> 如果你必须显示一个web视图，<br>比如说对于一个新闻文章，避免做客户端处理HTML的工作，<br>最好让后端工程师协助，让他返回一个 “<em>纯</em>“ HTML。<br>当绑定WebViews到引用它的Activity,而不是绑定到ApplicationContext时。<br><a href=\"http://stackoverflow.com/questions/3130654/memory-leak-in-webview\">WebViews 也能导致内存泄露</a>。<br>当使用简单的文字或按钮时，避免使用WebView，这时使用TextView或Buttons更好。</p>\n<h3 id=\"测试框架\"><a href=\"#测试框架\" class=\"headerlink\" title=\"测试框架\"></a>测试框架</h3><p>Android SDK的测试框架还处于初级阶段，特别是关于UI测试方面。Android Gradle<br>目前实现了一个叫<a href=\"http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Testing\"><code>connectedAndroidTest</code></a>的测试，<br>它<a href=\"http://developer.android.com/reference/android/test/package-summary.html\">使用一个JUnit 为Android提供的扩展插件 extension of JUnit with helpers for Android</a>.可以跑你生成的JUnit测试，</p>\n<p><strong>只当做单元测试时使用 <a href=\"http://robolectric.org/\">Robolectric</a> ，views 不用</strong><br>它是一个最求提供”不连接设备的”为了加速开发的测试，<br>非常时候做 models 和 view models 的单元测试。<br>然而，使用Robolectric测试时不精确的，也不完全对UI测试。<br>当你对有关动画的UI元素、对话框等，测试时会有问题，<br>这主要是因为你是在 “在黑暗中工作”（在没有可控的界面情况下测试）</p>\n<p>**<a href=\"https://code.google.com/p/robotium/\">Robotium</a> 使写UI测试非常简单。<br>** 对于UI测试你不需 Robotium 跑与设备连接的测试。<br>但它可能会对你有益，是因为它有许多来帮助类的获得和分析视图，控制屏幕。<br>测试用例看起来像这样简单：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">solo.sendKey(Solo.MENU);</span><br><span class=\"line\">solo.clickOnText(<span class=\"string\">&quot;More&quot;</span>); <span class=\"comment\">// searches for the first occurence of &quot;More&quot; and clicks on it</span></span><br><span class=\"line\">solo.clickOnText(<span class=\"string\">&quot;Preferences&quot;</span>);</span><br><span class=\"line\">solo.clickOnText(<span class=\"string\">&quot;Edit File Extensions&quot;</span>);</span><br><span class=\"line\">Assert.assertTrue(solo.searchText(<span class=\"string\">&quot;rtf&quot;</span>));</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"模拟器\"><a href=\"#模拟器\" class=\"headerlink\" title=\"模拟器\"></a>模拟器</h3><p>如果你全职开发Android App,那么买一个<a href=\"http://www.genymotion.com/\">Genymotion emulator</a>license吧。<br>Genymotion 模拟器运行更快的秒帧的速度，比起典型的AVD模拟器。他有演示你APP的工具，高质量的模拟网络连接，GPS位置，等等。它同时还有理想的连接测试。<br>你若涉及适配使用很多不同的设备，买一个Genymotion 版权是比你买很多真设备便宜多的。</p>\n<p>注意：Genymotion模拟器没有装载所有的Google服务，如Google Play Store和Maps。你也可能需<br>要测试Samsung指定的API，若这样的话你还是需要购买一个真实的Samsung设备。</p>\n<h3 id=\"混淆配置\"><a href=\"#混淆配置\" class=\"headerlink\" title=\"混淆配置\"></a>混淆配置</h3><p><a href=\"http://proguard.sourceforge.net/\">ProGuard</a> 是一个在Android项目中广泛使用的压缩和混淆打包的源码的工具。</p>\n<p>你是否使用ProGuard取决你项目的配置，当你构建一个release版本的apk时，通常你应该配置gradle文件。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buildTypes &#123;</span><br><span class=\"line\">\tdebug &#123;</span><br><span class=\"line\">\t\tminifyEnabled <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\trelease &#123;</span><br><span class=\"line\">\t\tsigningConfig signingConfigs.release</span><br><span class=\"line\">\t\tminifyEnabled <span class=\"literal\">true</span></span><br><span class=\"line\">\t\tproguardFiles <span class=\"string\">&#x27;proguard-rules.pro&#x27;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>为了决定哪些代码应该被保留，哪些代码应该被混淆，你不得不指定一个或多个实体类在你的代码中。<br>这些实体应该是指定的类包含main方法，applets，midlets，activities，等等。<br>Android framework 使用一个默认的配置文件，可以在<code>SDK_HOME/tools/proguard/proguard-android.txt</code><br>目录下找到。自定义的工程指定的 project-specific 混淆规则，如在<code>my-project/app/proguard-rules.pro</code>中定义，<br>会被添加到默认的配置中。</p>\n<p>关于 ProGuard 一个普遍的问题，是看应用程序是否崩溃并报<code>ClassNotFoundException</code> 或者 <code>NoSuchFieldException</code> 或类似的异常，<br>即使编译是没有警告并运行成功。<br>这意味着以下两种可能：</p>\n<ol>\n<li>ProGuard 已经移除了类，枚举，方法，成员变量或注解，考虑是否是必要的。</li>\n<li>ProGuard 混淆了类，枚举，成员变量的名称，但是这些名字又被拿原始名称使用了，比如通过Java的反射。</li>\n</ol>\n<p>检查<code>app/build/outputs/proguard/release/usage.txt</code>文件看有问题的对象是否被移除了。<br>检查 <code>app/build/outputs/proguard/release/mapping.txt</code> 文件看有问题的对象是否被混淆了。</p>\n<p>In order to prevent ProGuard from <em>stripping away</em> needed classes or class members, add a <code>keep</code> options to your proguard config:<br>以防 ProGuard <em>剥离</em> 需要的类和类成员，添加一个 <code>keep</code>选项在你的 proguard 配置文件中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-keep class com.futurice.project.MyClass &#123; *; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>防止 ProGuard <em>混淆</em> 一些类和成员，添加 <code>keepnames</code>:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-keepnames class com.futurice.project.MyClass &#123; *; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>更多例子请参考<a href=\"http://proguard.sourceforge.net/#manual/examples.html\">Proguard</a>。</p>\n<p><strong>在构建项目之初，发布一个版本</strong> 来检查ProGuard规则是否正确的保持了重要的部分。<br>同时无论何时你添加了新的类库，做一个发布版本，同时apk在设备上跑起来测试一下。<br>不要等到你的app要发布 “1.0”版本了才做版本发布，那时候你可能会碰到好多意想不到的异常，需要一些时间去修复他们。</p>\n<p><strong>Tips</strong>每次发布新版本都要写 <code>mapping.txt</code>。每发布一个版本，如果用户遇到一个bug，同时提交了一个混淆过的堆栈跟踪。<br>通过保留<code>mapping.txt</code>文件，来确定你可以调试的问题。</p>\n<p><strong>DexGuard</strong> 如果你需要核心工具来优化，和专门混淆的发布代码，考虑使用<a href=\"http://www.saikoa.com/dexguard\">DexGuard</a>,<br>一个商业软件，ProGuard 也是有他们团队开发的。<br>它会很容易将Dex文件分割，来解决65K个方法限制问题。</p>\n<p>###数据存储</p>\n<p><strong>SharedPreferences</strong></p>\n<p>如果你只是需要持久化存储简单的标记位，并且你的应用运行在单一进程，那么SharedPreferences可能就满足了你的需求。它是一个非常好的选择。</p>\n<p>这里有两个使你可能不使用SharedPreferences的原因：</p>\n<ul>\n<li>Performance: Your data is complex or there is a lot of it</li>\n<li>性能问题：你的很多数据结构负责的数据需要存储。</li>\n<li>Multiple processes accessing the data: You have widgets or remote services that run in their own processes and require synchronized data</li>\n<li>多线程访问数据：你有多个控件或者运行在各自线程上的远程的服务需要同步数据。</li>\n</ul>\n<p><strong>ContentProviders</strong></p>\n<p>如果SharedPreferences不足以满足你的需求，那么你可以使用平台标准的ContentProviders，它不仅快速，并且线程安全。</p>\n<p>使用ContentProviders的唯一问题是建立他们需要大量的模板代码，并且少有高质量的教程。如果可以，我们可以通过使用第三方库Schematic，极大降低了冗余操作，去生成ContentProviders.</p>\n<p>你可能仍然需要亲自写一些解析代码去从Sqlite读取数据对象，或者进行相反的操作。如果可以序列化数据对象，例如通过Gson，只持久化存储最终是字符串。通过这种方式虽然会降低性能，但是从另一个角度来讲，你不需要为每一个数据结构声明表结构。</p>\n<p><strong>使用ORM</strong>我们通常不推荐使用对象关系映射第三方库除非你有非常复杂的数据结构，并且你确定你真的需要它。他们通常比较复杂，并且需要时间去学习。如果你决定了在你的应用中使用ORM，你应该注意它是否是线程安全的，而对于目前大多数ORM解决方案都是非线程安全的。</p>\n<p><strong>使用Stetho</strong>Stetho 是一个Facebook 开源的Android调试工具，它是Chrome Developer Tools的扩展。通过它可以检测应用的网络情况。它也允许你可以检测应用的数据库，shared preferences。但是，你应该确保Stetho只有在Debug状态下得以开启，而不是在正式发布版本中。</p>\n<p><strong>使用LeakCanary</strong>LeakCanary 是可以在应用运行中检测，定位内存泄露的Java库。使用它应是你开发应用过程中的一部分。更多详细的配置和使用情况请参照wiki。你只需要记得它在你的正式版本中你是不需要配置的。</p>\n<h3 id=\"致谢\"><a href=\"#致谢\" class=\"headerlink\" title=\"致谢\"></a>致谢</h3><p>感谢Antti Lammi, Joni Karppinen, Peter Tackage, Timo Tuominen, Vera Izrailit, Vihtori Mäntylä, Mark Voit, Andre Medeiros, Paul Houghton 这些人和Futurice 开发者分享他们的Android开发经验。</p>\n<h3 id=\"License\"><a href=\"#License\" class=\"headerlink\" title=\"License\"></a>License</h3><p><a href=\"www.futurice.com\">Futurice Oy</a><br>Creative Commons Attribution 4.0 International (CC BY 4.0)</p>\n<h3 id=\"Translation\"><a href=\"#Translation\" class=\"headerlink\" title=\"Translation\"></a>Translation</h3><p>Translated to Chinese by <a href=\"https://github.com/andyiac\">andyiac</a></p>\n","more":"<h1 id=\"Android-开发最佳实践\"><a href=\"#Android-开发最佳实践\" class=\"headerlink\" title=\"Android 开发最佳实践\"></a>Android 开发最佳实践</h1><blockquote>\n<p>原文地址:<a href=\"https://github.com/futurice/android-best-practices\">android-best-practices</a></p>\n</blockquote>\n<p>从<a href=\"http://www.futurice.com/\">Futurice</a>公司Android开发者中学到的经验。<br>遵循以下准则，避免重复发明轮子。若你对开发iOS或Windows Phone 有兴趣，<br>请看<a href=\"https://github.com/futurice/ios-good-practices\"><strong>iOS Good Practices</strong></a> 和 <a href=\"https://github.com/futurice/win-client-dev-good-practices\"><strong>Windows client Good Practices</strong></a> 这两篇文章。</p>\n<h2 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h2><ul>\n<li>使用 Gradle 和它推荐的工程结构</li>\n<li>把密码和敏感数据放在gradle.properties</li>\n<li>不要自己写 HTTP 客户端,使用Volley或OkHttp库</li>\n<li>使用Jackson库解析JSON数据</li>\n<li>避免使用Guava同时使用一些类库来避免<em>65k method limit</em>（一个Android程序中最多能执行65536个方法）</li>\n<li>使用 Fragments来呈现UI视图</li>\n<li>使用 Activities 只是为了管理 Fragments</li>\n<li>Layout 布局是 XMLs代码，组织好它们</li>\n<li>在layoutout XMLs布局时，使用styles文件来避免使用重复的属性</li>\n<li>使用多个style文件来避免单一的一个大style文件</li>\n<li>保持你的colors.xml 简短DRY(不要重复自己)，只是定义调色板</li>\n<li>总是使用dimens.xml DRY(不要重复自己)，定义通用常数</li>\n<li>不要做一个深层次的ViewGroup</li>\n<li>在使用WebViews时避免在客户端做处理，当心内存泄露</li>\n<li>使用Robolectric单元测试，Robotium 做UI测试</li>\n<li>使用Genymotion 作为你的模拟器</li>\n<li>总是使用ProGuard 和 DexGuard混淆来项目</li>\n</ul>\n<h3 id=\"Android-SDK\"><a href=\"#Android-SDK\" class=\"headerlink\" title=\"Android SDK\"></a>Android SDK</h3><p>将你的<a href=\"https://developer.android.com/sdk/installing/index.html?pkg=tools\">Android SDK</a>放在你的home目录或其他应用程序无关的位置。<br>当安装有些包含SDK的IDE的时候，可能会将SDK放在IDE同一目录下，当你需要升级（或重新安装）IDE或更换的IDE时，会非常麻烦。<br>此外，如果你的IDE是在普通用户下运行，而不是在root下运行，还要避免把SDK放到一下需要sudo权限的系统级别目录下。</p>\n<h3 id=\"构建系统\"><a href=\"#构建系统\" class=\"headerlink\" title=\"构建系统\"></a>构建系统</h3><p>你的默认编译环境应该是<a href=\"http://tools.android.com/tech-docs/new-build-system\">Gradle</a>.<br>Ant 有很多限制，也很冗余。使用Gradle，完成以下工作很方便：</p>\n<ul>\n<li>构建APP不同版本的变种</li>\n<li>制作简单类似脚本的任务</li>\n<li>管理和下载依赖</li>\n<li>自定义秘钥</li>\n<li>更多</li>\n</ul>\n<p>同时，Android Gradle插件作为新标准的构建系统正在被Google积极的开发。</p>\n<h3 id=\"工程结构\"><a href=\"#工程结构\" class=\"headerlink\" title=\"工程结构\"></a>工程结构</h3><p>有两种流行的结构：老的Ant &amp; Eclipse ADT 工程结构，和新的Gradle &amp; Android Studio 工程结构，<br>你应该选择新的工程结构，如果你的工程还在使用老的结构，考虑放弃吧，将工程移植到新的结构。</p>\n<p>老的结构:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">old-structure</span><br><span class=\"line\">├─ assets</span><br><span class=\"line\">├─ libs</span><br><span class=\"line\">├─ res</span><br><span class=\"line\">├─ src</span><br><span class=\"line\">│  └─ com/futurice/project</span><br><span class=\"line\">├─ AndroidManifest.xml</span><br><span class=\"line\">├─ build.gradle</span><br><span class=\"line\">├─ project.properties</span><br><span class=\"line\">└─ proguard-rules.pro</span><br></pre></td></tr></table></figure>\n\n<p>新的结构</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new-structure</span><br><span class=\"line\">├─ library-foobar</span><br><span class=\"line\">├─ app</span><br><span class=\"line\">│  ├─ libs</span><br><span class=\"line\">│  ├─ src</span><br><span class=\"line\">│  │  ├─ androidTest</span><br><span class=\"line\">│  │  │  └─ java</span><br><span class=\"line\">│  │  │     └─ com/futurice/project</span><br><span class=\"line\">│  │  └─ main</span><br><span class=\"line\">│  │     ├─ java</span><br><span class=\"line\">│  │     │  └─ com/futurice/project</span><br><span class=\"line\">│  │     ├─ res</span><br><span class=\"line\">│  │     └─ AndroidManifest.xml</span><br><span class=\"line\">│  ├─ build.gradle</span><br><span class=\"line\">│  └─ proguard-rules.pro</span><br><span class=\"line\">├─ build.gradle</span><br><span class=\"line\">└─ settings.gradle</span><br></pre></td></tr></table></figure>\n\n<p>主要的区别在于，新的结构明确的分开了’source sets’ (<code>main</code>,<code>androidTest</code>)，这是Gradle的一个理念。<br>通过这个你可以做到，例如，添加源组‘paid’和‘free’在src中，让你的应用程序具有付费和免费的两种模式的源代码。</p>\n<p>你的项目引用第三方项目库时（例如，library-foobar），拥有一个顶级包名<code>app</code>从第三方库项目区分你的应用程序是非常有用的。<br>然后<code>settings.gradle</code>不断引用这些库项目，其中<code>app/build.gradle</code>可以引用。</p>\n<h3 id=\"Gradle-配置\"><a href=\"#Gradle-配置\" class=\"headerlink\" title=\"Gradle 配置\"></a>Gradle 配置</h3><p><strong>常用结构</strong> 参考<a href=\"http://tools.android.com/tech-docs/new-build-system/user-guide\">Google’s guide on Gradle for Android</a></p>\n<p><strong>小任务</strong> 除了(shell, Python, Perl, etc)这些脚本语言，你也可以使用Gradle 制作任务。<br>更多信息请参考<a href=\"http://www.gradle.org/docs/current/userguide/userguide_single.html#N10CBF\">Gradle’s documentation</a>。</p>\n<p><strong>密码</strong> 在做版本release时你app的 <code>build.gradle</code>你需要定义 <code>signingConfigs</code>.此时你应该避免以下内容：</p>\n<p><em>不要做这个</em> . 这会出现在版本控制中。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">signingConfigs &#123;</span><br><span class=\"line\">\trelease &#123;</span><br><span class=\"line\">\t\tstoreFile file(<span class=\"string\">&quot;myapp.keystore&quot;</span>)</span><br><span class=\"line\">\t\tstorePassword <span class=\"string\">&quot;password123&quot;</span></span><br><span class=\"line\">\t\tkeyAlias <span class=\"string\">&quot;thekey&quot;</span></span><br><span class=\"line\">\t\tkeyPassword <span class=\"string\">&quot;password789&quot;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而是，建立一个不加入版本控制系统的<code>gradle.properties</code>文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">KEYSTORE_PASSWORD=password123</span><br><span class=\"line\">KEY_PASSWORD=password789</span><br></pre></td></tr></table></figure>\n\n\n<p>那个文件是gradle自动引入的，你可以在<code>buld.gradle</code>文件中使用，例如：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">signingConfigs &#123;</span><br><span class=\"line\">\trelease &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tstoreFile file(<span class=\"string\">&quot;myapp.keystore&quot;</span>)</span><br><span class=\"line\">\t\t\tstorePassword KEYSTORE_PASSWORD</span><br><span class=\"line\">\t\t\tkeyAlias <span class=\"string\">&quot;thekey&quot;</span></span><br><span class=\"line\">\t\t\tkeyPassword KEY_PASSWORD</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (ex) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InvalidUserDataException(<span class=\"string\">&quot;You should define KEYSTORE_PASSWORD and KEY_PASSWORD in gradle.properties.&quot;</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p><strong>使用 Maven 依赖方案代替使用导入jar包方案</strong> 如果在你的项目中你明确使用某些<br>jar文件，那么它们可能成为固定的版本，如<code>2.1.1</code>.下载jar包更新他们是很繁琐的，<br>这个问题Maven很好的解决了，这在Android Gradle构建中也是推荐的方法。你可<br>以指定版本的一个范围，如<code>2.1.+</code>,然后Maven会自动升级到制定的最新版本，例如：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">\tcompile <span class=\"string\">&#x27;com.netflix.rxjava:rxjava-core:0.19.+&#x27;</span></span><br><span class=\"line\">\tcompile <span class=\"string\">&#x27;com.netflix.rxjava:rxjava-android:0.19.+&#x27;</span></span><br><span class=\"line\">\tcompile <span class=\"string\">&#x27;com.fasterxml.jackson.core:jackson-databind:2.4.+&#x27;</span></span><br><span class=\"line\">\tcompile <span class=\"string\">&#x27;com.fasterxml.jackson.core:jackson-core:2.4.+&#x27;</span></span><br><span class=\"line\">\tcompile <span class=\"string\">&#x27;com.fasterxml.jackson.core:jackson-annotations:2.4.+&#x27;</span></span><br><span class=\"line\">\tcompile <span class=\"string\">&#x27;com.squareup.okhttp:okhttp:2.0.+&#x27;</span></span><br><span class=\"line\">\tcompile <span class=\"string\">&#x27;com.squareup.okhttp:okhttp-urlconnection:2.0.+&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"IDEs-and-text-editors\"><a href=\"#IDEs-and-text-editors\" class=\"headerlink\" title=\"IDEs and text editors\"></a>IDEs and text editors</h3><h3 id=\"IDE集成开发环境和文本编辑器\"><a href=\"#IDE集成开发环境和文本编辑器\" class=\"headerlink\" title=\"IDE集成开发环境和文本编辑器\"></a>IDE集成开发环境和文本编辑器</h3><p><strong>无论使用什么编辑器，一定要构建一个良好的工程结构。</strong> 编辑器每个人都有自己的<br>选择，让你的编辑器根据工程结构和构建系统运作，那是你自己的责任。</p>\n<p>当下首推<a href=\"https://developer.android.com/sdk/installing/studio.html\">Android Studio</a>,因为他是由谷歌开发，很好地支持Gradle，包含很多有用的检测和分析工具，默认使用最新的工程结构，它就是为Android开发定制的。</p>\n<p>你也可以使用纯文版编辑器如Vim，Sublime Text，或者Emacs。如果那样的话，你需要使用Gradle和<code>adb</code>命令行。</p>\n<p>不再推荐使用Eclipse和ADT开发，因为<a href=\"https://android-developers.googleblog.com/2015/06/an-update-on-eclipse-android-developer.html\">谷歌在2015年年末结束了对ADT的支持</a>，并呼吁开发者尽快迁移到Android Studio。</p>\n<p>无论你使用何种开发工具，避免将你的编辑器配置文件（比如Android Studio的iml文件）加入到版本控制，因为这些文件通常包含与本地机器有关的配置，可能会影响你的同事。</p>\n<p>最后，善待其他开发者，不要强制改变他们的开发工具和偏好。</p>\n<h3 id=\"类库\"><a href=\"#类库\" class=\"headerlink\" title=\"类库\"></a>类库</h3><p><strong><a href=\"http://wiki.fasterxml.com/JacksonHome\">Jackson</a></strong> 是一个将java对象转换成JSON与JSON转化java类的类库。<a href=\"https://code.google.com/p/google-gson/\">Gson</a><br>是解决这个问题的流行方案，然而我们发现Jackson更高效,因为它支持替代的方法处理JSON:流、内存树模型,和传统JSON-POJO数据绑定。不过，请记住，<br>Jsonkson库比起GSON更大，所以根据你的情况选择，你可能选择GSON来避免APP 65k个方法的限制。其它选择: <a href=\"https://code.google.com/p/json-smart/\">Json-smart</a> and <a href=\"https://github.com/RichardHightower/boon/wiki/Boon-JSON-in-five-minutes\">Boon JSON</a></p>\n<p><strong>网络请求，缓存，图片</strong> 执行请求后端服务器，有几种交互的解决方案，你应该考虑实现你自己的网络客户端。使用 <a href=\"https://android.googlesource.com/platform/frameworks/volley\">Volley</a><br>或<a href=\"http://square.github.io/retrofit/\">Retrofit</a>。Volley 同时提供图片缓存类。如果你选择使用Retrofit,那么考虑使用<a href=\"http://square.github.io/picasso/\">Picasso</a><br>来加载图片和缓存，同时使用<a href=\"http://square.github.io/okhttp/\">OkHttp</a>作为高效的网络请求。Retrofit，Picasso和OkHttp都是同一家公司开发（注：<br>是由<a href=\"https://github.com/square\">Square</a> 公司开发），所以它们能很好的在一起运行。<a href=\"http://stackoverflow.com/questions/24375043/how-to-implement-android-volley-with-okhttp-2-0/24951835#24951835\">OkHttp 同样可以和Volley在一起使用 Volley</a>.</p>\n<p><strong>RxJava</strong> 是函数式反应性的一个类库，换句话说，能处理异步的事件。<br>这是一个强大的和有前途的模式，同时也可能会造成混淆，因为它是如此的不同。<br>我们建议在使用这个库架构整个应用程序之前要谨慎考虑。<br>有一些项目是使用RxJava完成的，如果你需要帮助可以跟这些人取得联系：<br>Timo Tuominen, Olli Salonen, Andre Medeiros, Mark Voit, Antti Lammi, Vera Izrailit, Juha Ristolainen.<br>我们也写了一些博客：<br><a href=\"http://blog.futurice.com/tech-pick-of-the-week-rx-for-net-and-rxjava-for-android\">[1]</a>, <a href=\"http://blog.futurice.com/top-7-tips-for-rxjava-on-android\">[2]</a>,<br><a href=\"https://gist.github.com/staltz/868e7e9bc2a7b8c1f754\">[3]</a>,<br><a href=\"http://blog.futurice.com/android-development-has-its-own-swift\">[4]</a>.</p>\n<p>如若你之前有使用过Rx的经历，开始从API响应应用它。<br>另外，从简单的UI事件处理开始运用，如单击事件或在搜索栏输入事件。<br>若对你的Rx技术有信心，同时想要将它应用到你的整体架构中，那么请在复杂的部分写好Javadocs文档。<br>请记住其他不熟悉RxJava的开发人员，可能会非常难理解整个项目。<br>尽你的的全力帮助他们理解你的代码和Rx。</p>\n<p><strong><a href=\"https://github.com/evant/gradle-retrolambda\">Retrolambda</a></strong> 是一个在Android和预JDK8平台上的使用Lambda表达式语法的Java类库。<br>它有助于保持你代码的紧凑性和可读性，特别当你使用如RxJava函数风格编程时。<br>使用它时先安装JDK8，在Android Studio工程结构对话框中把它设置成为SDK路径，同时设置<code>JAVA8_HOME</code>和<code>JAVA7_HOME</code>环境变量，<br>然后在工程根目录下配置 build.gradle：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">\tclasspath <span class=\"string\">&#x27;me.tatarka:gradle-retrolambda:2.4.+&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>同时在每个module 的build.gradle中添加</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply <span class=\"attr\">plugin:</span> <span class=\"string\">&#x27;retrolambda&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">android &#123;</span><br><span class=\"line\">\tcompileOptions &#123;</span><br><span class=\"line\">\tsourceCompatibility JavaVersion.VERSION_1_8</span><br><span class=\"line\">\ttargetCompatibility JavaVersion.VERSION_1_8</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">retrolambda &#123;</span><br><span class=\"line\">\tjdk System.getenv(<span class=\"string\">&quot;JAVA8_HOME&quot;</span>)</span><br><span class=\"line\">\toldJdk System.getenv(<span class=\"string\">&quot;JAVA7_HOME&quot;</span>)</span><br><span class=\"line\">\tjavaVersion JavaVersion.VERSION_1_7</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Android Studio 提供Java8 lambdas表带是代码提示支持。如果你对lambdas不熟悉，只需参照以下开始学习吧：</p>\n<ul>\n<li>任何只包含一个接口的方法都是”lambda friendly”同时代码可以被折叠成更紧凑的语法</li>\n<li>如果对参数或类似有疑问，就写一个普通的匿名内部类，然后让Android Studio 为你生成一个lambda。</li>\n</ul>\n<p><strong>当心dex方法数限制，同时避免使用过多的类库</strong> Android apps，当打包成一个dex文件时，有一个65535个应用方法强硬限制<a href=\"https://medium.com/@rotxed/dex-skys-the-limit-no-65k-methods-is-28e6cb40cf71\">[1]</a> <a href=\"http://blog.persistent.info/2014/05/per-package-method-counts-for-androids.html\">[2]</a> <a href=\"http://jakewharton.com/play-services-is-a-monolith/\">[3]</a>。<br>当你突破65k限制之后你会看到一个致命错误。因此，使用一个正常范围的类库文件，同时使用<a href=\"https://github.com/mihaip/dex-method-counts\">dex-method-counts</a><br>工具来决定哪些类库可以再65k限制之下使用，特别的避免使用Guava类库，因为它包含超过13k个方法。</p>\n<h3 id=\"Activities-and-Fragments\"><a href=\"#Activities-and-Fragments\" class=\"headerlink\" title=\"Activities and Fragments\"></a>Activities and Fragments</h3><p><a href=\"http://developer.android.com/guide/components/fragments.html\">Fragments</a>应该作为你实现UI界面默认选择。你可以重复使用Fragments用户接口来<br>组合成你的应用。我们强烈推荐使用Fragments而不是activity来呈现UI界面，理由如下：</p>\n<ul>\n<li><p><strong>提供多窗格布局解决方案</strong> Fragments 的引入主要将手机应用延伸到平板电脑，所以在平板电脑上你可能有A、B两个窗格，但是在手机应用上A、B可能分别充满<br>  整个屏幕。如果你的应用在最初就使用了fragments，那么以后将你的应用适配到其他不同尺寸屏幕就会非常简单。</p>\n</li>\n<li><p><strong>屏幕间数据通信</strong> 从一个Activity发送复杂数据(例如Java对象)到另外一个Activity，Android的API并没有提供合适的方法。不过使用Fragment，你可以使用<br>一个activity实例作为这个activity子fragments的通信通道。即使这样比Activity与Activity间的通信好，你也想考虑使用Event Bus架构，使用如<br><a href=\"https://square.github.io/otto/\">Otto</a> 或者 <a href=\"https://github.com/greenrobot/EventBus\">greenrobot EventBus</a>作为更简洁的实现。<br>如果你希望避免添加另外一个类库，RxJava同样可以实现一个Event Bus。</p>\n</li>\n<li><p><strong>Fragments 一般通用的不只有UI</strong> 你可以有一个没有界面的fragment作为Activity提供后台工作。<br>进一步你可以使用这个特性来创建一个<a href=\"http://stackoverflow.com/questions/12363790/how-many-activities-vs-fragments/12528434#12528434\">fragment 包含改变其它fragment的逻辑</a><br>而不是把这个逻辑放在activity中。</p>\n</li>\n<li><p><strong>甚至ActionBar 都可以使用内部fragment来管理</strong> 你可以选择使用一个没有UI界面的fragment来专门管理ActionBar,或者你可以选择使用在每个Fragment中<br>添加它自己的action 来作为父Activity的ActionBar.<a href=\"http://www.grokkingandroid.com/adding-action-items-from-within-fragments/\">参考</a>.</p>\n</li>\n</ul>\n<p>很不幸，我们不建议广泛的使用嵌套的<a href=\"https://developer.android.com/about/versions/android-4.2.html#NestedFragments\">fragments</a>，因为<br>有时会引起<a href=\"http://delyan.me/android-s-matryoshka-problem/\">matryoshka bugs</a>。我们只有当它有意义(例如，在水平滑动的ViewPager在<br>像屏幕一样fragment中)或者他的确是一个明智的选择的时候才广泛的使用fragment。</p>\n<p>在一个架构级别，你的APP应该有一个顶级的activity来包含绝大部分业务相关的fragment。你也可能还有一些辅助的activity ，这些辅助的activity与主activity<br>通信很简单限制在这两种方法<br><a href=\"http://developer.android.com/reference/android/content/Intent.html#setData(android.net.Uri)\"><code>Intent.setData()</code></a> 或 <a href=\"http://developer.android.com/reference/android/content/Intent.html#setAction(java.lang.String)\"><code>Intent.setAction()</code></a>或类似的方法。</p>\n<h3 id=\"Java-包结构\"><a href=\"#Java-包结构\" class=\"headerlink\" title=\"Java 包结构\"></a>Java 包结构</h3><p>Android 应用程序在架构上大致是Java中的<a href=\"http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller\">Model-View-Controller</a>结构。<br>在Android 中 Fragment和Activity通常上是控制器类(<a href=\"http://www.informit.com/articles/article.aspx?p=2126865\">http://www.informit.com/articles/article.aspx?p=2126865</a>).<br>换句话说，他们是用户接口的部分，同样也是Views视图的部分。</p>\n<p>正是因为如此，才很难严格的将fragments (或者 activities) 严格的划分成 控制器controlloers还是视图 views。<br>最还是将它们放在自己单独的 <code>fragments</code> 包中。只要你遵循之前提到的建议，Activities 则可以放在顶级目录下。<br>如果你规划有2到3个以上的activity，那么还是同样新建一个<code>activities</code>包吧。</p>\n<p>然而，这种架构可以看做是另一种形式的MVC，<br>包含要被解析API响应的JSON数据，来填充的POJO的<code>models</code>包中。<br>和一个<code>views</code>包来包含你的自定义视图、通知、导航视图，widgets等等。<br>适配器Adapter是在数据和视图之间。然而他们通常需要通过<code>getView()</code>方法来导出一些视图，<br>所以你可以将<code>adapters</code>包放在<code>views</code>包里面。</p>\n<p>一些控制器角色的类是应用程序级别的，同时是接近系统的。<br>这些类放在<code>managers</code>包下面。<br>一些繁杂的数据处理类，比如说”DateUtils”,放在<code>utils</code>包下面。<br>与后端交互负责网络处理类，放在<code>network</code>包下面。</p>\n<p>总而言之，以最接近用户而不是最接近后端去安排他们。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com.futurice.project</span><br><span class=\"line\">├─ network</span><br><span class=\"line\">├─ models</span><br><span class=\"line\">├─ managers</span><br><span class=\"line\">├─ utils</span><br><span class=\"line\">├─ fragments</span><br><span class=\"line\">└─ views</span><br><span class=\"line\">   ├─ adapters</span><br><span class=\"line\">   ├─ actionbar</span><br><span class=\"line\">   ├─ widgets</span><br><span class=\"line\">   └─ notifications</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"资源文件-Resources\"><a href=\"#资源文件-Resources\" class=\"headerlink\" title=\"资源文件 Resources\"></a>资源文件 Resources</h3><ul>\n<li><strong>命名</strong> 遵循前缀表明类型的习惯，形如<code>type_foo_bar.xml</code>。例如：<code>fragment_contact_details.xml</code>,<code>view_primary_button.xml</code>,<code>activity_main.xml</code>.</li>\n</ul>\n<p><strong>组织布局文件</strong> 如果你不确定如何排版一个布局文件，遵循一下规则可能会有帮助。</p>\n<ul>\n<li>每一个属性一行，缩进4个空格</li>\n<li><code>android:id</code> 总是作为第一个属性</li>\n<li><code>android:layout_****</code> 属性在上边</li>\n<li><code>style</code> 属性在底部</li>\n<li>关闭标签<code>/&gt;</code>单独起一行，有助于调整和添加新的属性</li>\n<li>考虑使用<a href=\"http://tools.android.com/tips/layout-designtime-attributes\">Designtime attributes 设计时布局属性</a>，Android Studio已经提供支持，而不是硬编码<code>android:text</code><br>(译者注：墙内也可以参考stormzhang的这篇博客<a href=\"http://stormzhang.com/devtools/2015/01/11/android-studio-tips1/\">链接</a>)。</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:android</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:tools</span>=<span class=\"string\">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:orientation</span>=<span class=\"string\">&quot;vertical&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/name&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">android:layout_alignParentRight</span>=<span class=\"string\">&quot;true&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">android:text</span>=<span class=\"string\">&quot;@string/name&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">style</span>=<span class=\"string\">&quot;@style/FancyText&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">layout</span>=<span class=\"string\">&quot;@layout/reusable_part&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>作为一个经验法则,<code>android:layout_****</code>属性应该在 layout XML 中定义,同时其它属性<code>android:****</code> 应放在 styler XML中。此规则也有例外，不过大体工作<br>的很好。这个思想整体是保持layout属性(positioning, margin, sizing) 和content属性在布局文件中，同时将所有的外观细节属性（colors, padding, font）放<br>在style文件中。</p>\n<p>例外有以下这些:</p>\n<ul>\n<li><code>android:id</code> 明显应该在layout文件中</li>\n<li>layout文件中<code>android:orientation</code>对于一个<code>LinearLayout</code>布局通常更有意义</li>\n<li><code>android:text</code> 由于是定义内容，应该放在layout文件中</li>\n<li>有时候将<code>android:layout_width</code> 和 <code>android:layout_height</code>属性放到一个style中作为一个通用的风格中更有意义，但是默认情况下这些应该放到layout文件中。</li>\n</ul>\n<p><strong>使用styles</strong> 几乎每个项目都需要适当的使用style文件，因为对于一个视图来说有一个重复的外观是很常见的。<br>在应用中对于大多数文本内容，最起码你应该有一个通用的style文件，例如：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;ContentText&quot;</span>&gt;</span><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\">\t<span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;android:textSize&quot;</span>&gt;</span>@dimen/font_normal<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t<span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;android:textColor&quot;</span>&gt;</span>@color/basic_black<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>应用到TextView 中:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:text</span>=<span class=\"string\">&quot;@string/price&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">style</span>=<span class=\"string\">&quot;@style/ContentText&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t/&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>你或许需要为按钮控件做同样的事情，不要停止在那里。将一组相关的和重复<code>android:****</code>的属性放到一个通用的style中。</p>\n<p><strong>将一个大的style文件分割成多个文件</strong> 你可以有多个<code>styles.xml</code> 文件。Android SDK支持其它文件，<code>styles</code>这个文件名称并没有作用，起作用的是在文件<br>里xml的<code>&lt;style&gt;</code>标签。因此你可以有多个style文件<code>styles.xml</code>,<code>style_home.xml</code>,<code>style_item_details.xml</code>,<code>styles_forms.xml</code>。<br>不用于资源文件路径需要为系统构建起的有意义，在<code>res/values</code>目录下的文件可以任意命名。</p>\n<p><strong><code>colors.xml</code>是一个调色板</strong> 在你的<code>colors.xml</code>文件中应该只是映射颜色的名称一个RGBA值，而没有其它的。不要使用它为不同的按钮来定义RGBA值。</p>\n<p><em>不要这样做</em></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;button_foreground&quot;</span>&gt;</span>#FFFFFF<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;button_background&quot;</span>&gt;</span>#2A91BD<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;comment_background_inactive&quot;</span>&gt;</span>#5F5F5F<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;comment_background_active&quot;</span>&gt;</span>#939393<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;comment_foreground&quot;</span>&gt;</span>#FFFFFF<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;comment_foreground_important&quot;</span>&gt;</span>#FF9D2F<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;comment_shadow&quot;</span>&gt;</span>#323232<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>使用这种格式，你会非常容易的开始重复定义RGBA值，这使如果需要改变基本色变的很复杂。同时，这些定义是跟一些环境关联起来的，如<code>button</code>或者<code>comment</code>,<br>应该放到一个按钮风格中，而不是在<code>color.xml</code>文件中。</p>\n<p>相反，这样做:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- grayscale --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;white&quot;</span>     &gt;</span>#FFFFFF<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;gray_light&quot;</span>&gt;</span>#DBDBDB<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;gray&quot;</span>      &gt;</span>#939393<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;gray_dark&quot;</span> &gt;</span>#5F5F5F<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;black&quot;</span>     &gt;</span>#323232<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- basic colors --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;green&quot;</span>&gt;</span>#27D34D<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;blue&quot;</span>&gt;</span>#2A91BD<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;orange&quot;</span>&gt;</span>#FF9D2F<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;red&quot;</span>&gt;</span>#FF432F<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>向应用设计者那里要这个调色板，名称不需要跟”green”, “blue”, 等等相同。<br>“brand_primary”, “brand_secondary”, “brand_negative” 这样的名字也是完全可以接受的。<br>像这样规范的颜色很容易修改或重构，会使应用一共使用了多少种不同的颜色变得非常清晰。<br>通常一个具有审美价值的UI来说，减少使用颜色的种类是非常重要的。</p>\n<p><strong>像对待colors.xml一样对待dimens.xml文件</strong> 与定义颜色调色板一样，你同时也应该定义一个空隙间隔和字体大小的“调色板”。<br>一个好的例子，如下所示：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- font sizes --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;font_larger&quot;</span>&gt;</span>22sp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;font_large&quot;</span>&gt;</span>18sp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;font_normal&quot;</span>&gt;</span>15sp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;font_small&quot;</span>&gt;</span>12sp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- typical spacing between two views --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;spacing_huge&quot;</span>&gt;</span>40dp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;spacing_large&quot;</span>&gt;</span>24dp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;spacing_normal&quot;</span>&gt;</span>14dp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;spacing_small&quot;</span>&gt;</span>10dp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;spacing_tiny&quot;</span>&gt;</span>4dp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- typical sizes of views --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;button_height_tall&quot;</span>&gt;</span>60dp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;button_height_normal&quot;</span>&gt;</span>40dp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;button_height_short&quot;</span>&gt;</span>32dp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>布局时在写 margins 和 paddings 时，你应该使用<code>spacing_****</code>尺寸格式来布局，而不是像对待String字符串一样直接写值。<br>这样写会非常有感觉，会使组织和改变风格或布局是非常容易。</p>\n<p><strong>避免深层次的视图结构</strong> 有时候为了摆放一个视图，你可能尝试添加另一个LinearLayout。你可能使用这种方法解决：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:orientation</span>=<span class=\"string\">&quot;vertical&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">...</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">...</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t<span class=\"attr\">...</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t\t<span class=\"attr\">...</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t\t&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>即使你没有非常明确的在一个layout布局文件中这样使用，如果你在Java文件中从一个view inflate（这个inflate翻译不过去，大家理解就行） 到其他views当中，也是可能会发生的。</p>\n<p>可能会导致一系列的问题。你可能会遇到性能问题，因为处理起需要处理一个复杂的UI树结构。<br>还可能会导致以下更严重的问题<a href=\"http://stackoverflow.com/questions/2762924/java-lang-stackoverflow-error-suspected-too-many-views\">StackOverflowError</a>.</p>\n<p>因此尽量保持你的视图tree：学习如何使用<a href=\"https://developer.android.com/guide/topics/ui/layout/relative.html\">RelativeLayout</a>,<br>如何 <a href=\"http://developer.android.com/training/improving-layouts/optimizing-layout.html\">optimize 你的布局</a> 和如何使用<br><a href=\"http://stackoverflow.com/questions/8834898/what-is-the-purpose-of-androids-merge-tag-in-xml-layouts\"><code>&lt;merge&gt;</code> 标签</a>.</p>\n<p><strong>小心关于WebViews的问题.</strong> 如果你必须显示一个web视图，<br>比如说对于一个新闻文章，避免做客户端处理HTML的工作，<br>最好让后端工程师协助，让他返回一个 “<em>纯</em>“ HTML。<br>当绑定WebViews到引用它的Activity,而不是绑定到ApplicationContext时。<br><a href=\"http://stackoverflow.com/questions/3130654/memory-leak-in-webview\">WebViews 也能导致内存泄露</a>。<br>当使用简单的文字或按钮时，避免使用WebView，这时使用TextView或Buttons更好。</p>\n<h3 id=\"测试框架\"><a href=\"#测试框架\" class=\"headerlink\" title=\"测试框架\"></a>测试框架</h3><p>Android SDK的测试框架还处于初级阶段，特别是关于UI测试方面。Android Gradle<br>目前实现了一个叫<a href=\"http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Testing\"><code>connectedAndroidTest</code></a>的测试，<br>它<a href=\"http://developer.android.com/reference/android/test/package-summary.html\">使用一个JUnit 为Android提供的扩展插件 extension of JUnit with helpers for Android</a>.可以跑你生成的JUnit测试，</p>\n<p><strong>只当做单元测试时使用 <a href=\"http://robolectric.org/\">Robolectric</a> ，views 不用</strong><br>它是一个最求提供”不连接设备的”为了加速开发的测试，<br>非常时候做 models 和 view models 的单元测试。<br>然而，使用Robolectric测试时不精确的，也不完全对UI测试。<br>当你对有关动画的UI元素、对话框等，测试时会有问题，<br>这主要是因为你是在 “在黑暗中工作”（在没有可控的界面情况下测试）</p>\n<p>**<a href=\"https://code.google.com/p/robotium/\">Robotium</a> 使写UI测试非常简单。<br>** 对于UI测试你不需 Robotium 跑与设备连接的测试。<br>但它可能会对你有益，是因为它有许多来帮助类的获得和分析视图，控制屏幕。<br>测试用例看起来像这样简单：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">solo.sendKey(Solo.MENU);</span><br><span class=\"line\">solo.clickOnText(<span class=\"string\">&quot;More&quot;</span>); <span class=\"comment\">// searches for the first occurence of &quot;More&quot; and clicks on it</span></span><br><span class=\"line\">solo.clickOnText(<span class=\"string\">&quot;Preferences&quot;</span>);</span><br><span class=\"line\">solo.clickOnText(<span class=\"string\">&quot;Edit File Extensions&quot;</span>);</span><br><span class=\"line\">Assert.assertTrue(solo.searchText(<span class=\"string\">&quot;rtf&quot;</span>));</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"模拟器\"><a href=\"#模拟器\" class=\"headerlink\" title=\"模拟器\"></a>模拟器</h3><p>如果你全职开发Android App,那么买一个<a href=\"http://www.genymotion.com/\">Genymotion emulator</a>license吧。<br>Genymotion 模拟器运行更快的秒帧的速度，比起典型的AVD模拟器。他有演示你APP的工具，高质量的模拟网络连接，GPS位置，等等。它同时还有理想的连接测试。<br>你若涉及适配使用很多不同的设备，买一个Genymotion 版权是比你买很多真设备便宜多的。</p>\n<p>注意：Genymotion模拟器没有装载所有的Google服务，如Google Play Store和Maps。你也可能需<br>要测试Samsung指定的API，若这样的话你还是需要购买一个真实的Samsung设备。</p>\n<h3 id=\"混淆配置\"><a href=\"#混淆配置\" class=\"headerlink\" title=\"混淆配置\"></a>混淆配置</h3><p><a href=\"http://proguard.sourceforge.net/\">ProGuard</a> 是一个在Android项目中广泛使用的压缩和混淆打包的源码的工具。</p>\n<p>你是否使用ProGuard取决你项目的配置，当你构建一个release版本的apk时，通常你应该配置gradle文件。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buildTypes &#123;</span><br><span class=\"line\">\tdebug &#123;</span><br><span class=\"line\">\t\tminifyEnabled <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\trelease &#123;</span><br><span class=\"line\">\t\tsigningConfig signingConfigs.release</span><br><span class=\"line\">\t\tminifyEnabled <span class=\"literal\">true</span></span><br><span class=\"line\">\t\tproguardFiles <span class=\"string\">&#x27;proguard-rules.pro&#x27;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>为了决定哪些代码应该被保留，哪些代码应该被混淆，你不得不指定一个或多个实体类在你的代码中。<br>这些实体应该是指定的类包含main方法，applets，midlets，activities，等等。<br>Android framework 使用一个默认的配置文件，可以在<code>SDK_HOME/tools/proguard/proguard-android.txt</code><br>目录下找到。自定义的工程指定的 project-specific 混淆规则，如在<code>my-project/app/proguard-rules.pro</code>中定义，<br>会被添加到默认的配置中。</p>\n<p>关于 ProGuard 一个普遍的问题，是看应用程序是否崩溃并报<code>ClassNotFoundException</code> 或者 <code>NoSuchFieldException</code> 或类似的异常，<br>即使编译是没有警告并运行成功。<br>这意味着以下两种可能：</p>\n<ol>\n<li>ProGuard 已经移除了类，枚举，方法，成员变量或注解，考虑是否是必要的。</li>\n<li>ProGuard 混淆了类，枚举，成员变量的名称，但是这些名字又被拿原始名称使用了，比如通过Java的反射。</li>\n</ol>\n<p>检查<code>app/build/outputs/proguard/release/usage.txt</code>文件看有问题的对象是否被移除了。<br>检查 <code>app/build/outputs/proguard/release/mapping.txt</code> 文件看有问题的对象是否被混淆了。</p>\n<p>In order to prevent ProGuard from <em>stripping away</em> needed classes or class members, add a <code>keep</code> options to your proguard config:<br>以防 ProGuard <em>剥离</em> 需要的类和类成员，添加一个 <code>keep</code>选项在你的 proguard 配置文件中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-keep class com.futurice.project.MyClass &#123; *; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>防止 ProGuard <em>混淆</em> 一些类和成员，添加 <code>keepnames</code>:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-keepnames class com.futurice.project.MyClass &#123; *; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>更多例子请参考<a href=\"http://proguard.sourceforge.net/#manual/examples.html\">Proguard</a>。</p>\n<p><strong>在构建项目之初，发布一个版本</strong> 来检查ProGuard规则是否正确的保持了重要的部分。<br>同时无论何时你添加了新的类库，做一个发布版本，同时apk在设备上跑起来测试一下。<br>不要等到你的app要发布 “1.0”版本了才做版本发布，那时候你可能会碰到好多意想不到的异常，需要一些时间去修复他们。</p>\n<p><strong>Tips</strong>每次发布新版本都要写 <code>mapping.txt</code>。每发布一个版本，如果用户遇到一个bug，同时提交了一个混淆过的堆栈跟踪。<br>通过保留<code>mapping.txt</code>文件，来确定你可以调试的问题。</p>\n<p><strong>DexGuard</strong> 如果你需要核心工具来优化，和专门混淆的发布代码，考虑使用<a href=\"http://www.saikoa.com/dexguard\">DexGuard</a>,<br>一个商业软件，ProGuard 也是有他们团队开发的。<br>它会很容易将Dex文件分割，来解决65K个方法限制问题。</p>\n<p>###数据存储</p>\n<p><strong>SharedPreferences</strong></p>\n<p>如果你只是需要持久化存储简单的标记位，并且你的应用运行在单一进程，那么SharedPreferences可能就满足了你的需求。它是一个非常好的选择。</p>\n<p>这里有两个使你可能不使用SharedPreferences的原因：</p>\n<ul>\n<li>Performance: Your data is complex or there is a lot of it</li>\n<li>性能问题：你的很多数据结构负责的数据需要存储。</li>\n<li>Multiple processes accessing the data: You have widgets or remote services that run in their own processes and require synchronized data</li>\n<li>多线程访问数据：你有多个控件或者运行在各自线程上的远程的服务需要同步数据。</li>\n</ul>\n<p><strong>ContentProviders</strong></p>\n<p>如果SharedPreferences不足以满足你的需求，那么你可以使用平台标准的ContentProviders，它不仅快速，并且线程安全。</p>\n<p>使用ContentProviders的唯一问题是建立他们需要大量的模板代码，并且少有高质量的教程。如果可以，我们可以通过使用第三方库Schematic，极大降低了冗余操作，去生成ContentProviders.</p>\n<p>你可能仍然需要亲自写一些解析代码去从Sqlite读取数据对象，或者进行相反的操作。如果可以序列化数据对象，例如通过Gson，只持久化存储最终是字符串。通过这种方式虽然会降低性能，但是从另一个角度来讲，你不需要为每一个数据结构声明表结构。</p>\n<p><strong>使用ORM</strong>我们通常不推荐使用对象关系映射第三方库除非你有非常复杂的数据结构，并且你确定你真的需要它。他们通常比较复杂，并且需要时间去学习。如果你决定了在你的应用中使用ORM，你应该注意它是否是线程安全的，而对于目前大多数ORM解决方案都是非线程安全的。</p>\n<p><strong>使用Stetho</strong>Stetho 是一个Facebook 开源的Android调试工具，它是Chrome Developer Tools的扩展。通过它可以检测应用的网络情况。它也允许你可以检测应用的数据库，shared preferences。但是，你应该确保Stetho只有在Debug状态下得以开启，而不是在正式发布版本中。</p>\n<p><strong>使用LeakCanary</strong>LeakCanary 是可以在应用运行中检测，定位内存泄露的Java库。使用它应是你开发应用过程中的一部分。更多详细的配置和使用情况请参照wiki。你只需要记得它在你的正式版本中你是不需要配置的。</p>\n<h3 id=\"致谢\"><a href=\"#致谢\" class=\"headerlink\" title=\"致谢\"></a>致谢</h3><p>感谢Antti Lammi, Joni Karppinen, Peter Tackage, Timo Tuominen, Vera Izrailit, Vihtori Mäntylä, Mark Voit, Andre Medeiros, Paul Houghton 这些人和Futurice 开发者分享他们的Android开发经验。</p>\n<h3 id=\"License\"><a href=\"#License\" class=\"headerlink\" title=\"License\"></a>License</h3><p><a href=\"www.futurice.com\">Futurice Oy</a><br>Creative Commons Attribution 4.0 International (CC BY 4.0)</p>\n<h3 id=\"Translation\"><a href=\"#Translation\" class=\"headerlink\" title=\"Translation\"></a>Translation</h3><p>Translated to Chinese by <a href=\"https://github.com/andyiac\">andyiac</a></p>\n","categories":[{"name":"学习记录","path":"api/categories/学习记录.json"},{"name":"Android","path":"api/categories/Android.json"}],"tags":[{"name":"Android","path":"api/tags/Android.json"}]}