{"title":"Android 乐固加固后手动签名","slug":"legu-jiagu","date":"2020-01-14T16:00:00.000Z","updated":"2022-10-19T14:40:00.258Z","comments":true,"path":"api/articles/legu-jiagu.json","realPath":"/2020/legu-jiagu/index/","excerpt":null,"covers":null,"cover":null,"content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近在刚做完一个教育类的项目，然后要上架到应用宝，不过要加固。但是最近的某度搜索引擎的确是不好用，找了半天才找到教程。为了以后不麻烦搜索引擎，特此记录。</p>\n<h2 id=\"第一步，写代码\"><a href=\"#第一步，写代码\" class=\"headerlink\" title=\"第一步，写代码\"></a>第一步，写代码</h2><p>当然是写好你自己的代码辣，还有喔，要保护好自己的发际线。</p>\n<h2 id=\"第二步，打包\"><a href=\"#第二步，打包\" class=\"headerlink\" title=\"第二步，打包\"></a>第二步，打包</h2><h3 id=\"首先，生成密钥\"><a href=\"#首先，生成密钥\" class=\"headerlink\" title=\"首先，生成密钥\"></a>首先，生成密钥</h3><p>都0202年了，还不用<code>Android studio</code>的同事们，你们真的老辣，嘿嘿。<br>Android应用打包，各位都会吧。不会的话我简单唠两句。</p>\n<ol>\n<li>首先当然是生成密钥啦。可以直接用Android studio自带的工具生成，不过要填的东西可不少：</li>\n</ol>\n<p>点击最上方的导航栏<code>Build</code>，然后点击<code>Generate SignedBundle / APK ...</code>；<br>接下来使用默认选中的<code>APK</code>，点击<code>Next</code>；<br>会有一个选项 <code>Key store path</code>, 如果你有生成过打包密钥，可以直接选择<code>Choose existing</code>就行，没有的话点击<code>Create new ...</code>，内容的话，如果是工作室或者公司还是正经点填吧，不是的话，你开心就好。</p>\n<table>\n<thead>\n<tr>\n<th>填空的名称</th>\n<th>对应的意思</th>\n<th>是否必填</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>key Store path</td>\n<td>密钥库位置(要保存在哪里)</td>\n<td>是</td>\n</tr>\n<tr>\n<td>Password</td>\n<td>密钥库的密码</td>\n<td>是</td>\n</tr>\n<tr>\n<td>Confirm</td>\n<td>重复上面的密码</td>\n<td>是</td>\n</tr>\n<tr>\n<td>Alias</td>\n<td>密钥别名(一个密钥可以有多个别名)</td>\n<td>是</td>\n</tr>\n<tr>\n<td>Password</td>\n<td>密钥密码</td>\n<td>是</td>\n</tr>\n<tr>\n<td>Validity(years)</td>\n<td>密钥有效期(默认25年)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>First and LastName</td>\n<td>你的名称(英文)</td>\n<td>是</td>\n</tr>\n<tr>\n<td>Organizational Unit</td>\n<td>机构代码</td>\n<td>是</td>\n</tr>\n<tr>\n<td>Organization</td>\n<td>组织机构(英文&#x2F;拼音)</td>\n<td>是</td>\n</tr>\n<tr>\n<td>City or Locality</td>\n<td>城市拼音</td>\n<td>是</td>\n</tr>\n<tr>\n<td>State or Province</td>\n<td>地区</td>\n<td>是</td>\n</tr>\n<tr>\n<td>Country Code (xx)</td>\n<td>国家编号，国内一般填86</td>\n<td>是</td>\n</tr>\n</tbody></table>\n<p>填完就直接下一步。<br>为了安全起见还是<code>v1</code>、<code>v2</code>都勾上，打包也是4k对齐的，而且也缓解一下我作为处女座的强迫症。然后选择<code>Finish</code>，就开始打包了。打包生成的APK文件会在选择<code>v1</code>、<code>v2</code>的上面，有个<code>APK Destination Folder</code>，这个路径里面。</p>\n<p>当然，也有早就创建好签名的，或者想要自动打包的，直接在<code>app</code>目录下的<code>build.gradle</code>中修改</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">android &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">    signingConfigs &#123;</span><br><span class=\"line\">        release &#123;</span><br><span class=\"line\">            keyAlias <span class=\"string\">&#x27;&#x27;</span>           <span class=\"comment\">//别名</span></span><br><span class=\"line\">            keyPassword <span class=\"string\">&#x27;&#x27;</span>        <span class=\"comment\">//别名密码</span></span><br><span class=\"line\">            storeFile <span class=\"keyword\">file</span>(<span class=\"string\">&#x27;&#x27;</span>)    <span class=\"comment\">//.jks/密钥库 的路径</span></span><br><span class=\"line\">            storePassword <span class=\"string\">&#x27;&#x27;</span>      <span class=\"comment\">//密钥库的密码</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        debug &#123;</span><br><span class=\"line\">            keyAlias <span class=\"string\">&#x27;&#x27;</span>           <span class=\"comment\">//别名</span></span><br><span class=\"line\">            keyPassword <span class=\"string\">&#x27;&#x27;</span>        <span class=\"comment\">//别名密码</span></span><br><span class=\"line\">            storeFile <span class=\"keyword\">file</span>(<span class=\"string\">&#x27;&#x27;</span>)    <span class=\"comment\">//.jks/密钥库 的路径</span></span><br><span class=\"line\">            storePassword <span class=\"string\">&#x27;&#x27;</span>      <span class=\"comment\">//密钥库的密码</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>这样填完就可以直接用<code>gradle</code>的<code>assembleRelease</code>直接打包了。</p>\n<ol start=\"2\">\n<li>第二种方式就比较牛批了，直接手撸的。</li>\n</ol>\n<p>首先，你要知道<code>Android</code>中APK签名工具<code>jarsigner</code>和<code>apksigner</code>。</p>\n<ul>\n<li>工具介绍</li>\n</ul>\n<p>  <code>jarsigner</code>是JDK提供的针对jar包签名的通用工具,位于JDK&#x2F;bin&#x2F;jarsigner.exe</p>\n<p>  <code>apksigner</code>是Google官方提供的针对Android APK签名及验证的专用工具,位于Android SDK&#x2F;build-tools&#x2F;SDK版本&#x2F;apksigner.bat</p>\n<p>  不管是apk包,还是jar包,本质都是zip格式的压缩包,所以它们的签名过程都差不多(仅限V1签名),以上两个工具都可以对Android APK包进行签名.</p>\n<ul>\n<li><p><code>v1</code>和<code>v2</code>的区别</p>\n<blockquote>\n<p>在 Android Studio 中点击菜单 Build-&gt;Generate signed apk… 打包签名过程中,可以看到两种签名选项 V1( Jar Signature ) V2( Full APK Signature )</p>\n</blockquote>\n<ul>\n<li><p>V1签名：</p>\n<ul>\n<li>来自 JDK （ jarsigner ）,对 zip 压缩包的每个文件进行验证，签名后还能对压缩包修改（移动&#x2F;重新压缩文件）</li>\n<li>对V1签名的 apk&#x2F;jar 解压,在 META-INF 存放签名文件( MANIFEST.MF, CERT.SF, CERT.RSA )</li>\n<li>其中 MANIFEST.MF 文件保存所有文件的 SHA1 指纹(除了 META-INF 文件),由此可知:V1签名是对压缩包中单个文件签名验证</li>\n</ul>\n</li>\n<li><p>V2签名：</p>\n<ul>\n<li>来自 Google（apksigner），对 zip 压缩包的整个文件验证，签名后不能修改压缩包(包括 zipalign )</li>\n<li>对V2签名的 apk 解压,没有发现签名文件,重新压缩后V2签名就失效, 由此可知: V2签名是对整个 APK 签名验证</li>\n</ul>\n</li>\n<li><p>V2签名的优点：</p>\n<ul>\n<li>签名更安全（不能修改压缩包）</li>\n<li>签名验证时间更短（不需要解压验证），因此安装速度更快</li>\n</ul>\n</li>\n</ul>\n<p><strong>注意：</strong> <code>apksigner</code>工具默认同时使用V1和V2签名，以兼容Android7.0以下系统版本</p>\n</li>\n<li><p>zipalign 和V2签名</p>\n<p>位于 Android SDK&#x2F;build-tools&#x2F;SDK 版本 &#x2F;zipalign.exe<br>zipalign 是对 zip 包对齐的工具，使APK包内未压缩的数据有序排列对齐，从而减少 APP 运行时消耗</p>\n<blockquote>\n<p>zipalign -v 4 in.apk out.apk &#x2F;&#x2F;4字节对齐优化命令<br>zipalign -c -v 4 in.apk      &#x2F;&#x2F;检查 APK 是否对齐</p>\n</blockquote>\n<p><strong>zipalign 可以在V1签名后执行，但 zipalign 不能在V2签名之后执行，只能在V2签名之前执行！</strong></p>\n</li>\n<li><p>签名步骤</p>\n<ul>\n<li><p>生成密钥对（已有密钥库，可忽略）</p>\n<p>Eclipse或Android Studio在Debug时,对App签名都会使用一个默认的密钥库:<br>  默认在C:\\Users\\用户名.android\\debug.keystore<br>  密钥库名: debug.keystore<br>  密钥别名: androiddebugkey<br>  密钥库密码: android</p>\n</li>\n</ul>\n<p><strong>生成密钥对</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keytool -genkeypair -keystore 密钥库名 -alias 密钥别名 -validity 天数 -keyalg RSA</span><br></pre></td></tr></table></figure>\n\n<p>参数：</p>\n<blockquote>\n<p>-genkeypair 生成一条密钥对（由私钥和公钥组成）<br>-keystore 密钥库名字及存储位置（默认当前目录）<br>-alias 密钥对的别名（密钥库可以存在多个密钥对，用于区分不同密钥对）<br>-validity 密钥对的有效期（单位：天）<br>-keyalg 生成密钥对的算法（常用 RSA&#x2F;DSA ，DSA 只用于签名，默认采用DSA ）</p>\n</blockquote>\n<p>提示：可重复使用此命令，在同一密钥库中创建多条密钥对</p>\n<p>例如：<br>在 debug.keystore 中新增一对密钥，别名是release</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keytool -genkeypair -keystore debug.keystore -alias release -validity 3000</span><br></pre></td></tr></table></figure>\n\n<p><strong>查看密钥库</strong></p>\n<p>  进入 JDK&#x2F;bin，输入命令</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keytool -list -v -keystore 密钥库名</span><br></pre></td></tr></table></figure>\n\n<p>  参数：</p>\n<blockquote>\n<p>-list 查看密钥列表<br>-v 查看密钥详情</p>\n</blockquote>\n<p>  例如：</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keytool -list -v -keystore debug.keystore</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>好了，现在生成密钥了，也就可以签名了。</p>\n<h3 id=\"有密钥了，当然要给APK签名了\"><a href=\"#有密钥了，当然要给APK签名了\" class=\"headerlink\" title=\"有密钥了，当然要给APK签名了\"></a>有密钥了，当然要给APK签名了</h3><ol>\n<li>方法一（ jarsigner ，只支持V1签名）<br>进入JDK&#x2F;bin, 输入命令</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jarsigner -keystore 密钥库名 xxx.apk 密钥别名</span><br></pre></td></tr></table></figure>\n\n<p>从JDK7开始, jarsigner默认算法是SHA256, 但Android 4.2以下不支持该算法,所以需要修改算法, 添加参数 -digestalg SHA1 -sigalg SHA1withRSA</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jarsigner -keystore 密钥库名 -digestalg SHA1 -sigalg SHA1withRSA xxx.apk 密钥别名</span><br></pre></td></tr></table></figure>\n\n<p>参数：</p>\n<blockquote>\n<p>-digestalg 摘要算法<br>-sigalg 签名算法</p>\n</blockquote>\n<p>例如：<br>用 JDK7 及以上 jarsigner 签名，不支持 Android4.2 以下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jarsigner -keystore debug.keystore app.apk androiddebugkey</span><br></pre></td></tr></table></figure>\n\n<p>用 JDK7 及以上 jarsigner 签名，兼容 Android4.2 以下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jarsigner -keystore debug.keystore -digestalg SHA1 -sigalg SHA1withRSA app.apk androiddebugkey</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>方法二（ apksigner ，默认同时使用V1和V2签名）<br>进入Android SDK&#x2F;build-tools&#x2F;SDK版本, 输入命令</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apksigner sign --ks 密钥库名 --ks-key-alias 密钥别名 xxx.apk</span><br></pre></td></tr></table></figure>\n\n<p>若密钥库中有多个密钥对,则必须指定密钥别名</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apksigner sign --ks 密钥库名 --ks-key-alias 密钥别名 xxx.apk</span><br></pre></td></tr></table></figure>\n\n<p>禁用V2签名：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apksigner sign --v2-signing-enabled false --ks 密钥库名 xxx.apk</span><br></pre></td></tr></table></figure>\n\n<p>参数：</p>\n<blockquote>\n<p>–ks-key-alias 密钥库别名，若密钥库只有一个密钥对，则可省略，反之必选<br>–v1-signing-enabled 是否开启V1签名，默认开启<br>–v2-signing-enabled 是否开启V2签名，默认开启</p>\n</blockquote>\n<p>例如：<br>在 debug.keystore 密钥库只有一个密钥对</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apksigner sign --ks debug.keystore app.apk</span><br></pre></td></tr></table></figure>\n\n<p>在 debug.keystore 密钥库中有多个密钥对，所以必须指定密钥别名</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apksigner sign --ks debug.keystore --ks-key-alias androiddebugkey app.apk</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"签名验证，康康自己的成果\"><a href=\"#签名验证，康康自己的成果\" class=\"headerlink\" title=\"签名验证，康康自己的成果\"></a>签名验证，康康自己的成果</h3><ol>\n<li>方法一（ keytool ，只支持V1签名校验）<br>进入 JDK&#x2F;bin , 输入命令</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keytool -printcert -jarfile app.apk （显示签名信息）</span><br></pre></td></tr></table></figure>\n\n<p>参数：</p>\n<blockquote>\n<p>-printcert 打印证书内容<br>-jarfile <filename> 已签名的 jar 文件或 apk 文件</p>\n</blockquote>\n<ol start=\"2\">\n<li>方法二（ apksigner ，支持V1和V2签名校验）<br>进入 Android SDK&#x2F;build-tools&#x2F;SDK 版本, 输入命令<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apksigner verify -v --print-certs xxx.apk</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>参数：</p>\n<blockquote>\n<p>-v,–verbose 显示详情（显示是否使用V1和V2签名）<br>–print-certs 显示签名证书信息</p>\n</blockquote>\n<p>例如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apksigner verify -v app.apk</span><br><span class=\"line\"></span><br><span class=\"line\">Verifies</span><br><span class=\"line\">Verified using v1 scheme (JAR signing): true</span><br><span class=\"line\">Verified using v2 scheme (APK Signature Scheme v2): true</span><br><span class=\"line\">Number of signers: 1</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>方法三(GetApkInfo.jar 支持v1,v2，并且是中文显示)</li>\n</ol>\n<p>下载<a href=\"https://www.lanzous.com/i8ot4ni\">GetApkInfo.jar</a></p>\n<p>查看包名，版本号，签名等信息,以qq为例：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar GetApkInfo.jar qq.apk</span><br><span class=\"line\"></span><br><span class=\"line\">执行结果: 成功</span><br><span class=\"line\">应用信息:</span><br><span class=\"line\">  包名: com.tencent.mobileqq</span><br><span class=\"line\">  版本名: 7.8.8</span><br><span class=\"line\">  版本号: 942</span><br><span class=\"line\">  签名文件MD5: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class=\"line\">  SDK版本:</span><br><span class=\"line\">      minSdkVersion:xx</span><br><span class=\"line\">      targetSdkVersion:xx</span><br><span class=\"line\">  V1签名验证通过: true</span><br><span class=\"line\">  使用V2签名: true</span><br><span class=\"line\">  V2签名验证通过: true</span><br></pre></td></tr></table></figure>\n\n<p>可以拿到包名，版本名称，版本号，签名文件md5值，sdk最小版本，应用支持的最低系统版本，v1和v2的签名情况</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结:\"></a>总结:</h2><p>到这里你就把这篇文章看的七七八八了。但是你会产生一个疑问：为什么没写乐固加固过程？，因为现在乐固加固已经不是说用工具加固了，至少我在官网找了好久都没找到SDK或者包括Windows、Mac OS、Linux这几大平台的工具，一直都没找到。只有去<a href=\"https://console.cloud.tencent.com/ms\">腾讯乐固</a>这里登录账号上传apk文件打包了，挺快的，二十分钟左右吧。</p>\n<p>但是，上传之后要<strong>注意</strong>了：</p>\n<blockquote>\n<p>上传之后是没有签名的，必须自己再重新签名！</p>\n</blockquote>\n<p>也就是说，哪怕你是之前打包签名好的，但是你加固了，下载后的<code>xxx_legu.apk</code>也是没有签名的，必须自己签名，至于签名方法，在前面啦。祝各位好运^_^</p>\n<p>以上就是这篇文章的全部内容了，希望本文的内容对大家的学习或者工作具有一定的参考学习价值，如果有疑问大家可以留言交流，谢谢大家对我的支持。😘✔</p>\n","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近在刚做完一个教育类的项目，然后要上架到应用宝，不过要加固。但是最近的某度搜索引擎的确是不好用，找了半天才找到教程。为了以后不麻烦搜索引擎，特此记录。</p>\n<h2 id=\"第一步，写代码\"><a href=\"#第一步，写代码\" class=\"headerlink\" title=\"第一步，写代码\"></a>第一步，写代码</h2><p>当然是写好你自己的代码辣，还有喔，要保护好自己的发际线。</p>\n<h2 id=\"第二步，打包\"><a href=\"#第二步，打包\" class=\"headerlink\" title=\"第二步，打包\"></a>第二步，打包</h2><h3 id=\"首先，生成密钥\"><a href=\"#首先，生成密钥\" class=\"headerlink\" title=\"首先，生成密钥\"></a>首先，生成密钥</h3><p>都0202年了，还不用<code>Android studio</code>的同事们，你们真的老辣，嘿嘿。<br>Android应用打包，各位都会吧。不会的话我简单唠两句。</p>\n<ol>\n<li>首先当然是生成密钥啦。可以直接用Android studio自带的工具生成，不过要填的东西可不少：</li>\n</ol>\n<p>点击最上方的导航栏<code>Build</code>，然后点击<code>Generate SignedBundle / APK ...</code>；<br>接下来使用默认选中的<code>APK</code>，点击<code>Next</code>；<br>会有一个选项 <code>Key store path</code>, 如果你有生成过打包密钥，可以直接选择<code>Choose existing</code>就行，没有的话点击<code>Create new ...</code>，内容的话，如果是工作室或者公司还是正经点填吧，不是的话，你开心就好。</p>\n<table>\n<thead>\n<tr>\n<th>填空的名称</th>\n<th>对应的意思</th>\n<th>是否必填</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>key Store path</td>\n<td>密钥库位置(要保存在哪里)</td>\n<td>是</td>\n</tr>\n<tr>\n<td>Password</td>\n<td>密钥库的密码</td>\n<td>是</td>\n</tr>\n<tr>\n<td>Confirm</td>\n<td>重复上面的密码</td>\n<td>是</td>\n</tr>\n<tr>\n<td>Alias</td>\n<td>密钥别名(一个密钥可以有多个别名)</td>\n<td>是</td>\n</tr>\n<tr>\n<td>Password</td>\n<td>密钥密码</td>\n<td>是</td>\n</tr>\n<tr>\n<td>Validity(years)</td>\n<td>密钥有效期(默认25年)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>First and LastName</td>\n<td>你的名称(英文)</td>\n<td>是</td>\n</tr>\n<tr>\n<td>Organizational Unit</td>\n<td>机构代码</td>\n<td>是</td>\n</tr>\n<tr>\n<td>Organization</td>\n<td>组织机构(英文&#x2F;拼音)</td>\n<td>是</td>\n</tr>\n<tr>\n<td>City or Locality</td>\n<td>城市拼音</td>\n<td>是</td>\n</tr>\n<tr>\n<td>State or Province</td>\n<td>地区</td>\n<td>是</td>\n</tr>\n<tr>\n<td>Country Code (xx)</td>\n<td>国家编号，国内一般填86</td>\n<td>是</td>\n</tr>\n</tbody></table>\n<p>填完就直接下一步。<br>为了安全起见还是<code>v1</code>、<code>v2</code>都勾上，打包也是4k对齐的，而且也缓解一下我作为处女座的强迫症。然后选择<code>Finish</code>，就开始打包了。打包生成的APK文件会在选择<code>v1</code>、<code>v2</code>的上面，有个<code>APK Destination Folder</code>，这个路径里面。</p>\n<p>当然，也有早就创建好签名的，或者想要自动打包的，直接在<code>app</code>目录下的<code>build.gradle</code>中修改</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">android &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">    signingConfigs &#123;</span><br><span class=\"line\">        release &#123;</span><br><span class=\"line\">            keyAlias <span class=\"string\">&#x27;&#x27;</span>           <span class=\"comment\">//别名</span></span><br><span class=\"line\">            keyPassword <span class=\"string\">&#x27;&#x27;</span>        <span class=\"comment\">//别名密码</span></span><br><span class=\"line\">            storeFile <span class=\"keyword\">file</span>(<span class=\"string\">&#x27;&#x27;</span>)    <span class=\"comment\">//.jks/密钥库 的路径</span></span><br><span class=\"line\">            storePassword <span class=\"string\">&#x27;&#x27;</span>      <span class=\"comment\">//密钥库的密码</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        debug &#123;</span><br><span class=\"line\">            keyAlias <span class=\"string\">&#x27;&#x27;</span>           <span class=\"comment\">//别名</span></span><br><span class=\"line\">            keyPassword <span class=\"string\">&#x27;&#x27;</span>        <span class=\"comment\">//别名密码</span></span><br><span class=\"line\">            storeFile <span class=\"keyword\">file</span>(<span class=\"string\">&#x27;&#x27;</span>)    <span class=\"comment\">//.jks/密钥库 的路径</span></span><br><span class=\"line\">            storePassword <span class=\"string\">&#x27;&#x27;</span>      <span class=\"comment\">//密钥库的密码</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>这样填完就可以直接用<code>gradle</code>的<code>assembleRelease</code>直接打包了。</p>\n<ol start=\"2\">\n<li>第二种方式就比较牛批了，直接手撸的。</li>\n</ol>\n<p>首先，你要知道<code>Android</code>中APK签名工具<code>jarsigner</code>和<code>apksigner</code>。</p>\n<ul>\n<li>工具介绍</li>\n</ul>\n<p>  <code>jarsigner</code>是JDK提供的针对jar包签名的通用工具,位于JDK&#x2F;bin&#x2F;jarsigner.exe</p>\n<p>  <code>apksigner</code>是Google官方提供的针对Android APK签名及验证的专用工具,位于Android SDK&#x2F;build-tools&#x2F;SDK版本&#x2F;apksigner.bat</p>\n<p>  不管是apk包,还是jar包,本质都是zip格式的压缩包,所以它们的签名过程都差不多(仅限V1签名),以上两个工具都可以对Android APK包进行签名.</p>\n<ul>\n<li><p><code>v1</code>和<code>v2</code>的区别</p>\n<blockquote>\n<p>在 Android Studio 中点击菜单 Build-&gt;Generate signed apk… 打包签名过程中,可以看到两种签名选项 V1( Jar Signature ) V2( Full APK Signature )</p>\n</blockquote>\n<ul>\n<li><p>V1签名：</p>\n<ul>\n<li>来自 JDK （ jarsigner ）,对 zip 压缩包的每个文件进行验证，签名后还能对压缩包修改（移动&#x2F;重新压缩文件）</li>\n<li>对V1签名的 apk&#x2F;jar 解压,在 META-INF 存放签名文件( MANIFEST.MF, CERT.SF, CERT.RSA )</li>\n<li>其中 MANIFEST.MF 文件保存所有文件的 SHA1 指纹(除了 META-INF 文件),由此可知:V1签名是对压缩包中单个文件签名验证</li>\n</ul>\n</li>\n<li><p>V2签名：</p>\n<ul>\n<li>来自 Google（apksigner），对 zip 压缩包的整个文件验证，签名后不能修改压缩包(包括 zipalign )</li>\n<li>对V2签名的 apk 解压,没有发现签名文件,重新压缩后V2签名就失效, 由此可知: V2签名是对整个 APK 签名验证</li>\n</ul>\n</li>\n<li><p>V2签名的优点：</p>\n<ul>\n<li>签名更安全（不能修改压缩包）</li>\n<li>签名验证时间更短（不需要解压验证），因此安装速度更快</li>\n</ul>\n</li>\n</ul>\n<p><strong>注意：</strong> <code>apksigner</code>工具默认同时使用V1和V2签名，以兼容Android7.0以下系统版本</p>\n</li>\n<li><p>zipalign 和V2签名</p>\n<p>位于 Android SDK&#x2F;build-tools&#x2F;SDK 版本 &#x2F;zipalign.exe<br>zipalign 是对 zip 包对齐的工具，使APK包内未压缩的数据有序排列对齐，从而减少 APP 运行时消耗</p>\n<blockquote>\n<p>zipalign -v 4 in.apk out.apk &#x2F;&#x2F;4字节对齐优化命令<br>zipalign -c -v 4 in.apk      &#x2F;&#x2F;检查 APK 是否对齐</p>\n</blockquote>\n<p><strong>zipalign 可以在V1签名后执行，但 zipalign 不能在V2签名之后执行，只能在V2签名之前执行！</strong></p>\n</li>\n<li><p>签名步骤</p>\n<ul>\n<li><p>生成密钥对（已有密钥库，可忽略）</p>\n<p>Eclipse或Android Studio在Debug时,对App签名都会使用一个默认的密钥库:<br>  默认在C:\\Users\\用户名.android\\debug.keystore<br>  密钥库名: debug.keystore<br>  密钥别名: androiddebugkey<br>  密钥库密码: android</p>\n</li>\n</ul>\n<p><strong>生成密钥对</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keytool -genkeypair -keystore 密钥库名 -alias 密钥别名 -validity 天数 -keyalg RSA</span><br></pre></td></tr></table></figure>\n\n<p>参数：</p>\n<blockquote>\n<p>-genkeypair 生成一条密钥对（由私钥和公钥组成）<br>-keystore 密钥库名字及存储位置（默认当前目录）<br>-alias 密钥对的别名（密钥库可以存在多个密钥对，用于区分不同密钥对）<br>-validity 密钥对的有效期（单位：天）<br>-keyalg 生成密钥对的算法（常用 RSA&#x2F;DSA ，DSA 只用于签名，默认采用DSA ）</p>\n</blockquote>\n<p>提示：可重复使用此命令，在同一密钥库中创建多条密钥对</p>\n<p>例如：<br>在 debug.keystore 中新增一对密钥，别名是release</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keytool -genkeypair -keystore debug.keystore -alias release -validity 3000</span><br></pre></td></tr></table></figure>\n\n<p><strong>查看密钥库</strong></p>\n<p>  进入 JDK&#x2F;bin，输入命令</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keytool -list -v -keystore 密钥库名</span><br></pre></td></tr></table></figure>\n\n<p>  参数：</p>\n<blockquote>\n<p>-list 查看密钥列表<br>-v 查看密钥详情</p>\n</blockquote>\n<p>  例如：</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keytool -list -v -keystore debug.keystore</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>好了，现在生成密钥了，也就可以签名了。</p>\n<h3 id=\"有密钥了，当然要给APK签名了\"><a href=\"#有密钥了，当然要给APK签名了\" class=\"headerlink\" title=\"有密钥了，当然要给APK签名了\"></a>有密钥了，当然要给APK签名了</h3><ol>\n<li>方法一（ jarsigner ，只支持V1签名）<br>进入JDK&#x2F;bin, 输入命令</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jarsigner -keystore 密钥库名 xxx.apk 密钥别名</span><br></pre></td></tr></table></figure>\n\n<p>从JDK7开始, jarsigner默认算法是SHA256, 但Android 4.2以下不支持该算法,所以需要修改算法, 添加参数 -digestalg SHA1 -sigalg SHA1withRSA</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jarsigner -keystore 密钥库名 -digestalg SHA1 -sigalg SHA1withRSA xxx.apk 密钥别名</span><br></pre></td></tr></table></figure>\n\n<p>参数：</p>\n<blockquote>\n<p>-digestalg 摘要算法<br>-sigalg 签名算法</p>\n</blockquote>\n<p>例如：<br>用 JDK7 及以上 jarsigner 签名，不支持 Android4.2 以下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jarsigner -keystore debug.keystore app.apk androiddebugkey</span><br></pre></td></tr></table></figure>\n\n<p>用 JDK7 及以上 jarsigner 签名，兼容 Android4.2 以下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jarsigner -keystore debug.keystore -digestalg SHA1 -sigalg SHA1withRSA app.apk androiddebugkey</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>方法二（ apksigner ，默认同时使用V1和V2签名）<br>进入Android SDK&#x2F;build-tools&#x2F;SDK版本, 输入命令</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apksigner sign --ks 密钥库名 --ks-key-alias 密钥别名 xxx.apk</span><br></pre></td></tr></table></figure>\n\n<p>若密钥库中有多个密钥对,则必须指定密钥别名</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apksigner sign --ks 密钥库名 --ks-key-alias 密钥别名 xxx.apk</span><br></pre></td></tr></table></figure>\n\n<p>禁用V2签名：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apksigner sign --v2-signing-enabled false --ks 密钥库名 xxx.apk</span><br></pre></td></tr></table></figure>\n\n<p>参数：</p>\n<blockquote>\n<p>–ks-key-alias 密钥库别名，若密钥库只有一个密钥对，则可省略，反之必选<br>–v1-signing-enabled 是否开启V1签名，默认开启<br>–v2-signing-enabled 是否开启V2签名，默认开启</p>\n</blockquote>\n<p>例如：<br>在 debug.keystore 密钥库只有一个密钥对</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apksigner sign --ks debug.keystore app.apk</span><br></pre></td></tr></table></figure>\n\n<p>在 debug.keystore 密钥库中有多个密钥对，所以必须指定密钥别名</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apksigner sign --ks debug.keystore --ks-key-alias androiddebugkey app.apk</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"签名验证，康康自己的成果\"><a href=\"#签名验证，康康自己的成果\" class=\"headerlink\" title=\"签名验证，康康自己的成果\"></a>签名验证，康康自己的成果</h3><ol>\n<li>方法一（ keytool ，只支持V1签名校验）<br>进入 JDK&#x2F;bin , 输入命令</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keytool -printcert -jarfile app.apk （显示签名信息）</span><br></pre></td></tr></table></figure>\n\n<p>参数：</p>\n<blockquote>\n<p>-printcert 打印证书内容<br>-jarfile <filename> 已签名的 jar 文件或 apk 文件</p>\n</blockquote>\n<ol start=\"2\">\n<li>方法二（ apksigner ，支持V1和V2签名校验）<br>进入 Android SDK&#x2F;build-tools&#x2F;SDK 版本, 输入命令<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apksigner verify -v --print-certs xxx.apk</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>参数：</p>\n<blockquote>\n<p>-v,–verbose 显示详情（显示是否使用V1和V2签名）<br>–print-certs 显示签名证书信息</p>\n</blockquote>\n<p>例如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apksigner verify -v app.apk</span><br><span class=\"line\"></span><br><span class=\"line\">Verifies</span><br><span class=\"line\">Verified using v1 scheme (JAR signing): true</span><br><span class=\"line\">Verified using v2 scheme (APK Signature Scheme v2): true</span><br><span class=\"line\">Number of signers: 1</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>方法三(GetApkInfo.jar 支持v1,v2，并且是中文显示)</li>\n</ol>\n<p>下载<a href=\"https://www.lanzous.com/i8ot4ni\">GetApkInfo.jar</a></p>\n<p>查看包名，版本号，签名等信息,以qq为例：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar GetApkInfo.jar qq.apk</span><br><span class=\"line\"></span><br><span class=\"line\">执行结果: 成功</span><br><span class=\"line\">应用信息:</span><br><span class=\"line\">  包名: com.tencent.mobileqq</span><br><span class=\"line\">  版本名: 7.8.8</span><br><span class=\"line\">  版本号: 942</span><br><span class=\"line\">  签名文件MD5: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class=\"line\">  SDK版本:</span><br><span class=\"line\">      minSdkVersion:xx</span><br><span class=\"line\">      targetSdkVersion:xx</span><br><span class=\"line\">  V1签名验证通过: true</span><br><span class=\"line\">  使用V2签名: true</span><br><span class=\"line\">  V2签名验证通过: true</span><br></pre></td></tr></table></figure>\n\n<p>可以拿到包名，版本名称，版本号，签名文件md5值，sdk最小版本，应用支持的最低系统版本，v1和v2的签名情况</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结:\"></a>总结:</h2><p>到这里你就把这篇文章看的七七八八了。但是你会产生一个疑问：为什么没写乐固加固过程？，因为现在乐固加固已经不是说用工具加固了，至少我在官网找了好久都没找到SDK或者包括Windows、Mac OS、Linux这几大平台的工具，一直都没找到。只有去<a href=\"https://console.cloud.tencent.com/ms\">腾讯乐固</a>这里登录账号上传apk文件打包了，挺快的，二十分钟左右吧。</p>\n<p>但是，上传之后要<strong>注意</strong>了：</p>\n<blockquote>\n<p>上传之后是没有签名的，必须自己再重新签名！</p>\n</blockquote>\n<p>也就是说，哪怕你是之前打包签名好的，但是你加固了，下载后的<code>xxx_legu.apk</code>也是没有签名的，必须自己签名，至于签名方法，在前面啦。祝各位好运^_^</p>\n<p>以上就是这篇文章的全部内容了，希望本文的内容对大家的学习或者工作具有一定的参考学习价值，如果有疑问大家可以留言交流，谢谢大家对我的支持。😘✔</p>\n","categories":[{"name":"教程分享","path":"api/categories/教程分享.json"},{"name":"Android","path":"api/categories/Android.json"}],"tags":[{"name":"Android","path":"api/tags/Android.json"},{"name":"加固","path":"api/tags/加固.json"}]}