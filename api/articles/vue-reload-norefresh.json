{"title":"【vue】路由不变的情况下，刷新页面","slug":"vue-reload-norefresh","date":"2020-01-16T16:00:00.000Z","updated":"2022-10-19T14:40:00.273Z","comments":true,"path":"api/articles/vue-reload-norefresh.json","realPath":"/2020/vue-reload-norefresh/index/","excerpt":null,"covers":null,"cover":null,"content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在vue写的后台管理项目中，经常会有增、删、改、查的操作，这些操作只是跟用接口跟后台交互下，既然用接口交互，那肯定就是<code>axios</code>的异步请求，那么就是说后台数据发生了改变，但是前台的数据并没有实时的更新（每次操作完后台把列表数据重新返给你例外，但是这样的话每次交互的数据量就偏大了），所以就有了<code>动态路由</code>。在使用动态路由配置<code>/detail/:id</code>这样的情况下，由于<code>router-view</code>是复用的，单纯的改变<code>id</code>的值并不会刷新<code>router-view</code>所以就要想一个办法，让后台执行完操作后，给前台返一个操作结果，然后前台手动刷新页面，一开始我想到的是用<code>window.location.reload()</code>或者<code>this.$router.go(0)</code>这两个方法，但是后来发现这两个方法消耗都很大，用户体验并不太好，违背了<code>vueRouter</code>的初衷，所以就放弃了，看了下别人的做法，整理下面两种方法：</p>\n<h3 id=\"第一种：中转站的方式\"><a href=\"#第一种：中转站的方式\" class=\"headerlink\" title=\"第一种：中转站的方式\"></a>第一种：中转站的方式</h3><p>用一个空白组件在每次操作之后进行跳转，相当于<code>Nginx</code>的<code>反向代理</code>一样。意思就是让每次操作完成以后，都让路由跳转到这个中转站页面，然后这个页面获取到进来路由的路径再返回去就可以了。这种方式如果说你的路由是显性的，就是直接显示在浏览器地址栏，你会发现，一直在换，而我目前使用的则是第二种方式。</p>\n<h3 id=\"第二种：provide-x2F-inject-的方式\"><a href=\"#第二种：provide-x2F-inject-的方式\" class=\"headerlink\" title=\"第二种：provide &#x2F; inject 的方式\"></a>第二种：provide &#x2F; inject 的方式</h3><p>这种方式与<code>Spring boot</code>中的切面&#x2F;注解有点类似，就是通过<code>provide</code>让<code>App.vue</code>为所有子组件注入一个<code>reload</code>方法，然后在需要使用的页面，通过<code>inject</code>注入即可、请看代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;router-view v-if=&quot;isRouterAlive&quot;&gt;&lt;/router-view&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &quot;App&quot;,</span><br><span class=\"line\">  provide() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      reload: this.reload</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      isRouterAlive: true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    reload() &#123;</span><br><span class=\"line\">      this.isRouterAlive = false;</span><br><span class=\"line\">      this.$nextTick(function() &#123;</span><br><span class=\"line\">        this.isRouterAlive = true;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在需要调用的子页面：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">   &lt;!--你的子页面布局--&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    //...</span><br><span class=\"line\">    inject: [&#x27;reload&#x27;],</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        delData()&#123;</span><br><span class=\"line\">            //在axios成功的回调里面</span><br><span class=\"line\">            this.reload();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>以上就是这篇文章的全部内容了，希望本文的内容对大家的学习或者工作具有一定的参考学习价值，如果有疑问大家可以留言交流，谢谢大家对我的支持。😘✔</p>\n","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在vue写的后台管理项目中，经常会有增、删、改、查的操作，这些操作只是跟用接口跟后台交互下，既然用接口交互，那肯定就是<code>axios</code>的异步请求，那么就是说后台数据发生了改变，但是前台的数据并没有实时的更新（每次操作完后台把列表数据重新返给你例外，但是这样的话每次交互的数据量就偏大了），所以就有了<code>动态路由</code>。在使用动态路由配置<code>/detail/:id</code>这样的情况下，由于<code>router-view</code>是复用的，单纯的改变<code>id</code>的值并不会刷新<code>router-view</code>所以就要想一个办法，让后台执行完操作后，给前台返一个操作结果，然后前台手动刷新页面，一开始我想到的是用<code>window.location.reload()</code>或者<code>this.$router.go(0)</code>这两个方法，但是后来发现这两个方法消耗都很大，用户体验并不太好，违背了<code>vueRouter</code>的初衷，所以就放弃了，看了下别人的做法，整理下面两种方法：</p>\n<h3 id=\"第一种：中转站的方式\"><a href=\"#第一种：中转站的方式\" class=\"headerlink\" title=\"第一种：中转站的方式\"></a>第一种：中转站的方式</h3><p>用一个空白组件在每次操作之后进行跳转，相当于<code>Nginx</code>的<code>反向代理</code>一样。意思就是让每次操作完成以后，都让路由跳转到这个中转站页面，然后这个页面获取到进来路由的路径再返回去就可以了。这种方式如果说你的路由是显性的，就是直接显示在浏览器地址栏，你会发现，一直在换，而我目前使用的则是第二种方式。</p>\n<h3 id=\"第二种：provide-x2F-inject-的方式\"><a href=\"#第二种：provide-x2F-inject-的方式\" class=\"headerlink\" title=\"第二种：provide &#x2F; inject 的方式\"></a>第二种：provide &#x2F; inject 的方式</h3><p>这种方式与<code>Spring boot</code>中的切面&#x2F;注解有点类似，就是通过<code>provide</code>让<code>App.vue</code>为所有子组件注入一个<code>reload</code>方法，然后在需要使用的页面，通过<code>inject</code>注入即可、请看代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;router-view v-if=&quot;isRouterAlive&quot;&gt;&lt;/router-view&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &quot;App&quot;,</span><br><span class=\"line\">  provide() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      reload: this.reload</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      isRouterAlive: true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    reload() &#123;</span><br><span class=\"line\">      this.isRouterAlive = false;</span><br><span class=\"line\">      this.$nextTick(function() &#123;</span><br><span class=\"line\">        this.isRouterAlive = true;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在需要调用的子页面：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">   &lt;!--你的子页面布局--&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    //...</span><br><span class=\"line\">    inject: [&#x27;reload&#x27;],</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        delData()&#123;</span><br><span class=\"line\">            //在axios成功的回调里面</span><br><span class=\"line\">            this.reload();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>以上就是这篇文章的全部内容了，希望本文的内容对大家的学习或者工作具有一定的参考学习价值，如果有疑问大家可以留言交流，谢谢大家对我的支持。😘✔</p>\n","categories":[{"name":"教程分享","path":"api/categories/教程分享.json"},{"name":"Vue","path":"api/categories/Vue.json"}],"tags":[{"name":"Vue","path":"api/tags/Vue.json"}]}