{"title":"用Python从零开始创建区块链","slug":"build_blockchain_by_python","date":"2018-02-09T09:35:23.000Z","updated":"2022-10-19T14:40:00.244Z","comments":true,"path":"api/articles/build_blockchain_by_python.json","realPath":"/2018/build_blockchain_by_python/index/","excerpt":null,"covers":["/img/postman_get_mine.png","/img/postman_post_new.png","/img/postman_register.png","/img/postman_resolve.png"],"cover":"/img/postman_get_mine.png","content":"<p><em>本文主要内容翻译自<a href=\"https://hackernoon.com/learn-blockchains-by-building-one-117428612f46\">Learn Blockchains by Building One</a></em></p>\n<p>作者认为最快的学习区块链的方式是自己创建一个，本文就跟随作者用Python来创建一个区块链。</p>\n<p>对数字货币的崛起感到新奇的我们，并且想知道其背后的技术——区块链是怎样实现的。</p>\n<p>但是完全搞懂区块链并非易事，我喜欢在实践中学习，通过写代码来学习技术会掌握得更牢固。通过构建一个区块链可以加深对区块链的理解。</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>本文要求读者对Python有基本的理解，能读写基本的Python，并且需要对HTTP请求有基本的了解。</p>\n<p>我们知道区块链是由区块的记录构成的不可变、有序的链结构，记录可以是交易、文件或任何你想要的数据，重要的是它们是通过哈希值（hashes）链接起来的。</p>\n<p>如果你还不是很了解哈希，可以查看<a href=\"https://learncryptography.com/hash-functions/what-are-hash-functions\">这篇文章</a></p>\n<h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><p>环境准备，确保已经安装Python3.6+, pip , Flask, requests<br>安装方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install Flask==0.12.2 requests==2.18.4</span><br></pre></td></tr></table></figure>\n<p>同时还需要一个HTTP客户端，比如Postman，cURL或其它客户端。</p>\n<p>参考<a href=\"https://github.com/xilibi2003/blockchain\">源代码</a></p>\n<h2 id=\"开始创建Blockchain\"><a href=\"#开始创建Blockchain\" class=\"headerlink\" title=\"开始创建Blockchain\"></a>开始创建Blockchain</h2><p>新建一个文件 blockchain.py，本文所有的代码都写在这一个文件中，可以随时参考源代码</p>\n<h3 id=\"Blockchain类\"><a href=\"#Blockchain类\" class=\"headerlink\" title=\"Blockchain类\"></a>Blockchain类</h3><p>首先创建一个Blockchain类，在构造函数中创建了两个列表，一个用于储存区块链，一个用于储存交易。<br>以下是Blockchain类的框架:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Blockchain</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.chain = []</span><br><span class=\"line\">        self.current_transactions = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">new_block</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># Creates a new Block and adds it to the chain</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">new_transaction</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># Adds a new transaction to the list of transactions</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">hash</span>(<span class=\"params\">block</span>):</span><br><span class=\"line\">        <span class=\"comment\"># Hashes a Block</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">last_block</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># Returns the last Block in the chain</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n\n<p>Blockchain类用来管理链条，它能存储交易，加入新块等，下面我们来进一步完善这些方法。</p>\n<h3 id=\"块结构\"><a href=\"#块结构\" class=\"headerlink\" title=\"块结构\"></a>块结构</h3><p>每个区块包含属性：索引（index），Unix时间戳（timestamp），交易列表（transactions），工作量证明（稍后解释）以及前一个区块的Hash值。</p>\n<p>以下是一个区块的结构：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">block = &#123;</span><br><span class=\"line\">    &#x27;index&#x27;: 1,</span><br><span class=\"line\">    &#x27;timestamp&#x27;: 1506057125.900785,</span><br><span class=\"line\">    &#x27;transactions&#x27;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &#x27;sender&#x27;: &quot;8527147fe1f5426f9dd545de4b27ee00&quot;,</span><br><span class=\"line\">            &#x27;recipient&#x27;: &quot;a77f5cdfa2934df3954a5c7c7da5df1f&quot;,</span><br><span class=\"line\">            &#x27;amount&#x27;: 5,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &#x27;proof&#x27;: 324984774000,</span><br><span class=\"line\">    &#x27;previous_hash&#x27;: &quot;2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>到这里，区块链的概念就清楚了，每个新的区块都包含上一个区块的Hash，这是关键的一点，它保障了区块链不可变性。如果攻击者破坏了前面的某个区块，那么后面所有区块的Hash都会变得不正确。不理解的话，慢慢消化，可参考<a href=\"\">区块链记账原理</a></p>\n<h3 id=\"加入交易\"><a href=\"#加入交易\" class=\"headerlink\" title=\"加入交易\"></a>加入交易</h3><p>接下来我们需要添加一个交易，来完善下new_transaction方法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Blockchain</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">new_transaction</span>(<span class=\"params\">self, sender, recipient, amount</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        生成新交易信息，信息将加入到下一个待挖的区块中</span></span><br><span class=\"line\"><span class=\"string\">        :param sender: &lt;str&gt; Address of the Sender</span></span><br><span class=\"line\"><span class=\"string\">        :param recipient: &lt;str&gt; Address of the Recipient</span></span><br><span class=\"line\"><span class=\"string\">        :param amount: &lt;int&gt; Amount</span></span><br><span class=\"line\"><span class=\"string\">        :return: &lt;int&gt; The index of the Block that will hold this transaction</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        self.current_transactions.append(&#123;</span><br><span class=\"line\">            <span class=\"string\">&#x27;sender&#x27;</span>: sender,</span><br><span class=\"line\">            <span class=\"string\">&#x27;recipient&#x27;</span>: recipient,</span><br><span class=\"line\">            <span class=\"string\">&#x27;amount&#x27;</span>: amount,</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.last_block[<span class=\"string\">&#x27;index&#x27;</span>] + <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>方法向列表中添加一个交易记录，并返回该记录将被添加到的区块(下一个待挖掘的区块)的索引，等下在用户提交交易时会有用。</p>\n<h3 id=\"创建新块\"><a href=\"#创建新块\" class=\"headerlink\" title=\"创建新块\"></a>创建新块</h3><p>当Blockchain实例化后，我们需要构造一个创世块（没有前区块的第一个区块），并且给它加上一个工作量证明。<br>每个区块都需要经过工作量证明，俗称挖矿，稍后会继续讲解。</p>\n<p>为了构造创世块，我们还需要完善new_block(), new_transaction() 和hash() 方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> hashlib</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Blockchain</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.current_transactions = []</span><br><span class=\"line\">        self.chain = []</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Create the genesis block</span></span><br><span class=\"line\">        self.new_block(previous_hash=<span class=\"number\">1</span>, proof=<span class=\"number\">100</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">new_block</span>(<span class=\"params\">self, proof, previous_hash=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        生成新块</span></span><br><span class=\"line\"><span class=\"string\">        :param proof: &lt;int&gt; The proof given by the Proof of Work algorithm</span></span><br><span class=\"line\"><span class=\"string\">        :param previous_hash: (Optional) &lt;str&gt; Hash of previous Block</span></span><br><span class=\"line\"><span class=\"string\">        :return: &lt;dict&gt; New Block</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        block = &#123;</span><br><span class=\"line\">            <span class=\"string\">&#x27;index&#x27;</span>: <span class=\"built_in\">len</span>(self.chain) + <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;timestamp&#x27;</span>: time(),</span><br><span class=\"line\">            <span class=\"string\">&#x27;transactions&#x27;</span>: self.current_transactions,</span><br><span class=\"line\">            <span class=\"string\">&#x27;proof&#x27;</span>: proof,</span><br><span class=\"line\">            <span class=\"string\">&#x27;previous_hash&#x27;</span>: previous_hash <span class=\"keyword\">or</span> self.<span class=\"built_in\">hash</span>(self.chain[-<span class=\"number\">1</span>]),</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Reset the current list of transactions</span></span><br><span class=\"line\">        self.current_transactions = []</span><br><span class=\"line\"></span><br><span class=\"line\">        self.chain.append(block)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> block</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">new_transaction</span>(<span class=\"params\">self, sender, recipient, amount</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        生成新交易信息，信息将加入到下一个待挖的区块中</span></span><br><span class=\"line\"><span class=\"string\">        :param sender: &lt;str&gt; Address of the Sender</span></span><br><span class=\"line\"><span class=\"string\">        :param recipient: &lt;str&gt; Address of the Recipient</span></span><br><span class=\"line\"><span class=\"string\">        :param amount: &lt;int&gt; Amount</span></span><br><span class=\"line\"><span class=\"string\">        :return: &lt;int&gt; The index of the Block that will hold this transaction</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        self.current_transactions.append(&#123;</span><br><span class=\"line\">            <span class=\"string\">&#x27;sender&#x27;</span>: sender,</span><br><span class=\"line\">            <span class=\"string\">&#x27;recipient&#x27;</span>: recipient,</span><br><span class=\"line\">            <span class=\"string\">&#x27;amount&#x27;</span>: amount,</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.last_block[<span class=\"string\">&#x27;index&#x27;</span>] + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">last_block</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.chain[-<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">hash</span>(<span class=\"params\">block</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        生成块的 SHA-256 hash值</span></span><br><span class=\"line\"><span class=\"string\">        :param block: &lt;dict&gt; Block</span></span><br><span class=\"line\"><span class=\"string\">        :return: &lt;str&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># We must make sure that the Dictionary is Ordered, or we&#x27;ll have inconsistent hashes</span></span><br><span class=\"line\">        block_string = json.dumps(block, sort_keys=<span class=\"literal\">True</span>).encode()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hashlib.sha256(block_string).hexdigest()</span><br></pre></td></tr></table></figure>\n\n<p>通过上面的代码和注释可以对区块链有直观的了解，接下来我们看看区块是怎么挖出来的。</p>\n<h3 id=\"理解工作量证明\"><a href=\"#理解工作量证明\" class=\"headerlink\" title=\"理解工作量证明\"></a>理解工作量证明</h3><p>新的区块依赖工作量证明算法（PoW）来构造。PoW的目标是找出一个符合特定条件的数字，<strong>这个数字很难计算出来，但容易验证。</strong> 这就是工作量证明的核心思想。</p>\n<p>为了方便理解，举个例子：</p>\n<p>假设一个整数 x 乘以另一个整数 y 的积的 Hash 值必须以 0 结尾，即 hash(x * y) &#x3D; ac23dc…0。设变量 x &#x3D; 5，求 y 的值？</p>\n<p>用Python实现如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> hashlib <span class=\"keyword\">import</span> sha256</span><br><span class=\"line\">x = <span class=\"number\">5</span></span><br><span class=\"line\">y = <span class=\"number\">0</span>  <span class=\"comment\"># y未知</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> sha256(<span class=\"string\">f&#x27;<span class=\"subst\">&#123;x*y&#125;</span>&#x27;</span>.encode()).hexdigest()[-<span class=\"number\">1</span>] != <span class=\"string\">&quot;0&quot;</span>:</span><br><span class=\"line\">    y += <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;The solution is y = <span class=\"subst\">&#123;y&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>结果是y&#x3D;21. 因为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hash(5 * 21) = 1253e9373e...5e3600155e860</span><br></pre></td></tr></table></figure>\n\n<p>在比特币中，使用称为<a href=\"https://en.wikipedia.org/wiki/Hashcash\">Hashcash</a>的工作量证明算法，它和上面的问题很类似。矿工们为了争夺创建区块的权利而争相计算结果。通常，计算难度与目标字符串需要满足的特定字符的数量成正比，矿工算出结果后，会获得比特币奖励。<br>当然，在网络上非常容易验证这个结果。</p>\n<h3 id=\"实现工作量证明\"><a href=\"#实现工作量证明\" class=\"headerlink\" title=\"实现工作量证明\"></a>实现工作量证明</h3><p>让我们来实现一个相似PoW算法，规则是：寻找一个数 p，使得它与前一个区块的 proof 拼接成的字符串的 Hash 值以 4 个零开头。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> hashlib</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> uuid <span class=\"keyword\">import</span> uuid4</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Blockchain</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">proof_of_work</span>(<span class=\"params\">self, last_proof</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        简单的工作量证明:</span></span><br><span class=\"line\"><span class=\"string\">         - 查找一个 p&#x27; 使得 hash(pp&#x27;) 以4个0开头</span></span><br><span class=\"line\"><span class=\"string\">         - p 是上一个块的证明,  p&#x27; 是当前的证明</span></span><br><span class=\"line\"><span class=\"string\">        :param last_proof: &lt;int&gt;</span></span><br><span class=\"line\"><span class=\"string\">        :return: &lt;int&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        proof = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> self.valid_proof(last_proof, proof) <span class=\"keyword\">is</span> <span class=\"literal\">False</span>:</span><br><span class=\"line\">            proof += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> proof</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">valid_proof</span>(<span class=\"params\">last_proof, proof</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        验证证明: 是否hash(last_proof, proof)以4个0开头?</span></span><br><span class=\"line\"><span class=\"string\">        :param last_proof: &lt;int&gt; Previous Proof</span></span><br><span class=\"line\"><span class=\"string\">        :param proof: &lt;int&gt; Current Proof</span></span><br><span class=\"line\"><span class=\"string\">        :return: &lt;bool&gt; True if correct, False if not.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        guess = <span class=\"string\">f&#x27;<span class=\"subst\">&#123;last_proof&#125;</span><span class=\"subst\">&#123;proof&#125;</span>&#x27;</span>.encode()</span><br><span class=\"line\">        guess_hash = hashlib.sha256(guess).hexdigest()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> guess_hash[:<span class=\"number\">4</span>] == <span class=\"string\">&quot;0000&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>衡量算法复杂度的办法是修改零开头的个数。使用4个来用于演示，你会发现多一个零都会大大增加计算出结果所需的时间。</p>\n<p>现在Blockchain类基本已经完成了，接下来使用HTTP requests来进行交互。</p>\n<h2 id=\"Blockchain作为API接口\"><a href=\"#Blockchain作为API接口\" class=\"headerlink\" title=\"Blockchain作为API接口\"></a>Blockchain作为API接口</h2><p>我们将使用Python Flask框架，这是一个轻量Web应用框架，它方便将网络请求映射到 Python函数，现在我们来让Blockchain运行在基于Flask web上。</p>\n<p>我们将创建三个接口：</p>\n<ul>\n<li>&#x2F;transactions&#x2F;new 创建一个交易并添加到区块</li>\n<li>&#x2F;mine 告诉服务器去挖掘新的区块</li>\n<li>&#x2F;chain 返回整个区块链</li>\n</ul>\n<h3 id=\"创建节点\"><a href=\"#创建节点\" class=\"headerlink\" title=\"创建节点\"></a>创建节点</h3><p>我们的“Flask服务器”将扮演区块链网络中的一个节点。我们先添加一些框架代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> hashlib</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">from</span> textwrap <span class=\"keyword\">import</span> dedent</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> uuid <span class=\"keyword\">import</span> uuid4</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Blockchain</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Instantiate our Node</span></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Generate a globally unique address for this node</span></span><br><span class=\"line\">node_identifier = <span class=\"built_in\">str</span>(uuid4()).replace(<span class=\"string\">&#x27;-&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Instantiate the Blockchain</span></span><br><span class=\"line\">blockchain = Blockchain()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/mine&#x27;</span>, methods=[<span class=\"string\">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">mine</span>():</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;We&#x27;ll mine a new Block&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/transactions/new&#x27;</span>, methods=[<span class=\"string\">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">new_transaction</span>():</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;We&#x27;ll add a new transaction&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/chain&#x27;</span>, methods=[<span class=\"string\">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">full_chain</span>():</span><br><span class=\"line\">    response = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;chain&#x27;</span>: blockchain.chain,</span><br><span class=\"line\">        <span class=\"string\">&#x27;length&#x27;</span>: <span class=\"built_in\">len</span>(blockchain.chain),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> jsonify(response), <span class=\"number\">200</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    app.run(host=<span class=\"string\">&#x27;0.0.0.0&#x27;</span>, port=<span class=\"number\">5000</span>)</span><br></pre></td></tr></table></figure>\n\n<p>简单的说明一下以上代码：<br>第15行: 创建一个节点.<br>第18行: 为节点创建一个随机的名字.<br>第21行: 实例Blockchain类.<br>第24–26行: 创建&#x2F;mine GET接口。<br>第28–30行: 创建&#x2F;transactions&#x2F;new POST接口,可以给接口发送交易数据.<br>第32–38行: 创建 &#x2F;chain 接口, 返回整个区块链。<br>第40–41行: 服务运行在端口5000上.</p>\n<h3 id=\"发送交易\"><a href=\"#发送交易\" class=\"headerlink\" title=\"发送交易\"></a>发送交易</h3><p>发送到节点的交易数据结构如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"> &quot;sender&quot;: &quot;my address&quot;,</span><br><span class=\"line\"> &quot;recipient&quot;: &quot;someone else&#x27;s address&quot;,</span><br><span class=\"line\"> &quot;amount&quot;: 5</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>之前已经有添加交易的方法，基于接口来添加交易就很简单了</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> hashlib</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">from</span> textwrap <span class=\"keyword\">import</span> dedent</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> uuid <span class=\"keyword\">import</span> uuid4</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, jsonify, request</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/transactions/new&#x27;</span>, methods=[<span class=\"string\">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">new_transaction</span>():</span><br><span class=\"line\">    values = request.get_json()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Check that the required fields are in the POST&#x27;ed data</span></span><br><span class=\"line\">    required = [<span class=\"string\">&#x27;sender&#x27;</span>, <span class=\"string\">&#x27;recipient&#x27;</span>, <span class=\"string\">&#x27;amount&#x27;</span>]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"built_in\">all</span>(k <span class=\"keyword\">in</span> values <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> required):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Missing values&#x27;</span>, <span class=\"number\">400</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Create a new Transaction</span></span><br><span class=\"line\">    index = blockchain.new_transaction(values[<span class=\"string\">&#x27;sender&#x27;</span>], values[<span class=\"string\">&#x27;recipient&#x27;</span>], values[<span class=\"string\">&#x27;amount&#x27;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    response = &#123;<span class=\"string\">&#x27;message&#x27;</span>: <span class=\"string\">f&#x27;Transaction will be added to Block <span class=\"subst\">&#123;index&#125;</span>&#x27;</span>&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> jsonify(response), <span class=\"number\">201</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"挖矿\"><a href=\"#挖矿\" class=\"headerlink\" title=\"挖矿\"></a>挖矿</h3><p>挖矿正是神奇所在，它很简单，做了一下三件事：</p>\n<ol>\n<li>计算工作量证明PoW</li>\n<li>通过新增一个交易授予矿工（自己）一个币</li>\n<li>构造新区块并将其添加到链中</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> hashlib</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> uuid <span class=\"keyword\">import</span> uuid4</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, jsonify, request</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/mine&#x27;</span>, methods=[<span class=\"string\">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">mine</span>():</span><br><span class=\"line\">    <span class=\"comment\"># We run the proof of work algorithm to get the next proof...</span></span><br><span class=\"line\">    last_block = blockchain.last_block</span><br><span class=\"line\">    last_proof = last_block[<span class=\"string\">&#x27;proof&#x27;</span>]</span><br><span class=\"line\">    proof = blockchain.proof_of_work(last_proof)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 给工作量证明的节点提供奖励.</span></span><br><span class=\"line\">    <span class=\"comment\"># 发送者为 &quot;0&quot; 表明是新挖出的币</span></span><br><span class=\"line\">    blockchain.new_transaction(</span><br><span class=\"line\">        sender=<span class=\"string\">&quot;0&quot;</span>,</span><br><span class=\"line\">        recipient=node_identifier,</span><br><span class=\"line\">        amount=<span class=\"number\">1</span>,</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Forge the new Block by adding it to the chain</span></span><br><span class=\"line\">    block = blockchain.new_block(proof)</span><br><span class=\"line\"></span><br><span class=\"line\">    response = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;message&#x27;</span>: <span class=\"string\">&quot;New Block Forged&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;index&#x27;</span>: block[<span class=\"string\">&#x27;index&#x27;</span>],</span><br><span class=\"line\">        <span class=\"string\">&#x27;transactions&#x27;</span>: block[<span class=\"string\">&#x27;transactions&#x27;</span>],</span><br><span class=\"line\">        <span class=\"string\">&#x27;proof&#x27;</span>: block[<span class=\"string\">&#x27;proof&#x27;</span>],</span><br><span class=\"line\">        <span class=\"string\">&#x27;previous_hash&#x27;</span>: block[<span class=\"string\">&#x27;previous_hash&#x27;</span>],</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> jsonify(response), <span class=\"number\">200</span></span><br></pre></td></tr></table></figure>\n\n<p>注意交易的接收者是我们自己的服务器节点，我们做的大部分工作都只是围绕Blockchain类方法进行交互。到此，我们的区块链就算完成了，我们来实际运行下</p>\n<h2 id=\"运行区块链\"><a href=\"#运行区块链\" class=\"headerlink\" title=\"运行区块链\"></a>运行区块链</h2><p>你可以使用cURL 或Postman 去和API进行交互</p>\n<p>启动server:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python blockchain.py</span><br><span class=\"line\">* Runing on http://127.0.0.1:5000/ (Press CTRL+C to quit)</span><br></pre></td></tr></table></figure>\n\n<p>让我们通过请求 <a href=\"http://localhost:5000/mine\">http://localhost:5000/mine</a> 来进行挖矿</p>\n<p><img src=\"/img/postman_get_mine.png\"></p>\n<p>通过post请求，添加一个新交易</p>\n<p><img src=\"/img/postman_post_new.png\"></p>\n<p>如果不是使用Postman，则用一下的cURL语句也是一样的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -X POST -H &quot;Content-Type: application/json&quot; -d &#x27;&#123;</span><br><span class=\"line\"> &quot;sender&quot;: &quot;d4ee26eee15148ee92c6cd394edd974e&quot;,</span><br><span class=\"line\"> &quot;recipient&quot;: &quot;someone-other-address&quot;,</span><br><span class=\"line\"> &quot;amount&quot;: 5</span><br><span class=\"line\">&#125;&#x27; &quot;http://localhost:5000/transactions/new&quot;</span><br></pre></td></tr></table></figure>\n\n<p>在挖了两次矿之后，就有3个块了，通过请求 <a href=\"http://localhost:5000/chain\">http://localhost:5000/chain</a> 可以得到所有的块信息。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;chain&quot;: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;index&quot;: 1,</span><br><span class=\"line\">      &quot;previous_hash&quot;: 1,</span><br><span class=\"line\">      &quot;proof&quot;: 100,</span><br><span class=\"line\">      &quot;timestamp&quot;: 1506280650.770839,</span><br><span class=\"line\">      &quot;transactions&quot;: []</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;index&quot;: 2,</span><br><span class=\"line\">      &quot;previous_hash&quot;: &quot;c099bc...bfb7&quot;,</span><br><span class=\"line\">      &quot;proof&quot;: 35293,</span><br><span class=\"line\">      &quot;timestamp&quot;: 1506280664.717925,</span><br><span class=\"line\">      &quot;transactions&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          &quot;amount&quot;: 1,</span><br><span class=\"line\">          &quot;recipient&quot;: &quot;8bbcb347e0634905b0cac7955bae152b&quot;,</span><br><span class=\"line\">          &quot;sender&quot;: &quot;0&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;index&quot;: 3,</span><br><span class=\"line\">      &quot;previous_hash&quot;: &quot;eff91a...10f2&quot;,</span><br><span class=\"line\">      &quot;proof&quot;: 35089,</span><br><span class=\"line\">      &quot;timestamp&quot;: 1506280666.1086972,</span><br><span class=\"line\">      &quot;transactions&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          &quot;amount&quot;: 1,</span><br><span class=\"line\">          &quot;recipient&quot;: &quot;8bbcb347e0634905b0cac7955bae152b&quot;,</span><br><span class=\"line\">          &quot;sender&quot;: &quot;0&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;length&quot;: 3</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"一致性-共识\"><a href=\"#一致性-共识\" class=\"headerlink\" title=\"一致性(共识)\"></a>一致性(共识)</h2><p>我们已经有了一个基本的区块链可以接受交易和挖矿。但是区块链系统应该是分布式的。既然是分布式的，那么我们究竟拿什么保证所有节点有同样的链呢？这就是一致性问题，我们要想在网络上有多个节点，就必须实现一个一致性的算法。</p>\n<h3 id=\"注册节点\"><a href=\"#注册节点\" class=\"headerlink\" title=\"注册节点\"></a>注册节点</h3><p>在实现一致性算法之前，我们需要找到一种方式让一个节点知道它相邻的节点。每个节点都需要保存一份包含网络中其它节点的记录。因此让我们新增几个接口：</p>\n<ol>\n<li>&#x2F;nodes&#x2F;register 接收URL形式的新节点列表</li>\n<li>&#x2F;nodes&#x2F;resolve 执行一致性算法，解决任何冲突，确保节点拥有正确的链</li>\n</ol>\n<p>我们修改下Blockchain的init函数并提供一个注册节点方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib.parse <span class=\"keyword\">import</span> urlparse</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Blockchain</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        self.nodes = <span class=\"built_in\">set</span>()</span><br><span class=\"line\">        ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">register_node</span>(<span class=\"params\">self, address</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Add a new node to the list of nodes</span></span><br><span class=\"line\"><span class=\"string\">        :param address: &lt;str&gt; Address of node. Eg. &#x27;http://192.168.0.5:5000&#x27;</span></span><br><span class=\"line\"><span class=\"string\">        :return: None</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        parsed_url = urlparse(address)</span><br><span class=\"line\">        self.nodes.add(parsed_url.netloc)</span><br></pre></td></tr></table></figure>\n\n<p>我们用 set 来储存节点，这是一种避免重复添加节点的简单方法。</p>\n<h3 id=\"实现共识算法\"><a href=\"#实现共识算法\" class=\"headerlink\" title=\"实现共识算法\"></a>实现共识算法</h3><p>前面提到，冲突是指不同的节点拥有不同的链，为了解决这个问题，规定最长的、有效的链才是最终的链，换句话说，网络中有效最长链才是实际的链。</p>\n<p>我们使用一下的算法，来达到网络中的共识</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Blockchain</span>(<span class=\"title class_ inherited__\">object</span>)</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">valid_chain</span>(<span class=\"params\">self, chain</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Determine if a given blockchain is valid</span></span><br><span class=\"line\"><span class=\"string\">        :param chain: &lt;list&gt; A blockchain</span></span><br><span class=\"line\"><span class=\"string\">        :return: &lt;bool&gt; True if valid, False if not</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        last_block = chain[<span class=\"number\">0</span>]</span><br><span class=\"line\">        current_index = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> current_index &lt; <span class=\"built_in\">len</span>(chain):</span><br><span class=\"line\">            block = chain[current_index]</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;<span class=\"subst\">&#123;last_block&#125;</span>&#x27;</span>)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;<span class=\"subst\">&#123;block&#125;</span>&#x27;</span>)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n-----------\\n&quot;</span>)</span><br><span class=\"line\">            <span class=\"comment\"># Check that the hash of the block is correct</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> block[<span class=\"string\">&#x27;previous_hash&#x27;</span>] != self.<span class=\"built_in\">hash</span>(last_block):</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># Check that the Proof of Work is correct</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.valid_proof(last_block[<span class=\"string\">&#x27;proof&#x27;</span>], block[<span class=\"string\">&#x27;proof&#x27;</span>]):</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">            last_block = block</span><br><span class=\"line\">            current_index += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">resolve_conflicts</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        共识算法解决冲突</span></span><br><span class=\"line\"><span class=\"string\">        使用网络中最长的链.</span></span><br><span class=\"line\"><span class=\"string\">        :return: &lt;bool&gt; True 如果链被取代, 否则为False</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        neighbours = self.nodes</span><br><span class=\"line\">        new_chain = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># We&#x27;re only looking for chains longer than ours</span></span><br><span class=\"line\">        max_length = <span class=\"built_in\">len</span>(self.chain)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Grab and verify the chains from all the nodes in our network</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> node <span class=\"keyword\">in</span> neighbours:</span><br><span class=\"line\">            response = requests.get(<span class=\"string\">f&#x27;http://<span class=\"subst\">&#123;node&#125;</span>/chain&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> response.status_code == <span class=\"number\">200</span>:</span><br><span class=\"line\">                length = response.json()[<span class=\"string\">&#x27;length&#x27;</span>]</span><br><span class=\"line\">                chain = response.json()[<span class=\"string\">&#x27;chain&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\"># Check if the length is longer and the chain is valid</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> length &gt; max_length <span class=\"keyword\">and</span> self.valid_chain(chain):</span><br><span class=\"line\">                    max_length = length</span><br><span class=\"line\">                    new_chain = chain</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Replace our chain if we discovered a new, valid chain longer than ours</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> new_chain:</span><br><span class=\"line\">            self.chain = new_chain</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n\n<p>第一个方法 valid_chain() 用来检查是否是有效链，遍历每个块验证hash和proof.</p>\n<p>第2个方法 resolve_conflicts() 用来解决冲突，遍历所有的邻居节点，并用上一个方法检查链的有效性，<strong>如果发现有效更长链，就替换掉自己的链</strong></p>\n<p>让我们添加两个路由，一个用来注册节点，一个用来解决冲突。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@app.route(&#x27;/nodes/register&#x27;, methods=[&#x27;POST&#x27;])</span><br><span class=\"line\">def register_nodes():</span><br><span class=\"line\">    values = request.get_json()</span><br><span class=\"line\"></span><br><span class=\"line\">    nodes = values.get(&#x27;nodes&#x27;)</span><br><span class=\"line\">    if nodes is None:</span><br><span class=\"line\">        return &quot;Error: Please supply a valid list of nodes&quot;, 400</span><br><span class=\"line\"></span><br><span class=\"line\">    for node in nodes:</span><br><span class=\"line\">        blockchain.register_node(node)</span><br><span class=\"line\"></span><br><span class=\"line\">    response = &#123;</span><br><span class=\"line\">        &#x27;message&#x27;: &#x27;New nodes have been added&#x27;,</span><br><span class=\"line\">        &#x27;total_nodes&#x27;: list(blockchain.nodes),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return jsonify(response), 201</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@app.route(&#x27;/nodes/resolve&#x27;, methods=[&#x27;GET&#x27;])</span><br><span class=\"line\">def consensus():</span><br><span class=\"line\">    replaced = blockchain.resolve_conflicts()</span><br><span class=\"line\"></span><br><span class=\"line\">    if replaced:</span><br><span class=\"line\">        response = &#123;</span><br><span class=\"line\">            &#x27;message&#x27;: &#x27;Our chain was replaced&#x27;,</span><br><span class=\"line\">            &#x27;new_chain&#x27;: blockchain.chain</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        response = &#123;</span><br><span class=\"line\">            &#x27;message&#x27;: &#x27;Our chain is authoritative&#x27;,</span><br><span class=\"line\">            &#x27;chain&#x27;: blockchain.chain</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return jsonify(response), 200</span><br></pre></td></tr></table></figure>\n\n<p>你可以在不同的机器运行节点，或在一台机机开启不同的网络端口来模拟多节点的网络，这里在同一台机器开启不同的端口演示，在不同的终端运行一下命令，就启动了两个节点：<a href=\"http://localhost:5000/\">http://localhost:5000</a> 和 <a href=\"http://localhost:5001/\">http://localhost:5001</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pipenv run python blockchain.py</span><br><span class=\"line\">pipenv run python blockchain.py -p 5001</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/img/postman_register.png\"></p>\n<p>然后在节点2上挖两个块，确保是更长的链，然后在节点1上访问接口&#x2F;nodes&#x2F;resolve ,这时节点1的链会通过共识算法被节点2的链取代。</p>\n<p><img src=\"/img/postman_resolve.png\"></p>\n<p>好啦，你可以邀请朋友们一起来测试你的区块链</p>\n","more":"<p><em>本文主要内容翻译自<a href=\"https://hackernoon.com/learn-blockchains-by-building-one-117428612f46\">Learn Blockchains by Building One</a></em></p>\n<p>作者认为最快的学习区块链的方式是自己创建一个，本文就跟随作者用Python来创建一个区块链。</p>\n<p>对数字货币的崛起感到新奇的我们，并且想知道其背后的技术——区块链是怎样实现的。</p>\n<p>但是完全搞懂区块链并非易事，我喜欢在实践中学习，通过写代码来学习技术会掌握得更牢固。通过构建一个区块链可以加深对区块链的理解。</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>本文要求读者对Python有基本的理解，能读写基本的Python，并且需要对HTTP请求有基本的了解。</p>\n<p>我们知道区块链是由区块的记录构成的不可变、有序的链结构，记录可以是交易、文件或任何你想要的数据，重要的是它们是通过哈希值（hashes）链接起来的。</p>\n<p>如果你还不是很了解哈希，可以查看<a href=\"https://learncryptography.com/hash-functions/what-are-hash-functions\">这篇文章</a></p>\n<h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><p>环境准备，确保已经安装Python3.6+, pip , Flask, requests<br>安装方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install Flask==0.12.2 requests==2.18.4</span><br></pre></td></tr></table></figure>\n<p>同时还需要一个HTTP客户端，比如Postman，cURL或其它客户端。</p>\n<p>参考<a href=\"https://github.com/xilibi2003/blockchain\">源代码</a></p>\n<h2 id=\"开始创建Blockchain\"><a href=\"#开始创建Blockchain\" class=\"headerlink\" title=\"开始创建Blockchain\"></a>开始创建Blockchain</h2><p>新建一个文件 blockchain.py，本文所有的代码都写在这一个文件中，可以随时参考源代码</p>\n<h3 id=\"Blockchain类\"><a href=\"#Blockchain类\" class=\"headerlink\" title=\"Blockchain类\"></a>Blockchain类</h3><p>首先创建一个Blockchain类，在构造函数中创建了两个列表，一个用于储存区块链，一个用于储存交易。<br>以下是Blockchain类的框架:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Blockchain</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.chain = []</span><br><span class=\"line\">        self.current_transactions = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">new_block</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># Creates a new Block and adds it to the chain</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">new_transaction</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># Adds a new transaction to the list of transactions</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">hash</span>(<span class=\"params\">block</span>):</span><br><span class=\"line\">        <span class=\"comment\"># Hashes a Block</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">last_block</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># Returns the last Block in the chain</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n\n<p>Blockchain类用来管理链条，它能存储交易，加入新块等，下面我们来进一步完善这些方法。</p>\n<h3 id=\"块结构\"><a href=\"#块结构\" class=\"headerlink\" title=\"块结构\"></a>块结构</h3><p>每个区块包含属性：索引（index），Unix时间戳（timestamp），交易列表（transactions），工作量证明（稍后解释）以及前一个区块的Hash值。</p>\n<p>以下是一个区块的结构：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">block = &#123;</span><br><span class=\"line\">    &#x27;index&#x27;: 1,</span><br><span class=\"line\">    &#x27;timestamp&#x27;: 1506057125.900785,</span><br><span class=\"line\">    &#x27;transactions&#x27;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &#x27;sender&#x27;: &quot;8527147fe1f5426f9dd545de4b27ee00&quot;,</span><br><span class=\"line\">            &#x27;recipient&#x27;: &quot;a77f5cdfa2934df3954a5c7c7da5df1f&quot;,</span><br><span class=\"line\">            &#x27;amount&#x27;: 5,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &#x27;proof&#x27;: 324984774000,</span><br><span class=\"line\">    &#x27;previous_hash&#x27;: &quot;2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>到这里，区块链的概念就清楚了，每个新的区块都包含上一个区块的Hash，这是关键的一点，它保障了区块链不可变性。如果攻击者破坏了前面的某个区块，那么后面所有区块的Hash都会变得不正确。不理解的话，慢慢消化，可参考<a href=\"\">区块链记账原理</a></p>\n<h3 id=\"加入交易\"><a href=\"#加入交易\" class=\"headerlink\" title=\"加入交易\"></a>加入交易</h3><p>接下来我们需要添加一个交易，来完善下new_transaction方法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Blockchain</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">new_transaction</span>(<span class=\"params\">self, sender, recipient, amount</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        生成新交易信息，信息将加入到下一个待挖的区块中</span></span><br><span class=\"line\"><span class=\"string\">        :param sender: &lt;str&gt; Address of the Sender</span></span><br><span class=\"line\"><span class=\"string\">        :param recipient: &lt;str&gt; Address of the Recipient</span></span><br><span class=\"line\"><span class=\"string\">        :param amount: &lt;int&gt; Amount</span></span><br><span class=\"line\"><span class=\"string\">        :return: &lt;int&gt; The index of the Block that will hold this transaction</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        self.current_transactions.append(&#123;</span><br><span class=\"line\">            <span class=\"string\">&#x27;sender&#x27;</span>: sender,</span><br><span class=\"line\">            <span class=\"string\">&#x27;recipient&#x27;</span>: recipient,</span><br><span class=\"line\">            <span class=\"string\">&#x27;amount&#x27;</span>: amount,</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.last_block[<span class=\"string\">&#x27;index&#x27;</span>] + <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>方法向列表中添加一个交易记录，并返回该记录将被添加到的区块(下一个待挖掘的区块)的索引，等下在用户提交交易时会有用。</p>\n<h3 id=\"创建新块\"><a href=\"#创建新块\" class=\"headerlink\" title=\"创建新块\"></a>创建新块</h3><p>当Blockchain实例化后，我们需要构造一个创世块（没有前区块的第一个区块），并且给它加上一个工作量证明。<br>每个区块都需要经过工作量证明，俗称挖矿，稍后会继续讲解。</p>\n<p>为了构造创世块，我们还需要完善new_block(), new_transaction() 和hash() 方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> hashlib</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Blockchain</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.current_transactions = []</span><br><span class=\"line\">        self.chain = []</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Create the genesis block</span></span><br><span class=\"line\">        self.new_block(previous_hash=<span class=\"number\">1</span>, proof=<span class=\"number\">100</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">new_block</span>(<span class=\"params\">self, proof, previous_hash=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        生成新块</span></span><br><span class=\"line\"><span class=\"string\">        :param proof: &lt;int&gt; The proof given by the Proof of Work algorithm</span></span><br><span class=\"line\"><span class=\"string\">        :param previous_hash: (Optional) &lt;str&gt; Hash of previous Block</span></span><br><span class=\"line\"><span class=\"string\">        :return: &lt;dict&gt; New Block</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        block = &#123;</span><br><span class=\"line\">            <span class=\"string\">&#x27;index&#x27;</span>: <span class=\"built_in\">len</span>(self.chain) + <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;timestamp&#x27;</span>: time(),</span><br><span class=\"line\">            <span class=\"string\">&#x27;transactions&#x27;</span>: self.current_transactions,</span><br><span class=\"line\">            <span class=\"string\">&#x27;proof&#x27;</span>: proof,</span><br><span class=\"line\">            <span class=\"string\">&#x27;previous_hash&#x27;</span>: previous_hash <span class=\"keyword\">or</span> self.<span class=\"built_in\">hash</span>(self.chain[-<span class=\"number\">1</span>]),</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Reset the current list of transactions</span></span><br><span class=\"line\">        self.current_transactions = []</span><br><span class=\"line\"></span><br><span class=\"line\">        self.chain.append(block)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> block</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">new_transaction</span>(<span class=\"params\">self, sender, recipient, amount</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        生成新交易信息，信息将加入到下一个待挖的区块中</span></span><br><span class=\"line\"><span class=\"string\">        :param sender: &lt;str&gt; Address of the Sender</span></span><br><span class=\"line\"><span class=\"string\">        :param recipient: &lt;str&gt; Address of the Recipient</span></span><br><span class=\"line\"><span class=\"string\">        :param amount: &lt;int&gt; Amount</span></span><br><span class=\"line\"><span class=\"string\">        :return: &lt;int&gt; The index of the Block that will hold this transaction</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        self.current_transactions.append(&#123;</span><br><span class=\"line\">            <span class=\"string\">&#x27;sender&#x27;</span>: sender,</span><br><span class=\"line\">            <span class=\"string\">&#x27;recipient&#x27;</span>: recipient,</span><br><span class=\"line\">            <span class=\"string\">&#x27;amount&#x27;</span>: amount,</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.last_block[<span class=\"string\">&#x27;index&#x27;</span>] + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">last_block</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.chain[-<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">hash</span>(<span class=\"params\">block</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        生成块的 SHA-256 hash值</span></span><br><span class=\"line\"><span class=\"string\">        :param block: &lt;dict&gt; Block</span></span><br><span class=\"line\"><span class=\"string\">        :return: &lt;str&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># We must make sure that the Dictionary is Ordered, or we&#x27;ll have inconsistent hashes</span></span><br><span class=\"line\">        block_string = json.dumps(block, sort_keys=<span class=\"literal\">True</span>).encode()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hashlib.sha256(block_string).hexdigest()</span><br></pre></td></tr></table></figure>\n\n<p>通过上面的代码和注释可以对区块链有直观的了解，接下来我们看看区块是怎么挖出来的。</p>\n<h3 id=\"理解工作量证明\"><a href=\"#理解工作量证明\" class=\"headerlink\" title=\"理解工作量证明\"></a>理解工作量证明</h3><p>新的区块依赖工作量证明算法（PoW）来构造。PoW的目标是找出一个符合特定条件的数字，<strong>这个数字很难计算出来，但容易验证。</strong> 这就是工作量证明的核心思想。</p>\n<p>为了方便理解，举个例子：</p>\n<p>假设一个整数 x 乘以另一个整数 y 的积的 Hash 值必须以 0 结尾，即 hash(x * y) &#x3D; ac23dc…0。设变量 x &#x3D; 5，求 y 的值？</p>\n<p>用Python实现如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> hashlib <span class=\"keyword\">import</span> sha256</span><br><span class=\"line\">x = <span class=\"number\">5</span></span><br><span class=\"line\">y = <span class=\"number\">0</span>  <span class=\"comment\"># y未知</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> sha256(<span class=\"string\">f&#x27;<span class=\"subst\">&#123;x*y&#125;</span>&#x27;</span>.encode()).hexdigest()[-<span class=\"number\">1</span>] != <span class=\"string\">&quot;0&quot;</span>:</span><br><span class=\"line\">    y += <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;The solution is y = <span class=\"subst\">&#123;y&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>结果是y&#x3D;21. 因为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hash(5 * 21) = 1253e9373e...5e3600155e860</span><br></pre></td></tr></table></figure>\n\n<p>在比特币中，使用称为<a href=\"https://en.wikipedia.org/wiki/Hashcash\">Hashcash</a>的工作量证明算法，它和上面的问题很类似。矿工们为了争夺创建区块的权利而争相计算结果。通常，计算难度与目标字符串需要满足的特定字符的数量成正比，矿工算出结果后，会获得比特币奖励。<br>当然，在网络上非常容易验证这个结果。</p>\n<h3 id=\"实现工作量证明\"><a href=\"#实现工作量证明\" class=\"headerlink\" title=\"实现工作量证明\"></a>实现工作量证明</h3><p>让我们来实现一个相似PoW算法，规则是：寻找一个数 p，使得它与前一个区块的 proof 拼接成的字符串的 Hash 值以 4 个零开头。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> hashlib</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> uuid <span class=\"keyword\">import</span> uuid4</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Blockchain</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">proof_of_work</span>(<span class=\"params\">self, last_proof</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        简单的工作量证明:</span></span><br><span class=\"line\"><span class=\"string\">         - 查找一个 p&#x27; 使得 hash(pp&#x27;) 以4个0开头</span></span><br><span class=\"line\"><span class=\"string\">         - p 是上一个块的证明,  p&#x27; 是当前的证明</span></span><br><span class=\"line\"><span class=\"string\">        :param last_proof: &lt;int&gt;</span></span><br><span class=\"line\"><span class=\"string\">        :return: &lt;int&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        proof = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> self.valid_proof(last_proof, proof) <span class=\"keyword\">is</span> <span class=\"literal\">False</span>:</span><br><span class=\"line\">            proof += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> proof</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">valid_proof</span>(<span class=\"params\">last_proof, proof</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        验证证明: 是否hash(last_proof, proof)以4个0开头?</span></span><br><span class=\"line\"><span class=\"string\">        :param last_proof: &lt;int&gt; Previous Proof</span></span><br><span class=\"line\"><span class=\"string\">        :param proof: &lt;int&gt; Current Proof</span></span><br><span class=\"line\"><span class=\"string\">        :return: &lt;bool&gt; True if correct, False if not.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        guess = <span class=\"string\">f&#x27;<span class=\"subst\">&#123;last_proof&#125;</span><span class=\"subst\">&#123;proof&#125;</span>&#x27;</span>.encode()</span><br><span class=\"line\">        guess_hash = hashlib.sha256(guess).hexdigest()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> guess_hash[:<span class=\"number\">4</span>] == <span class=\"string\">&quot;0000&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>衡量算法复杂度的办法是修改零开头的个数。使用4个来用于演示，你会发现多一个零都会大大增加计算出结果所需的时间。</p>\n<p>现在Blockchain类基本已经完成了，接下来使用HTTP requests来进行交互。</p>\n<h2 id=\"Blockchain作为API接口\"><a href=\"#Blockchain作为API接口\" class=\"headerlink\" title=\"Blockchain作为API接口\"></a>Blockchain作为API接口</h2><p>我们将使用Python Flask框架，这是一个轻量Web应用框架，它方便将网络请求映射到 Python函数，现在我们来让Blockchain运行在基于Flask web上。</p>\n<p>我们将创建三个接口：</p>\n<ul>\n<li>&#x2F;transactions&#x2F;new 创建一个交易并添加到区块</li>\n<li>&#x2F;mine 告诉服务器去挖掘新的区块</li>\n<li>&#x2F;chain 返回整个区块链</li>\n</ul>\n<h3 id=\"创建节点\"><a href=\"#创建节点\" class=\"headerlink\" title=\"创建节点\"></a>创建节点</h3><p>我们的“Flask服务器”将扮演区块链网络中的一个节点。我们先添加一些框架代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> hashlib</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">from</span> textwrap <span class=\"keyword\">import</span> dedent</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> uuid <span class=\"keyword\">import</span> uuid4</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Blockchain</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Instantiate our Node</span></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Generate a globally unique address for this node</span></span><br><span class=\"line\">node_identifier = <span class=\"built_in\">str</span>(uuid4()).replace(<span class=\"string\">&#x27;-&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Instantiate the Blockchain</span></span><br><span class=\"line\">blockchain = Blockchain()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/mine&#x27;</span>, methods=[<span class=\"string\">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">mine</span>():</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;We&#x27;ll mine a new Block&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/transactions/new&#x27;</span>, methods=[<span class=\"string\">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">new_transaction</span>():</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;We&#x27;ll add a new transaction&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/chain&#x27;</span>, methods=[<span class=\"string\">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">full_chain</span>():</span><br><span class=\"line\">    response = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;chain&#x27;</span>: blockchain.chain,</span><br><span class=\"line\">        <span class=\"string\">&#x27;length&#x27;</span>: <span class=\"built_in\">len</span>(blockchain.chain),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> jsonify(response), <span class=\"number\">200</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    app.run(host=<span class=\"string\">&#x27;0.0.0.0&#x27;</span>, port=<span class=\"number\">5000</span>)</span><br></pre></td></tr></table></figure>\n\n<p>简单的说明一下以上代码：<br>第15行: 创建一个节点.<br>第18行: 为节点创建一个随机的名字.<br>第21行: 实例Blockchain类.<br>第24–26行: 创建&#x2F;mine GET接口。<br>第28–30行: 创建&#x2F;transactions&#x2F;new POST接口,可以给接口发送交易数据.<br>第32–38行: 创建 &#x2F;chain 接口, 返回整个区块链。<br>第40–41行: 服务运行在端口5000上.</p>\n<h3 id=\"发送交易\"><a href=\"#发送交易\" class=\"headerlink\" title=\"发送交易\"></a>发送交易</h3><p>发送到节点的交易数据结构如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"> &quot;sender&quot;: &quot;my address&quot;,</span><br><span class=\"line\"> &quot;recipient&quot;: &quot;someone else&#x27;s address&quot;,</span><br><span class=\"line\"> &quot;amount&quot;: 5</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>之前已经有添加交易的方法，基于接口来添加交易就很简单了</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> hashlib</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">from</span> textwrap <span class=\"keyword\">import</span> dedent</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> uuid <span class=\"keyword\">import</span> uuid4</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, jsonify, request</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/transactions/new&#x27;</span>, methods=[<span class=\"string\">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">new_transaction</span>():</span><br><span class=\"line\">    values = request.get_json()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Check that the required fields are in the POST&#x27;ed data</span></span><br><span class=\"line\">    required = [<span class=\"string\">&#x27;sender&#x27;</span>, <span class=\"string\">&#x27;recipient&#x27;</span>, <span class=\"string\">&#x27;amount&#x27;</span>]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"built_in\">all</span>(k <span class=\"keyword\">in</span> values <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> required):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Missing values&#x27;</span>, <span class=\"number\">400</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Create a new Transaction</span></span><br><span class=\"line\">    index = blockchain.new_transaction(values[<span class=\"string\">&#x27;sender&#x27;</span>], values[<span class=\"string\">&#x27;recipient&#x27;</span>], values[<span class=\"string\">&#x27;amount&#x27;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    response = &#123;<span class=\"string\">&#x27;message&#x27;</span>: <span class=\"string\">f&#x27;Transaction will be added to Block <span class=\"subst\">&#123;index&#125;</span>&#x27;</span>&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> jsonify(response), <span class=\"number\">201</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"挖矿\"><a href=\"#挖矿\" class=\"headerlink\" title=\"挖矿\"></a>挖矿</h3><p>挖矿正是神奇所在，它很简单，做了一下三件事：</p>\n<ol>\n<li>计算工作量证明PoW</li>\n<li>通过新增一个交易授予矿工（自己）一个币</li>\n<li>构造新区块并将其添加到链中</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> hashlib</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> uuid <span class=\"keyword\">import</span> uuid4</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, jsonify, request</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/mine&#x27;</span>, methods=[<span class=\"string\">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">mine</span>():</span><br><span class=\"line\">    <span class=\"comment\"># We run the proof of work algorithm to get the next proof...</span></span><br><span class=\"line\">    last_block = blockchain.last_block</span><br><span class=\"line\">    last_proof = last_block[<span class=\"string\">&#x27;proof&#x27;</span>]</span><br><span class=\"line\">    proof = blockchain.proof_of_work(last_proof)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 给工作量证明的节点提供奖励.</span></span><br><span class=\"line\">    <span class=\"comment\"># 发送者为 &quot;0&quot; 表明是新挖出的币</span></span><br><span class=\"line\">    blockchain.new_transaction(</span><br><span class=\"line\">        sender=<span class=\"string\">&quot;0&quot;</span>,</span><br><span class=\"line\">        recipient=node_identifier,</span><br><span class=\"line\">        amount=<span class=\"number\">1</span>,</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Forge the new Block by adding it to the chain</span></span><br><span class=\"line\">    block = blockchain.new_block(proof)</span><br><span class=\"line\"></span><br><span class=\"line\">    response = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;message&#x27;</span>: <span class=\"string\">&quot;New Block Forged&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;index&#x27;</span>: block[<span class=\"string\">&#x27;index&#x27;</span>],</span><br><span class=\"line\">        <span class=\"string\">&#x27;transactions&#x27;</span>: block[<span class=\"string\">&#x27;transactions&#x27;</span>],</span><br><span class=\"line\">        <span class=\"string\">&#x27;proof&#x27;</span>: block[<span class=\"string\">&#x27;proof&#x27;</span>],</span><br><span class=\"line\">        <span class=\"string\">&#x27;previous_hash&#x27;</span>: block[<span class=\"string\">&#x27;previous_hash&#x27;</span>],</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> jsonify(response), <span class=\"number\">200</span></span><br></pre></td></tr></table></figure>\n\n<p>注意交易的接收者是我们自己的服务器节点，我们做的大部分工作都只是围绕Blockchain类方法进行交互。到此，我们的区块链就算完成了，我们来实际运行下</p>\n<h2 id=\"运行区块链\"><a href=\"#运行区块链\" class=\"headerlink\" title=\"运行区块链\"></a>运行区块链</h2><p>你可以使用cURL 或Postman 去和API进行交互</p>\n<p>启动server:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python blockchain.py</span><br><span class=\"line\">* Runing on http://127.0.0.1:5000/ (Press CTRL+C to quit)</span><br></pre></td></tr></table></figure>\n\n<p>让我们通过请求 <a href=\"http://localhost:5000/mine\">http://localhost:5000/mine</a> 来进行挖矿</p>\n<p><img src=\"/img/postman_get_mine.png\"></p>\n<p>通过post请求，添加一个新交易</p>\n<p><img src=\"/img/postman_post_new.png\"></p>\n<p>如果不是使用Postman，则用一下的cURL语句也是一样的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -X POST -H &quot;Content-Type: application/json&quot; -d &#x27;&#123;</span><br><span class=\"line\"> &quot;sender&quot;: &quot;d4ee26eee15148ee92c6cd394edd974e&quot;,</span><br><span class=\"line\"> &quot;recipient&quot;: &quot;someone-other-address&quot;,</span><br><span class=\"line\"> &quot;amount&quot;: 5</span><br><span class=\"line\">&#125;&#x27; &quot;http://localhost:5000/transactions/new&quot;</span><br></pre></td></tr></table></figure>\n\n<p>在挖了两次矿之后，就有3个块了，通过请求 <a href=\"http://localhost:5000/chain\">http://localhost:5000/chain</a> 可以得到所有的块信息。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;chain&quot;: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;index&quot;: 1,</span><br><span class=\"line\">      &quot;previous_hash&quot;: 1,</span><br><span class=\"line\">      &quot;proof&quot;: 100,</span><br><span class=\"line\">      &quot;timestamp&quot;: 1506280650.770839,</span><br><span class=\"line\">      &quot;transactions&quot;: []</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;index&quot;: 2,</span><br><span class=\"line\">      &quot;previous_hash&quot;: &quot;c099bc...bfb7&quot;,</span><br><span class=\"line\">      &quot;proof&quot;: 35293,</span><br><span class=\"line\">      &quot;timestamp&quot;: 1506280664.717925,</span><br><span class=\"line\">      &quot;transactions&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          &quot;amount&quot;: 1,</span><br><span class=\"line\">          &quot;recipient&quot;: &quot;8bbcb347e0634905b0cac7955bae152b&quot;,</span><br><span class=\"line\">          &quot;sender&quot;: &quot;0&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;index&quot;: 3,</span><br><span class=\"line\">      &quot;previous_hash&quot;: &quot;eff91a...10f2&quot;,</span><br><span class=\"line\">      &quot;proof&quot;: 35089,</span><br><span class=\"line\">      &quot;timestamp&quot;: 1506280666.1086972,</span><br><span class=\"line\">      &quot;transactions&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          &quot;amount&quot;: 1,</span><br><span class=\"line\">          &quot;recipient&quot;: &quot;8bbcb347e0634905b0cac7955bae152b&quot;,</span><br><span class=\"line\">          &quot;sender&quot;: &quot;0&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;length&quot;: 3</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"一致性-共识\"><a href=\"#一致性-共识\" class=\"headerlink\" title=\"一致性(共识)\"></a>一致性(共识)</h2><p>我们已经有了一个基本的区块链可以接受交易和挖矿。但是区块链系统应该是分布式的。既然是分布式的，那么我们究竟拿什么保证所有节点有同样的链呢？这就是一致性问题，我们要想在网络上有多个节点，就必须实现一个一致性的算法。</p>\n<h3 id=\"注册节点\"><a href=\"#注册节点\" class=\"headerlink\" title=\"注册节点\"></a>注册节点</h3><p>在实现一致性算法之前，我们需要找到一种方式让一个节点知道它相邻的节点。每个节点都需要保存一份包含网络中其它节点的记录。因此让我们新增几个接口：</p>\n<ol>\n<li>&#x2F;nodes&#x2F;register 接收URL形式的新节点列表</li>\n<li>&#x2F;nodes&#x2F;resolve 执行一致性算法，解决任何冲突，确保节点拥有正确的链</li>\n</ol>\n<p>我们修改下Blockchain的init函数并提供一个注册节点方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib.parse <span class=\"keyword\">import</span> urlparse</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Blockchain</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        self.nodes = <span class=\"built_in\">set</span>()</span><br><span class=\"line\">        ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">register_node</span>(<span class=\"params\">self, address</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Add a new node to the list of nodes</span></span><br><span class=\"line\"><span class=\"string\">        :param address: &lt;str&gt; Address of node. Eg. &#x27;http://192.168.0.5:5000&#x27;</span></span><br><span class=\"line\"><span class=\"string\">        :return: None</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        parsed_url = urlparse(address)</span><br><span class=\"line\">        self.nodes.add(parsed_url.netloc)</span><br></pre></td></tr></table></figure>\n\n<p>我们用 set 来储存节点，这是一种避免重复添加节点的简单方法。</p>\n<h3 id=\"实现共识算法\"><a href=\"#实现共识算法\" class=\"headerlink\" title=\"实现共识算法\"></a>实现共识算法</h3><p>前面提到，冲突是指不同的节点拥有不同的链，为了解决这个问题，规定最长的、有效的链才是最终的链，换句话说，网络中有效最长链才是实际的链。</p>\n<p>我们使用一下的算法，来达到网络中的共识</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Blockchain</span>(<span class=\"title class_ inherited__\">object</span>)</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">valid_chain</span>(<span class=\"params\">self, chain</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Determine if a given blockchain is valid</span></span><br><span class=\"line\"><span class=\"string\">        :param chain: &lt;list&gt; A blockchain</span></span><br><span class=\"line\"><span class=\"string\">        :return: &lt;bool&gt; True if valid, False if not</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        last_block = chain[<span class=\"number\">0</span>]</span><br><span class=\"line\">        current_index = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> current_index &lt; <span class=\"built_in\">len</span>(chain):</span><br><span class=\"line\">            block = chain[current_index]</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;<span class=\"subst\">&#123;last_block&#125;</span>&#x27;</span>)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;<span class=\"subst\">&#123;block&#125;</span>&#x27;</span>)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n-----------\\n&quot;</span>)</span><br><span class=\"line\">            <span class=\"comment\"># Check that the hash of the block is correct</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> block[<span class=\"string\">&#x27;previous_hash&#x27;</span>] != self.<span class=\"built_in\">hash</span>(last_block):</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># Check that the Proof of Work is correct</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.valid_proof(last_block[<span class=\"string\">&#x27;proof&#x27;</span>], block[<span class=\"string\">&#x27;proof&#x27;</span>]):</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">            last_block = block</span><br><span class=\"line\">            current_index += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">resolve_conflicts</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        共识算法解决冲突</span></span><br><span class=\"line\"><span class=\"string\">        使用网络中最长的链.</span></span><br><span class=\"line\"><span class=\"string\">        :return: &lt;bool&gt; True 如果链被取代, 否则为False</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        neighbours = self.nodes</span><br><span class=\"line\">        new_chain = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># We&#x27;re only looking for chains longer than ours</span></span><br><span class=\"line\">        max_length = <span class=\"built_in\">len</span>(self.chain)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Grab and verify the chains from all the nodes in our network</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> node <span class=\"keyword\">in</span> neighbours:</span><br><span class=\"line\">            response = requests.get(<span class=\"string\">f&#x27;http://<span class=\"subst\">&#123;node&#125;</span>/chain&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> response.status_code == <span class=\"number\">200</span>:</span><br><span class=\"line\">                length = response.json()[<span class=\"string\">&#x27;length&#x27;</span>]</span><br><span class=\"line\">                chain = response.json()[<span class=\"string\">&#x27;chain&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\"># Check if the length is longer and the chain is valid</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> length &gt; max_length <span class=\"keyword\">and</span> self.valid_chain(chain):</span><br><span class=\"line\">                    max_length = length</span><br><span class=\"line\">                    new_chain = chain</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Replace our chain if we discovered a new, valid chain longer than ours</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> new_chain:</span><br><span class=\"line\">            self.chain = new_chain</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n\n<p>第一个方法 valid_chain() 用来检查是否是有效链，遍历每个块验证hash和proof.</p>\n<p>第2个方法 resolve_conflicts() 用来解决冲突，遍历所有的邻居节点，并用上一个方法检查链的有效性，<strong>如果发现有效更长链，就替换掉自己的链</strong></p>\n<p>让我们添加两个路由，一个用来注册节点，一个用来解决冲突。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@app.route(&#x27;/nodes/register&#x27;, methods=[&#x27;POST&#x27;])</span><br><span class=\"line\">def register_nodes():</span><br><span class=\"line\">    values = request.get_json()</span><br><span class=\"line\"></span><br><span class=\"line\">    nodes = values.get(&#x27;nodes&#x27;)</span><br><span class=\"line\">    if nodes is None:</span><br><span class=\"line\">        return &quot;Error: Please supply a valid list of nodes&quot;, 400</span><br><span class=\"line\"></span><br><span class=\"line\">    for node in nodes:</span><br><span class=\"line\">        blockchain.register_node(node)</span><br><span class=\"line\"></span><br><span class=\"line\">    response = &#123;</span><br><span class=\"line\">        &#x27;message&#x27;: &#x27;New nodes have been added&#x27;,</span><br><span class=\"line\">        &#x27;total_nodes&#x27;: list(blockchain.nodes),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return jsonify(response), 201</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@app.route(&#x27;/nodes/resolve&#x27;, methods=[&#x27;GET&#x27;])</span><br><span class=\"line\">def consensus():</span><br><span class=\"line\">    replaced = blockchain.resolve_conflicts()</span><br><span class=\"line\"></span><br><span class=\"line\">    if replaced:</span><br><span class=\"line\">        response = &#123;</span><br><span class=\"line\">            &#x27;message&#x27;: &#x27;Our chain was replaced&#x27;,</span><br><span class=\"line\">            &#x27;new_chain&#x27;: blockchain.chain</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        response = &#123;</span><br><span class=\"line\">            &#x27;message&#x27;: &#x27;Our chain is authoritative&#x27;,</span><br><span class=\"line\">            &#x27;chain&#x27;: blockchain.chain</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return jsonify(response), 200</span><br></pre></td></tr></table></figure>\n\n<p>你可以在不同的机器运行节点，或在一台机机开启不同的网络端口来模拟多节点的网络，这里在同一台机器开启不同的端口演示，在不同的终端运行一下命令，就启动了两个节点：<a href=\"http://localhost:5000/\">http://localhost:5000</a> 和 <a href=\"http://localhost:5001/\">http://localhost:5001</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pipenv run python blockchain.py</span><br><span class=\"line\">pipenv run python blockchain.py -p 5001</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/img/postman_register.png\"></p>\n<p>然后在节点2上挖两个块，确保是更长的链，然后在节点1上访问接口&#x2F;nodes&#x2F;resolve ,这时节点1的链会通过共识算法被节点2的链取代。</p>\n<p><img src=\"/img/postman_resolve.png\"></p>\n<p>好啦，你可以邀请朋友们一起来测试你的区块链</p>\n","categories":[{"name":"学习记录","path":"api/categories/学习记录.json"},{"name":"区块链","path":"api/categories/区块链.json"}],"tags":[{"name":"学习记录","path":"api/tags/学习记录.json"},{"name":"区块链","path":"api/tags/区块链.json"}]}