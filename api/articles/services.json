{"title":"startService 和 bindService的区别","slug":"services","date":"2018-03-05T16:00:00.000Z","updated":"2022-10-19T14:40:00.264Z","comments":true,"path":"api/articles/services.json","realPath":"/2018/services/index/","excerpt":null,"covers":null,"cover":null,"content":"<h2 id=\"Service的简介\"><a href=\"#Service的简介\" class=\"headerlink\" title=\"Service的简介\"></a>Service的简介</h2><p>Service是Android系统中的四大组件之一，它是一种长生命周期的，没有可视化界面，运行于后台的一种服务程序。比如我们播放音乐的时候，有可能想边听音乐边干些其他事情，当退出播放音乐的应用，如果不用Service，我 们就听不到歌了，所以这时候就得用到Service了。</p>\n<h3 id=\"Service生命周期\"><a href=\"#Service生命周期\" class=\"headerlink\" title=\"Service生命周期\"></a>Service生命周期</h3><p>Service的生命周期并不像Activity那么复杂，它只继承了onCreate(),onStart(),onDestroy()三个方法，当第一次启动Service时，先后调用了onCreate(),onStart()这两个方法，当停止Service时，则执行onDestroy()方法，这里需要注意的是，如果Service已经启动了，当我们再次启动Service时，不会在执行onCreate()方法，而是直接执行onStart()方法。</p>\n<h2 id=\"Service的启动方式\"><a href=\"#Service的启动方式\" class=\"headerlink\" title=\"Service的启动方式\"></a>Service的启动方式</h2><p>Service的有两种启动方式：Context.startService()和Context.bindService()，这两种方式对Service生命周期的影响是不同的。</p>\n<h3 id=\"Context-startService-方式启动\"><a href=\"#Context-startService-方式启动\" class=\"headerlink\" title=\"Context.startService()方式启动\"></a>Context.startService()方式启动</h3><ol>\n<li>Context.startService()方式的生命周期：</li>\n</ol>\n<p>启动时，startService –&gt; onCreate() –&gt; onStart()<br>停止时，stopService –&gt; onDestroy()<br>如果调用者直接退出而没有停止Service，则Service 会一直在后台运行</p>\n<p>Context.startService()方法启动服务，在服务未被创建时，系统会先调用服务的onCreate()方法，接着调用onStart()方法。如果调用startService()方法前服务已经被创建，多次调用startService()方法并不会导致多次创建服务，但会导致多次调用onStart()方法。采用startService()方法启动的服务，只能调用Context.stopService()方法结束服务，服务结束时会调用onDestroy()方法。</p>\n<h3 id=\"Context-bindService-方式启动：\"><a href=\"#Context-bindService-方式启动：\" class=\"headerlink\" title=\"Context.bindService()方式启动：\"></a>Context.bindService()方式启动：</h3><ol>\n<li>Context.bindService()方式的生命周期：</li>\n</ol>\n<p>绑定时,bindService -&gt; onCreate() –&gt; onBind()<br>调用者退出了，即解绑定时,Srevice就会unbindService –&gt;onUnbind() –&gt; onDestory()</p>\n<p>用Context.bindService()方法启动服务，在服务未被创建时，系统会先调用服务的onCreate()方法，接着调用onBind()方法。这个时候调用者和服务绑定在一起，调用者退出了，系统就会先调用服务的onUnbind()方法，接着调用onDestroy()方法。如果调用bindService()方法前服务已经被绑定，多次调用bindService()方法并不会导致多次创建服务及绑定(也就是说onCreate()和onBind()方法并不会被多次调用)。如果调用者希望与正在绑定的服务解除绑定，可以调用unbindService()方法，调用该方法也会导致系统调用服务的onUnbind()–&gt;onDestroy()方法。</p>\n<ol start=\"2\">\n<li>Context.bindService()方式启动 Service的方法：</li>\n</ol>\n<p>绑定Service需要三个参数：bindService(intent, conn, Service.BIND_AUTO_CREATE);<br>第一个：Intent对象<br>第二个：ServiceConnection对象，创建该对象要实现它的onServiceConnected()和 onServiceDisconnected()来判断连接成功或者是断开连接<br>第三个：如何创建Service，一般指定绑定的时候自动创建</p>\n<h2 id=\"startService-和-bindService的区别\"><a href=\"#startService-和-bindService的区别\" class=\"headerlink\" title=\"startService 和 bindService的区别\"></a>startService 和 bindService的区别</h2><p>服务不能自己运行，需要通过调用Context.startService()或Context.bindService()方法启动服务。这两个方法都可以启动Service，但是它们的使用场合有所不同。</p>\n<p>使用startService()方法启用服务，调用者与服务之间没有关连，即使调用者退出了，服务仍然运行。使用bindService()方法启用服务，调用者与服务绑定在了一起，调用者一旦退出，服务也就终止，大有“不求同时生，必须同时死”的特点。</p>\n<p>如果打算采用Context.startService()方法启动服务，在服务未被创建时，系统会先调用服务的onCreate()方法，接着调用onStart()方法。如果调用startService()方法前服务已经被创建，多次调用startService()方法并不会导致多次创建服务，但会导致多次调用onStart()方法。采用startService()方法启动的服务，只能调用Context.stopService()方法结束服务，服务结束时会调用onDestroy()方法。</p>\n<p>如果打算采用Context.bindService()方法启动服务，在服务未被创建时，系统会先调用服务的onCreate()方法，接着调用onBind()方法。这个时候调用者和服务绑定在一起，调用者退出了，系统就会先调用服务的onUnbind()方法，接着调用onDestroy()方法。如果调用bindService()方法前服务已经被绑定，多次调用bindService()方法并不会导致多次创建服务及绑定(也就是说onCreate()和onBind()方法并不会被多次调用)。如果调用者希望与正在绑定的服务解除绑定，可以调用unbindService()方法，调用该方法也会导致系统调用服务的onUnbind()–&gt;onDestroy()方法。</p>\n","more":"<h2 id=\"Service的简介\"><a href=\"#Service的简介\" class=\"headerlink\" title=\"Service的简介\"></a>Service的简介</h2><p>Service是Android系统中的四大组件之一，它是一种长生命周期的，没有可视化界面，运行于后台的一种服务程序。比如我们播放音乐的时候，有可能想边听音乐边干些其他事情，当退出播放音乐的应用，如果不用Service，我 们就听不到歌了，所以这时候就得用到Service了。</p>\n<h3 id=\"Service生命周期\"><a href=\"#Service生命周期\" class=\"headerlink\" title=\"Service生命周期\"></a>Service生命周期</h3><p>Service的生命周期并不像Activity那么复杂，它只继承了onCreate(),onStart(),onDestroy()三个方法，当第一次启动Service时，先后调用了onCreate(),onStart()这两个方法，当停止Service时，则执行onDestroy()方法，这里需要注意的是，如果Service已经启动了，当我们再次启动Service时，不会在执行onCreate()方法，而是直接执行onStart()方法。</p>\n<h2 id=\"Service的启动方式\"><a href=\"#Service的启动方式\" class=\"headerlink\" title=\"Service的启动方式\"></a>Service的启动方式</h2><p>Service的有两种启动方式：Context.startService()和Context.bindService()，这两种方式对Service生命周期的影响是不同的。</p>\n<h3 id=\"Context-startService-方式启动\"><a href=\"#Context-startService-方式启动\" class=\"headerlink\" title=\"Context.startService()方式启动\"></a>Context.startService()方式启动</h3><ol>\n<li>Context.startService()方式的生命周期：</li>\n</ol>\n<p>启动时，startService –&gt; onCreate() –&gt; onStart()<br>停止时，stopService –&gt; onDestroy()<br>如果调用者直接退出而没有停止Service，则Service 会一直在后台运行</p>\n<p>Context.startService()方法启动服务，在服务未被创建时，系统会先调用服务的onCreate()方法，接着调用onStart()方法。如果调用startService()方法前服务已经被创建，多次调用startService()方法并不会导致多次创建服务，但会导致多次调用onStart()方法。采用startService()方法启动的服务，只能调用Context.stopService()方法结束服务，服务结束时会调用onDestroy()方法。</p>\n<h3 id=\"Context-bindService-方式启动：\"><a href=\"#Context-bindService-方式启动：\" class=\"headerlink\" title=\"Context.bindService()方式启动：\"></a>Context.bindService()方式启动：</h3><ol>\n<li>Context.bindService()方式的生命周期：</li>\n</ol>\n<p>绑定时,bindService -&gt; onCreate() –&gt; onBind()<br>调用者退出了，即解绑定时,Srevice就会unbindService –&gt;onUnbind() –&gt; onDestory()</p>\n<p>用Context.bindService()方法启动服务，在服务未被创建时，系统会先调用服务的onCreate()方法，接着调用onBind()方法。这个时候调用者和服务绑定在一起，调用者退出了，系统就会先调用服务的onUnbind()方法，接着调用onDestroy()方法。如果调用bindService()方法前服务已经被绑定，多次调用bindService()方法并不会导致多次创建服务及绑定(也就是说onCreate()和onBind()方法并不会被多次调用)。如果调用者希望与正在绑定的服务解除绑定，可以调用unbindService()方法，调用该方法也会导致系统调用服务的onUnbind()–&gt;onDestroy()方法。</p>\n<ol start=\"2\">\n<li>Context.bindService()方式启动 Service的方法：</li>\n</ol>\n<p>绑定Service需要三个参数：bindService(intent, conn, Service.BIND_AUTO_CREATE);<br>第一个：Intent对象<br>第二个：ServiceConnection对象，创建该对象要实现它的onServiceConnected()和 onServiceDisconnected()来判断连接成功或者是断开连接<br>第三个：如何创建Service，一般指定绑定的时候自动创建</p>\n<h2 id=\"startService-和-bindService的区别\"><a href=\"#startService-和-bindService的区别\" class=\"headerlink\" title=\"startService 和 bindService的区别\"></a>startService 和 bindService的区别</h2><p>服务不能自己运行，需要通过调用Context.startService()或Context.bindService()方法启动服务。这两个方法都可以启动Service，但是它们的使用场合有所不同。</p>\n<p>使用startService()方法启用服务，调用者与服务之间没有关连，即使调用者退出了，服务仍然运行。使用bindService()方法启用服务，调用者与服务绑定在了一起，调用者一旦退出，服务也就终止，大有“不求同时生，必须同时死”的特点。</p>\n<p>如果打算采用Context.startService()方法启动服务，在服务未被创建时，系统会先调用服务的onCreate()方法，接着调用onStart()方法。如果调用startService()方法前服务已经被创建，多次调用startService()方法并不会导致多次创建服务，但会导致多次调用onStart()方法。采用startService()方法启动的服务，只能调用Context.stopService()方法结束服务，服务结束时会调用onDestroy()方法。</p>\n<p>如果打算采用Context.bindService()方法启动服务，在服务未被创建时，系统会先调用服务的onCreate()方法，接着调用onBind()方法。这个时候调用者和服务绑定在一起，调用者退出了，系统就会先调用服务的onUnbind()方法，接着调用onDestroy()方法。如果调用bindService()方法前服务已经被绑定，多次调用bindService()方法并不会导致多次创建服务及绑定(也就是说onCreate()和onBind()方法并不会被多次调用)。如果调用者希望与正在绑定的服务解除绑定，可以调用unbindService()方法，调用该方法也会导致系统调用服务的onUnbind()–&gt;onDestroy()方法。</p>\n","categories":[{"name":"教程分享","path":"api/categories/教程分享.json"},{"name":"Android","path":"api/categories/Android.json"}],"tags":[{"name":"Android","path":"api/tags/Android.json"},{"name":"Service","path":"api/tags/Service.json"}]}