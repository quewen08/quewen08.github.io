{"title":"一步步教你开发、部署第一个去中心化应用(Dapp) - 宠物商店","slug":"first-dapp","date":"2018-02-25T05:02:22.000Z","updated":"2022-10-19T14:40:00.249Z","comments":true,"path":"api/articles/first-dapp.json","realPath":"/2018/first-dapp/first-dapp/","excerpt":null,"covers":["/img/Petshop.jpg","/img/ganache-initial.png","/img/ganache-migrated.png","/img/metamask-initial.png","/img/metamask-seed.png","/img/metamask-account1.png","/img/metamask-transactionconfirm.png","/img/metamask-transactionsuccess.png"],"cover":"/img/Petshop.jpg","content":"<p>今天我们来编写一个完整的去中心化（区块链）应用（Dapps）, 本文可以和编写智能合约结合起来看。</p>\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>阅读本文前，你应该对以太坊、智能合约有所了解，如果你还不了解，建议你先看以太坊是什么<br>除此之外，你最好还了解一些HTML及JavaScript知识。</p>\n<p>本文通过实例教大家来开发去中心化应用，应用效果如图：</p>\n<p><img src=\"/img/Petshop.jpg\"></p>\n<p>从本文，你可以学习到：</p>\n<ul>\n<li>搭建智能合约开发环境</li>\n<li>创建Truffle项目</li>\n<li>编写智能合约</li>\n<li>编译和部署智能合约到区块链</li>\n<li>如何通过Web3和智能合约交互</li>\n<li>MetaMask的使用</li>\n</ul>\n<h2 id=\"项目背景\"><a href=\"#项目背景\" class=\"headerlink\" title=\"项目背景\"></a>项目背景</h2><p>Pete有一个宠物店，有16只宠物，他想开发一个去中心化应用，让大家来领养宠物。<br>在truffle box中，已经提供了pet-shop的网站部分代码，我们只需要编写合约及交互部分。</p>\n<h2 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h2><ol>\n<li>安装<a href=\"https://nodejs.org/en/download/\">Node</a></li>\n<li>安装Truffle: <code>npm install -g truffle</code></li>\n<li>安装<a href=\"http://truffleframework.com/ganache/\">Ganache</a></li>\n</ol>\n<blockquote>\n<p>Ganache(或Ganache CLI) 已经取代了testrpc</p>\n</blockquote>\n<h2 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h2><ol>\n<li>创建项目目录并进入</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; mkdir pet-shop-tutorial</span><br><span class=\"line\">&gt; cd pet-shop-tutorial</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>使用truffle unbox 创建项目</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &gt; truffle unbox pet-shop</span><br><span class=\"line\"> Downloading...</span><br><span class=\"line\"> Unpacking...</span><br><span class=\"line\"> Setting up...</span><br><span class=\"line\"> Unbox successful. Sweet!</span><br><span class=\"line\"></span><br><span class=\"line\">Commands:</span><br><span class=\"line\"></span><br><span class=\"line\">  Compile:        truffle compile</span><br><span class=\"line\">  Migrate:        truffle migrate</span><br><span class=\"line\">  Test contracts: truffle test</span><br><span class=\"line\">  Run dev server: npm run dev</span><br></pre></td></tr></table></figure>\n\n<p>这一步需要等待一会</p>\n<blockquote>\n<p>也可以使用truffle init 来创建一个全新的项目。</p>\n</blockquote>\n<h2 id=\"项目目录结构\"><a href=\"#项目目录结构\" class=\"headerlink\" title=\"项目目录结构\"></a>项目目录结构</h2><p><em>contracts&#x2F;</em> 智能合约的文件夹，所有的智能合约文件都放置在这里，里面包含一个重要的合约Migrations.sol（稍后再讲）<br><em>migrations&#x2F;</em> 用来处理部署（迁移）智能合约 ，迁移是一个额外特别的合约用来保存合约的变化。<br><em>test&#x2F;</em> 智能合约测试用例文件夹<br><em>truffle.js&#x2F;</em> 配置文件</p>\n<p>其他代码可以暂时不用管</p>\n<h2 id=\"编写智能合约\"><a href=\"#编写智能合约\" class=\"headerlink\" title=\"编写智能合约\"></a>编写智能合约</h2><p>智能合约承担着分布式应用的后台逻辑和存储。智能合约使用solidity编写，可阅读<br><a href=\"/categories/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E5%8C%BA%E5%9D%97%E9%93%BE/%E4%BB%A5%E5%A4%AA%E5%9D%8A/Solidity/\">solidity系列文章</a></p>\n<p>在contracts目录下，添加合约文件Adoption.sol</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pragma solidity ^0.4.17;</span><br><span class=\"line\"></span><br><span class=\"line\">contract Adoption &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  address[16] public adopters;  // 保存领养者的地址</span><br><span class=\"line\"></span><br><span class=\"line\">    // 领养宠物</span><br><span class=\"line\">  function adopt(uint petId) public returns (uint) &#123;</span><br><span class=\"line\">    require(petId &gt;= 0 &amp;&amp; petId &lt;= 15);  // 确保id在数组长度内</span><br><span class=\"line\"></span><br><span class=\"line\">    adopters[petId] = msg.sender;        // 保存调用这地址</span><br><span class=\"line\">    return petId;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 返回领养者</span><br><span class=\"line\">  function getAdopters() public view returns (address[16]) &#123;</span><br><span class=\"line\">    return adopters;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"编译部署智能合约\"><a href=\"#编译部署智能合约\" class=\"headerlink\" title=\"编译部署智能合约\"></a>编译部署智能合约</h2><p>Truffle集成了一个开发者控制台，可用来生成一个开发链用来测试和部署智能合约。</p>\n<h3 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h3><p>Solidity是编译型语言，需要把可读的Solidity代码编译为EVM字节码才能运行。<br>dapp的根目录pet-shop-tutorial下，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; truffle compile</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Compiling ./contracts/Adoption.sol...</span><br><span class=\"line\">Writing artifacts to ./build/contracts</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h3><p>编译之后，就可以部署到区块链上。<br>在migrations文件夹下已经有一个1_initial_migration.js部署脚本，用来部署Migrations.sol合约。<br>Migrations.sol 用来确保不会部署相同的合约。</p>\n<p>现在我们来创建一个自己的部署脚本<code>2_deploy_contracts.js</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Adoption = artifacts.require(&quot;Adoption&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = function(deployer) &#123;</span><br><span class=\"line\">  deployer.deploy(Adoption);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在执行部署之前，需要确保有一个区块链运行, 可以使用<br><a href=\"http://truffleframework.com/ganache/\">Ganache</a>来开启一个私链来进行开发测试，默认会在7545端口上运行一个开发链。<br>Ganache 启动之后是这样：</p>\n<p><img src=\"/img/ganache-initial.png\"></p>\n<p>接下来执行部署命令:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; truffle  migrate</span><br></pre></td></tr></table></figure>\n\n<p>执行后，有以下类似输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Using network &#x27;develop&#x27;.</span><br><span class=\"line\"></span><br><span class=\"line\">Running migration: 1_initial_migration.js</span><br><span class=\"line\">  Deploying Migrations...</span><br><span class=\"line\">  ... 0x3076b7dac65afc44ec51508bf6f2b6894f833f0f9560ecad2d6d41ed98a4679f</span><br><span class=\"line\">  Migrations: 0x8cdaf0cd259887258bc13a92c0a6da92698644c0</span><br><span class=\"line\">Saving successful migration to network...</span><br><span class=\"line\">  ... 0xd7bc86d31bee32fa3988f1c1eabce403a1b5d570340a3a9cdba53a472ee8c956</span><br><span class=\"line\">Saving artifacts...</span><br><span class=\"line\">Running migration: 2_deploy_contracts.js</span><br><span class=\"line\">  Deploying Adoption...</span><br><span class=\"line\">  ... 0x2c6ab4471c225b5473f2079ee42ca1356007e51d5bb57eb80bfeb406acc35cd4</span><br><span class=\"line\">  Adoption: 0x345ca3e014aaf5dca488057592ee47305d9b3e10</span><br><span class=\"line\">Saving successful migration to network...</span><br><span class=\"line\">  ... 0xf36163615f41ef7ed8f4a8f192149a0bf633fe1a2398ce001bf44c43dc7bdda0</span><br><span class=\"line\">Saving artifacts...</span><br></pre></td></tr></table></figure>\n\n<p>在打开的Ganache里可以看到区块链状态的变化，现在产生了4个区块。</p>\n<p><img src=\"/img/ganache-migrated.png\"></p>\n<p>这时说明已经智能合约已经部署好了。</p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>现在我们来测试一下智能合约，测试用例可以用 JavaScript or Solidity来编写，这里使用Solidity。</p>\n<p>在<code>test</code>目录下新建一个<code>TestAdoption.sol</code>，编写测试合约</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">pragma solidity ^0.4.17;</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;truffle/Assert.sol&quot;;   // 引入的断言</span><br><span class=\"line\">import &quot;truffle/DeployedAddresses.sol&quot;;  // 用来获取被测试合约的地址</span><br><span class=\"line\">import &quot;../contracts/Adoption.sol&quot;;      // 被测试合约</span><br><span class=\"line\"></span><br><span class=\"line\">contract TestAdoption &#123;</span><br><span class=\"line\">  Adoption adoption = Adoption(DeployedAddresses.Adoption());</span><br><span class=\"line\"></span><br><span class=\"line\">  // 领养测试用例</span><br><span class=\"line\">  function testUserCanAdoptPet() public &#123;</span><br><span class=\"line\">    uint returnedId = adoption.adopt(8);</span><br><span class=\"line\"></span><br><span class=\"line\">    uint expected = 8;</span><br><span class=\"line\">    Assert.equal(returnedId, expected, &quot;Adoption of pet ID 8 should be recorded.&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 宠物所有者测试用例</span><br><span class=\"line\">  function testGetAdopterAddressByPetId() public &#123;</span><br><span class=\"line\">    // 期望领养者的地址就是本合约地址，因为交易是由测试合约发起交易，</span><br><span class=\"line\">    address expected = this;</span><br><span class=\"line\">    address adopter = adoption.adopters(8);</span><br><span class=\"line\">    Assert.equal(adopter, expected, &quot;Owner of pet ID 8 should be recorded.&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 测试所有领养者</span><br><span class=\"line\">  function testGetAdopterAddressByPetIdInArray() public &#123;</span><br><span class=\"line\">  // 领养者的地址就是本合约地址</span><br><span class=\"line\">    address expected = this;</span><br><span class=\"line\">    address[16] memory adopters = adoption.getAdopters();</span><br><span class=\"line\">    Assert.equal(adopters[8], expected, &quot;Owner of pet ID 8 should be recorded.&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Assert.sol 及 DeployedAddresses.sol是Truffle框架提供，在test目录下并不提供truffle目录。</p>\n<p>TestAdoption合约中添加adopt的测试用例</p>\n<h3 id=\"运行测试用例\"><a href=\"#运行测试用例\" class=\"headerlink\" title=\"运行测试用例\"></a>运行测试用例</h3><p>在终端中，执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">truffle test</span><br></pre></td></tr></table></figure>\n\n<p>如果测试通过，则终端输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Using network &#x27;develop&#x27;.</span><br><span class=\"line\"></span><br><span class=\"line\">Compiling ./contracts/Adoption.sol...</span><br><span class=\"line\">Compiling ./test/TestAdoption.sol...</span><br><span class=\"line\">Compiling truffle/Assert.sol...</span><br><span class=\"line\">Compiling truffle/DeployedAddresses.sol...</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  TestAdoption</span><br><span class=\"line\">    ✓ testUserCanAdoptPet (62ms)</span><br><span class=\"line\">    ✓ testGetAdopterAddressByPetId (53ms)</span><br><span class=\"line\">    ✓ testGetAdopterAddressByPetIdInArray (73ms)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  3 passing (554ms)</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"创建用户接口和智能合约交互\"><a href=\"#创建用户接口和智能合约交互\" class=\"headerlink\" title=\"创建用户接口和智能合约交互\"></a>创建用户接口和智能合约交互</h2><p>我们已经编写和部署及测试好了我们的合约，接下我们为合约编写UI，让合约真正可以用起来。</p>\n<p>在Truffle Box <code>pet-shop</code>里，已经包含了应用的前端代码，代码在<code>src/</code>文件夹下。</p>\n<p>在编辑器中打开<code>src/js/app.js</code><br>可以看到用来管理整个应用的App对象，init函数加载宠物信息，就初始化<a href=\"https://github.com/ethereum/web3.js/\">web3</a>.<br>web3是一个实现了与以太坊节点通信的库，我们利用web3来和合约进行交互。</p>\n<h3 id=\"初始化web3\"><a href=\"#初始化web3\" class=\"headerlink\" title=\"初始化web3\"></a>初始化web3</h3><p>接下来，我们来编辑app.js修改initWeb3():<br>删除注释，修改为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">initWeb3: function() &#123;</span><br><span class=\"line\">  // Is there an injected web3 instance?</span><br><span class=\"line\">  if (typeof web3 !== &#x27;undefined&#x27;) &#123;</span><br><span class=\"line\">    App.web3Provider = web3.currentProvider;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    // If no injected web3 instance is detected, fall back to Ganache</span><br><span class=\"line\">    App.web3Provider = new Web3.providers.HttpProvider(&#x27;http://localhost:7545&#x27;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  web3 = new Web3(App.web3Provider);</span><br><span class=\"line\"></span><br><span class=\"line\">  return App.initContract();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>代码中优先使用<a href=\"https://github.com/ethereum/mist\">Mist</a>或<a href=\"https://metamask.io/\">MetaMask</a>提供的web3实例，如果没有则从本地环境创建一个。</p>\n<h3 id=\"实例化合约\"><a href=\"#实例化合约\" class=\"headerlink\" title=\"实例化合约\"></a>实例化合约</h3><p>使用truffle-contract会帮我们保存合约部署的信息，就不需要我们手动修改合约地址，修改initContract()代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">initContract: function() &#123;</span><br><span class=\"line\">  // 加载Adoption.json，保存了Adoption的ABI（接口说明）信息及部署后的网络(地址)信息，它在编译合约的时候生成ABI，在部署的时候追加网络信息</span><br><span class=\"line\">  $.getJSON(&#x27;Adoption.json&#x27;, function(data) &#123;</span><br><span class=\"line\">    // 用Adoption.json数据创建一个可交互的TruffleContract合约实例。</span><br><span class=\"line\">    var AdoptionArtifact = data;</span><br><span class=\"line\">    App.contracts.Adoption = TruffleContract(AdoptionArtifact);</span><br><span class=\"line\"></span><br><span class=\"line\">    // Set the provider for our contract</span><br><span class=\"line\">    App.contracts.Adoption.setProvider(App.web3Provider);</span><br><span class=\"line\"></span><br><span class=\"line\">    // Use our contract to retrieve and mark the adopted pets</span><br><span class=\"line\">    return App.markAdopted();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  return App.bindEvents();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"处理领养\"><a href=\"#处理领养\" class=\"headerlink\" title=\"处理领养\"></a>处理领养</h3><p>修改markAdopted()代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">markAdopted: function(adopters, account) &#123;</span><br><span class=\"line\">  var adoptionInstance;</span><br><span class=\"line\"></span><br><span class=\"line\">  App.contracts.Adoption.deployed().then(function(instance) &#123;</span><br><span class=\"line\">    adoptionInstance = instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 调用合约的getAdopters(), 用call读取信息不用消耗gas</span><br><span class=\"line\">    return adoptionInstance.getAdopters.call();</span><br><span class=\"line\">  &#125;).then(function(adopters) &#123;</span><br><span class=\"line\">    for (i = 0; i &lt; adopters.length; i++) &#123;</span><br><span class=\"line\">      if (adopters[i] !== &#x27;0x0000000000000000000000000000000000000000&#x27;) &#123;</span><br><span class=\"line\">        $(&#x27;.panel-pet&#x27;).eq(i).find(&#x27;button&#x27;).text(&#x27;Success&#x27;).attr(&#x27;disabled&#x27;, true);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;).catch(function(err) &#123;</span><br><span class=\"line\">    console.log(err.message);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改handleAdopt()代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">handleAdopt: function(event) &#123;</span><br><span class=\"line\">  event.preventDefault();</span><br><span class=\"line\"></span><br><span class=\"line\">  var petId = parseInt($(event.target).data(&#x27;id&#x27;));</span><br><span class=\"line\"></span><br><span class=\"line\">  var adoptionInstance;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 获取用户账号</span><br><span class=\"line\">  web3.eth.getAccounts(function(error, accounts) &#123;</span><br><span class=\"line\">    if (error) &#123;</span><br><span class=\"line\">      console.log(error);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    var account = accounts[0];</span><br><span class=\"line\"></span><br><span class=\"line\">    App.contracts.Adoption.deployed().then(function(instance) &#123;</span><br><span class=\"line\">      adoptionInstance = instance;</span><br><span class=\"line\"></span><br><span class=\"line\">      // 发送交易领养宠物</span><br><span class=\"line\">      return adoptionInstance.adopt(petId, &#123;from: account&#125;);</span><br><span class=\"line\">    &#125;).then(function(result) &#123;</span><br><span class=\"line\">      return App.markAdopted();</span><br><span class=\"line\">    &#125;).catch(function(err) &#123;</span><br><span class=\"line\">      console.log(err.message);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"在浏览器里运行\"><a href=\"#在浏览器里运行\" class=\"headerlink\" title=\"在浏览器里运行\"></a>在浏览器里运行</h2><h3 id=\"安装-MetaMask\"><a href=\"#安装-MetaMask\" class=\"headerlink\" title=\"安装 MetaMask\"></a>安装 MetaMask</h3><p>MetaMask 是一款插件形式的以太坊轻客户端，开发过程中使用MetaMask和我们的dapp进行交互是个很好的选择，通过此链接安装，安装完成后，浏览器工具条会显示一个小狐狸图标。</p>\n<h3 id=\"配置钱包\"><a href=\"#配置钱包\" class=\"headerlink\" title=\"配置钱包\"></a>配置钱包</h3><p>在接受隐私说明后，会出现页面如下：</p>\n<p><img src=\"/img/metamask-initial.png\"></p>\n<p>这里我们通过还原一个Ganache为我们创建好的钱包，作为我们的开发测试钱包。点击页面的_Import Existing DEN_ ，输入Ganache显示的助记词。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">candy maple cake sugar pudding cream honey rich smooth crumble sweet treat</span><br></pre></td></tr></table></figure>\n\n<p>然后自己想要的密码，点击OK。<br>如图：</p>\n<p><img src=\"/img/metamask-seed.png\"></p>\n<h3 id=\"链接开发区块链网络\"><a href=\"#链接开发区块链网络\" class=\"headerlink\" title=\"链接开发区块链网络\"></a>链接开发区块链网络</h3><p>默认连接的是以太坊主网（左上角显示），选择Custom RPC，添加一个网络：<a href=\"http://127.0.0.1:7545/\">http://127.0.0.1:7545</a> ，点返回后，显示如下：</p>\n<p><img src=\"/img/metamask-account1.png\"></p>\n<p>这是左上角显示为_Private Network_ ，账号是Ganache中默认的第一个账号。</p>\n<p>至此MetaMask的安装，配置已经完成。</p>\n<h3 id=\"安装和配置lite-server\"><a href=\"#安装和配置lite-server\" class=\"headerlink\" title=\"安装和配置lite-server\"></a>安装和配置lite-server</h3><p>接下来需要本地的web 服务器提供服务的访问， Truffle Box pet-shop里提供了一个lite-server可以直接使用，我们看看它是如何工作的。<br>bs-config.json指示了lite-server的工作目录。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;server&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;baseDir&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;./src&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;./build/contracts&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>.&#x2F;src 是网站文件目录<br>.&#x2F;build&#x2F;contracts 是合约输出目录</p>\n<p>以此同时，在package.json文件的scripts中添加了dev命令：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;dev&quot;</span>: <span class=\"string\">&quot;lite-server&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;test&quot;</span>: <span class=\"string\">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>当运行npm run dev的时候，就会启动lite-server</p>\n<h3 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; npm run dev</span><br></pre></td></tr></table></figure>\n\n<p>会自动打开浏览器显示我们的dapp，如本文的第一张图。<br>现在领养一直宠物看看，当我们点击_Adopt时，MetaMask_ 会提示我们交易的确认，如图：</p>\n<p><img src=\"/img/metamask-transactionconfirm.png\"></p>\n<p>点击Submit确认后，就可以看到成功领养了这次宠物。</p>\n<p>在MetaMask中，也可以看到交易的清单：</p>\n<p><img src=\"/img/metamask-transactionsuccess.png\"></p>\n<p>好了，恭喜你，即将成为一名去中心化式应用开发者的你已经成为迈出了坚实的一步。</p>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><p><a href=\"http://truffleframework.com/tutorials/pet-shop\">Truffle手册</a></p>\n","more":"<p>今天我们来编写一个完整的去中心化（区块链）应用（Dapps）, 本文可以和编写智能合约结合起来看。</p>\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>阅读本文前，你应该对以太坊、智能合约有所了解，如果你还不了解，建议你先看以太坊是什么<br>除此之外，你最好还了解一些HTML及JavaScript知识。</p>\n<p>本文通过实例教大家来开发去中心化应用，应用效果如图：</p>\n<p><img src=\"/img/Petshop.jpg\"></p>\n<p>从本文，你可以学习到：</p>\n<ul>\n<li>搭建智能合约开发环境</li>\n<li>创建Truffle项目</li>\n<li>编写智能合约</li>\n<li>编译和部署智能合约到区块链</li>\n<li>如何通过Web3和智能合约交互</li>\n<li>MetaMask的使用</li>\n</ul>\n<h2 id=\"项目背景\"><a href=\"#项目背景\" class=\"headerlink\" title=\"项目背景\"></a>项目背景</h2><p>Pete有一个宠物店，有16只宠物，他想开发一个去中心化应用，让大家来领养宠物。<br>在truffle box中，已经提供了pet-shop的网站部分代码，我们只需要编写合约及交互部分。</p>\n<h2 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h2><ol>\n<li>安装<a href=\"https://nodejs.org/en/download/\">Node</a></li>\n<li>安装Truffle: <code>npm install -g truffle</code></li>\n<li>安装<a href=\"http://truffleframework.com/ganache/\">Ganache</a></li>\n</ol>\n<blockquote>\n<p>Ganache(或Ganache CLI) 已经取代了testrpc</p>\n</blockquote>\n<h2 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h2><ol>\n<li>创建项目目录并进入</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; mkdir pet-shop-tutorial</span><br><span class=\"line\">&gt; cd pet-shop-tutorial</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>使用truffle unbox 创建项目</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &gt; truffle unbox pet-shop</span><br><span class=\"line\"> Downloading...</span><br><span class=\"line\"> Unpacking...</span><br><span class=\"line\"> Setting up...</span><br><span class=\"line\"> Unbox successful. Sweet!</span><br><span class=\"line\"></span><br><span class=\"line\">Commands:</span><br><span class=\"line\"></span><br><span class=\"line\">  Compile:        truffle compile</span><br><span class=\"line\">  Migrate:        truffle migrate</span><br><span class=\"line\">  Test contracts: truffle test</span><br><span class=\"line\">  Run dev server: npm run dev</span><br></pre></td></tr></table></figure>\n\n<p>这一步需要等待一会</p>\n<blockquote>\n<p>也可以使用truffle init 来创建一个全新的项目。</p>\n</blockquote>\n<h2 id=\"项目目录结构\"><a href=\"#项目目录结构\" class=\"headerlink\" title=\"项目目录结构\"></a>项目目录结构</h2><p><em>contracts&#x2F;</em> 智能合约的文件夹，所有的智能合约文件都放置在这里，里面包含一个重要的合约Migrations.sol（稍后再讲）<br><em>migrations&#x2F;</em> 用来处理部署（迁移）智能合约 ，迁移是一个额外特别的合约用来保存合约的变化。<br><em>test&#x2F;</em> 智能合约测试用例文件夹<br><em>truffle.js&#x2F;</em> 配置文件</p>\n<p>其他代码可以暂时不用管</p>\n<h2 id=\"编写智能合约\"><a href=\"#编写智能合约\" class=\"headerlink\" title=\"编写智能合约\"></a>编写智能合约</h2><p>智能合约承担着分布式应用的后台逻辑和存储。智能合约使用solidity编写，可阅读<br><a href=\"/categories/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E5%8C%BA%E5%9D%97%E9%93%BE/%E4%BB%A5%E5%A4%AA%E5%9D%8A/Solidity/\">solidity系列文章</a></p>\n<p>在contracts目录下，添加合约文件Adoption.sol</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pragma solidity ^0.4.17;</span><br><span class=\"line\"></span><br><span class=\"line\">contract Adoption &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  address[16] public adopters;  // 保存领养者的地址</span><br><span class=\"line\"></span><br><span class=\"line\">    // 领养宠物</span><br><span class=\"line\">  function adopt(uint petId) public returns (uint) &#123;</span><br><span class=\"line\">    require(petId &gt;= 0 &amp;&amp; petId &lt;= 15);  // 确保id在数组长度内</span><br><span class=\"line\"></span><br><span class=\"line\">    adopters[petId] = msg.sender;        // 保存调用这地址</span><br><span class=\"line\">    return petId;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 返回领养者</span><br><span class=\"line\">  function getAdopters() public view returns (address[16]) &#123;</span><br><span class=\"line\">    return adopters;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"编译部署智能合约\"><a href=\"#编译部署智能合约\" class=\"headerlink\" title=\"编译部署智能合约\"></a>编译部署智能合约</h2><p>Truffle集成了一个开发者控制台，可用来生成一个开发链用来测试和部署智能合约。</p>\n<h3 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h3><p>Solidity是编译型语言，需要把可读的Solidity代码编译为EVM字节码才能运行。<br>dapp的根目录pet-shop-tutorial下，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; truffle compile</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Compiling ./contracts/Adoption.sol...</span><br><span class=\"line\">Writing artifacts to ./build/contracts</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h3><p>编译之后，就可以部署到区块链上。<br>在migrations文件夹下已经有一个1_initial_migration.js部署脚本，用来部署Migrations.sol合约。<br>Migrations.sol 用来确保不会部署相同的合约。</p>\n<p>现在我们来创建一个自己的部署脚本<code>2_deploy_contracts.js</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Adoption = artifacts.require(&quot;Adoption&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = function(deployer) &#123;</span><br><span class=\"line\">  deployer.deploy(Adoption);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在执行部署之前，需要确保有一个区块链运行, 可以使用<br><a href=\"http://truffleframework.com/ganache/\">Ganache</a>来开启一个私链来进行开发测试，默认会在7545端口上运行一个开发链。<br>Ganache 启动之后是这样：</p>\n<p><img src=\"/img/ganache-initial.png\"></p>\n<p>接下来执行部署命令:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; truffle  migrate</span><br></pre></td></tr></table></figure>\n\n<p>执行后，有以下类似输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Using network &#x27;develop&#x27;.</span><br><span class=\"line\"></span><br><span class=\"line\">Running migration: 1_initial_migration.js</span><br><span class=\"line\">  Deploying Migrations...</span><br><span class=\"line\">  ... 0x3076b7dac65afc44ec51508bf6f2b6894f833f0f9560ecad2d6d41ed98a4679f</span><br><span class=\"line\">  Migrations: 0x8cdaf0cd259887258bc13a92c0a6da92698644c0</span><br><span class=\"line\">Saving successful migration to network...</span><br><span class=\"line\">  ... 0xd7bc86d31bee32fa3988f1c1eabce403a1b5d570340a3a9cdba53a472ee8c956</span><br><span class=\"line\">Saving artifacts...</span><br><span class=\"line\">Running migration: 2_deploy_contracts.js</span><br><span class=\"line\">  Deploying Adoption...</span><br><span class=\"line\">  ... 0x2c6ab4471c225b5473f2079ee42ca1356007e51d5bb57eb80bfeb406acc35cd4</span><br><span class=\"line\">  Adoption: 0x345ca3e014aaf5dca488057592ee47305d9b3e10</span><br><span class=\"line\">Saving successful migration to network...</span><br><span class=\"line\">  ... 0xf36163615f41ef7ed8f4a8f192149a0bf633fe1a2398ce001bf44c43dc7bdda0</span><br><span class=\"line\">Saving artifacts...</span><br></pre></td></tr></table></figure>\n\n<p>在打开的Ganache里可以看到区块链状态的变化，现在产生了4个区块。</p>\n<p><img src=\"/img/ganache-migrated.png\"></p>\n<p>这时说明已经智能合约已经部署好了。</p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>现在我们来测试一下智能合约，测试用例可以用 JavaScript or Solidity来编写，这里使用Solidity。</p>\n<p>在<code>test</code>目录下新建一个<code>TestAdoption.sol</code>，编写测试合约</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">pragma solidity ^0.4.17;</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;truffle/Assert.sol&quot;;   // 引入的断言</span><br><span class=\"line\">import &quot;truffle/DeployedAddresses.sol&quot;;  // 用来获取被测试合约的地址</span><br><span class=\"line\">import &quot;../contracts/Adoption.sol&quot;;      // 被测试合约</span><br><span class=\"line\"></span><br><span class=\"line\">contract TestAdoption &#123;</span><br><span class=\"line\">  Adoption adoption = Adoption(DeployedAddresses.Adoption());</span><br><span class=\"line\"></span><br><span class=\"line\">  // 领养测试用例</span><br><span class=\"line\">  function testUserCanAdoptPet() public &#123;</span><br><span class=\"line\">    uint returnedId = adoption.adopt(8);</span><br><span class=\"line\"></span><br><span class=\"line\">    uint expected = 8;</span><br><span class=\"line\">    Assert.equal(returnedId, expected, &quot;Adoption of pet ID 8 should be recorded.&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 宠物所有者测试用例</span><br><span class=\"line\">  function testGetAdopterAddressByPetId() public &#123;</span><br><span class=\"line\">    // 期望领养者的地址就是本合约地址，因为交易是由测试合约发起交易，</span><br><span class=\"line\">    address expected = this;</span><br><span class=\"line\">    address adopter = adoption.adopters(8);</span><br><span class=\"line\">    Assert.equal(adopter, expected, &quot;Owner of pet ID 8 should be recorded.&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 测试所有领养者</span><br><span class=\"line\">  function testGetAdopterAddressByPetIdInArray() public &#123;</span><br><span class=\"line\">  // 领养者的地址就是本合约地址</span><br><span class=\"line\">    address expected = this;</span><br><span class=\"line\">    address[16] memory adopters = adoption.getAdopters();</span><br><span class=\"line\">    Assert.equal(adopters[8], expected, &quot;Owner of pet ID 8 should be recorded.&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Assert.sol 及 DeployedAddresses.sol是Truffle框架提供，在test目录下并不提供truffle目录。</p>\n<p>TestAdoption合约中添加adopt的测试用例</p>\n<h3 id=\"运行测试用例\"><a href=\"#运行测试用例\" class=\"headerlink\" title=\"运行测试用例\"></a>运行测试用例</h3><p>在终端中，执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">truffle test</span><br></pre></td></tr></table></figure>\n\n<p>如果测试通过，则终端输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Using network &#x27;develop&#x27;.</span><br><span class=\"line\"></span><br><span class=\"line\">Compiling ./contracts/Adoption.sol...</span><br><span class=\"line\">Compiling ./test/TestAdoption.sol...</span><br><span class=\"line\">Compiling truffle/Assert.sol...</span><br><span class=\"line\">Compiling truffle/DeployedAddresses.sol...</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  TestAdoption</span><br><span class=\"line\">    ✓ testUserCanAdoptPet (62ms)</span><br><span class=\"line\">    ✓ testGetAdopterAddressByPetId (53ms)</span><br><span class=\"line\">    ✓ testGetAdopterAddressByPetIdInArray (73ms)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  3 passing (554ms)</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"创建用户接口和智能合约交互\"><a href=\"#创建用户接口和智能合约交互\" class=\"headerlink\" title=\"创建用户接口和智能合约交互\"></a>创建用户接口和智能合约交互</h2><p>我们已经编写和部署及测试好了我们的合约，接下我们为合约编写UI，让合约真正可以用起来。</p>\n<p>在Truffle Box <code>pet-shop</code>里，已经包含了应用的前端代码，代码在<code>src/</code>文件夹下。</p>\n<p>在编辑器中打开<code>src/js/app.js</code><br>可以看到用来管理整个应用的App对象，init函数加载宠物信息，就初始化<a href=\"https://github.com/ethereum/web3.js/\">web3</a>.<br>web3是一个实现了与以太坊节点通信的库，我们利用web3来和合约进行交互。</p>\n<h3 id=\"初始化web3\"><a href=\"#初始化web3\" class=\"headerlink\" title=\"初始化web3\"></a>初始化web3</h3><p>接下来，我们来编辑app.js修改initWeb3():<br>删除注释，修改为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">initWeb3: function() &#123;</span><br><span class=\"line\">  // Is there an injected web3 instance?</span><br><span class=\"line\">  if (typeof web3 !== &#x27;undefined&#x27;) &#123;</span><br><span class=\"line\">    App.web3Provider = web3.currentProvider;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    // If no injected web3 instance is detected, fall back to Ganache</span><br><span class=\"line\">    App.web3Provider = new Web3.providers.HttpProvider(&#x27;http://localhost:7545&#x27;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  web3 = new Web3(App.web3Provider);</span><br><span class=\"line\"></span><br><span class=\"line\">  return App.initContract();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>代码中优先使用<a href=\"https://github.com/ethereum/mist\">Mist</a>或<a href=\"https://metamask.io/\">MetaMask</a>提供的web3实例，如果没有则从本地环境创建一个。</p>\n<h3 id=\"实例化合约\"><a href=\"#实例化合约\" class=\"headerlink\" title=\"实例化合约\"></a>实例化合约</h3><p>使用truffle-contract会帮我们保存合约部署的信息，就不需要我们手动修改合约地址，修改initContract()代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">initContract: function() &#123;</span><br><span class=\"line\">  // 加载Adoption.json，保存了Adoption的ABI（接口说明）信息及部署后的网络(地址)信息，它在编译合约的时候生成ABI，在部署的时候追加网络信息</span><br><span class=\"line\">  $.getJSON(&#x27;Adoption.json&#x27;, function(data) &#123;</span><br><span class=\"line\">    // 用Adoption.json数据创建一个可交互的TruffleContract合约实例。</span><br><span class=\"line\">    var AdoptionArtifact = data;</span><br><span class=\"line\">    App.contracts.Adoption = TruffleContract(AdoptionArtifact);</span><br><span class=\"line\"></span><br><span class=\"line\">    // Set the provider for our contract</span><br><span class=\"line\">    App.contracts.Adoption.setProvider(App.web3Provider);</span><br><span class=\"line\"></span><br><span class=\"line\">    // Use our contract to retrieve and mark the adopted pets</span><br><span class=\"line\">    return App.markAdopted();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  return App.bindEvents();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"处理领养\"><a href=\"#处理领养\" class=\"headerlink\" title=\"处理领养\"></a>处理领养</h3><p>修改markAdopted()代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">markAdopted: function(adopters, account) &#123;</span><br><span class=\"line\">  var adoptionInstance;</span><br><span class=\"line\"></span><br><span class=\"line\">  App.contracts.Adoption.deployed().then(function(instance) &#123;</span><br><span class=\"line\">    adoptionInstance = instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 调用合约的getAdopters(), 用call读取信息不用消耗gas</span><br><span class=\"line\">    return adoptionInstance.getAdopters.call();</span><br><span class=\"line\">  &#125;).then(function(adopters) &#123;</span><br><span class=\"line\">    for (i = 0; i &lt; adopters.length; i++) &#123;</span><br><span class=\"line\">      if (adopters[i] !== &#x27;0x0000000000000000000000000000000000000000&#x27;) &#123;</span><br><span class=\"line\">        $(&#x27;.panel-pet&#x27;).eq(i).find(&#x27;button&#x27;).text(&#x27;Success&#x27;).attr(&#x27;disabled&#x27;, true);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;).catch(function(err) &#123;</span><br><span class=\"line\">    console.log(err.message);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改handleAdopt()代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">handleAdopt: function(event) &#123;</span><br><span class=\"line\">  event.preventDefault();</span><br><span class=\"line\"></span><br><span class=\"line\">  var petId = parseInt($(event.target).data(&#x27;id&#x27;));</span><br><span class=\"line\"></span><br><span class=\"line\">  var adoptionInstance;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 获取用户账号</span><br><span class=\"line\">  web3.eth.getAccounts(function(error, accounts) &#123;</span><br><span class=\"line\">    if (error) &#123;</span><br><span class=\"line\">      console.log(error);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    var account = accounts[0];</span><br><span class=\"line\"></span><br><span class=\"line\">    App.contracts.Adoption.deployed().then(function(instance) &#123;</span><br><span class=\"line\">      adoptionInstance = instance;</span><br><span class=\"line\"></span><br><span class=\"line\">      // 发送交易领养宠物</span><br><span class=\"line\">      return adoptionInstance.adopt(petId, &#123;from: account&#125;);</span><br><span class=\"line\">    &#125;).then(function(result) &#123;</span><br><span class=\"line\">      return App.markAdopted();</span><br><span class=\"line\">    &#125;).catch(function(err) &#123;</span><br><span class=\"line\">      console.log(err.message);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"在浏览器里运行\"><a href=\"#在浏览器里运行\" class=\"headerlink\" title=\"在浏览器里运行\"></a>在浏览器里运行</h2><h3 id=\"安装-MetaMask\"><a href=\"#安装-MetaMask\" class=\"headerlink\" title=\"安装 MetaMask\"></a>安装 MetaMask</h3><p>MetaMask 是一款插件形式的以太坊轻客户端，开发过程中使用MetaMask和我们的dapp进行交互是个很好的选择，通过此链接安装，安装完成后，浏览器工具条会显示一个小狐狸图标。</p>\n<h3 id=\"配置钱包\"><a href=\"#配置钱包\" class=\"headerlink\" title=\"配置钱包\"></a>配置钱包</h3><p>在接受隐私说明后，会出现页面如下：</p>\n<p><img src=\"/img/metamask-initial.png\"></p>\n<p>这里我们通过还原一个Ganache为我们创建好的钱包，作为我们的开发测试钱包。点击页面的_Import Existing DEN_ ，输入Ganache显示的助记词。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">candy maple cake sugar pudding cream honey rich smooth crumble sweet treat</span><br></pre></td></tr></table></figure>\n\n<p>然后自己想要的密码，点击OK。<br>如图：</p>\n<p><img src=\"/img/metamask-seed.png\"></p>\n<h3 id=\"链接开发区块链网络\"><a href=\"#链接开发区块链网络\" class=\"headerlink\" title=\"链接开发区块链网络\"></a>链接开发区块链网络</h3><p>默认连接的是以太坊主网（左上角显示），选择Custom RPC，添加一个网络：<a href=\"http://127.0.0.1:7545/\">http://127.0.0.1:7545</a> ，点返回后，显示如下：</p>\n<p><img src=\"/img/metamask-account1.png\"></p>\n<p>这是左上角显示为_Private Network_ ，账号是Ganache中默认的第一个账号。</p>\n<p>至此MetaMask的安装，配置已经完成。</p>\n<h3 id=\"安装和配置lite-server\"><a href=\"#安装和配置lite-server\" class=\"headerlink\" title=\"安装和配置lite-server\"></a>安装和配置lite-server</h3><p>接下来需要本地的web 服务器提供服务的访问， Truffle Box pet-shop里提供了一个lite-server可以直接使用，我们看看它是如何工作的。<br>bs-config.json指示了lite-server的工作目录。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;server&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;baseDir&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;./src&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;./build/contracts&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>.&#x2F;src 是网站文件目录<br>.&#x2F;build&#x2F;contracts 是合约输出目录</p>\n<p>以此同时，在package.json文件的scripts中添加了dev命令：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;dev&quot;</span>: <span class=\"string\">&quot;lite-server&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;test&quot;</span>: <span class=\"string\">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>当运行npm run dev的时候，就会启动lite-server</p>\n<h3 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; npm run dev</span><br></pre></td></tr></table></figure>\n\n<p>会自动打开浏览器显示我们的dapp，如本文的第一张图。<br>现在领养一直宠物看看，当我们点击_Adopt时，MetaMask_ 会提示我们交易的确认，如图：</p>\n<p><img src=\"/img/metamask-transactionconfirm.png\"></p>\n<p>点击Submit确认后，就可以看到成功领养了这次宠物。</p>\n<p>在MetaMask中，也可以看到交易的清单：</p>\n<p><img src=\"/img/metamask-transactionsuccess.png\"></p>\n<p>好了，恭喜你，即将成为一名去中心化式应用开发者的你已经成为迈出了坚实的一步。</p>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><p><a href=\"http://truffleframework.com/tutorials/pet-shop\">Truffle手册</a></p>\n","categories":[{"name":"学习记录","path":"api/categories/学习记录.json"},{"name":"区块链","path":"api/categories/区块链.json"},{"name":"以太坊","path":"api/categories/以太坊.json"}],"tags":[{"name":"以太坊","path":"api/tags/以太坊.json"}]}