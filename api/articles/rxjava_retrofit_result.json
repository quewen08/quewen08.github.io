{"title":"RxJava结合Retrofit对网络请求结果的统一处理","slug":"rxjava_retrofit_result","date":"2018-07-26T14:09:53.000Z","updated":"2022-10-19T14:40:00.264Z","comments":true,"path":"api/articles/rxjava_retrofit_result.json","realPath":"/2018/rxjava_retrofit_result/index/","excerpt":null,"covers":["https://ws1.sinaimg.cn/large/005Zbr7egy1ftwgnr2k9bj30g803675c.jpg","https://ws2.sinaimg.cn/large/005Zbr7egy1ftwgp7f3ncj30h9072gnk.jpg","https://ws1.sinaimg.cn/large/005Zbr7egy1ftwgq54wmfj30h306wac0.jpg","https://ws1.sinaimg.cn/large/005Zbr7egy1ftwgq54wmfj30h306wac0.jpg"],"cover":"https://ws1.sinaimg.cn/large/005Zbr7egy1ftwgnr2k9bj30g803675c.jpg","content":"<p>不同的网络请求有不同的返回结果，当同时也有很多相同的地方，比如数据的整体结构可以是这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;code&quot;: 1000,</span><br><span class=\"line\">    &quot;msg&quot;: &quot;调用权限失败&quot;,</span><br><span class=\"line\">    &quot;data&quot;: &#123;</span><br><span class=\"line\">            ***</span><br><span class=\"line\">            ***</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果接口数据的设计如上，那么每个请求都会有如下三点相同的部分</p>\n<ol>\n<li>状态码</li>\n<li>网络异常</li>\n<li>相同的网络请求策略</li>\n</ol>\n<p>既然有相同的部分，那么就有必要对相同的部分统一处理</p>\n<h2 id=\"主要功能图解\"><a href=\"#主要功能图解\" class=\"headerlink\" title=\"主要功能图解\"></a>主要功能图解</h2><p>整体采用MVP设计模式，如下：</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/005Zbr7egy1ftwgnr2k9bj30g803675c.jpg\" alt=\"MVP架构\"></p>\n<p>其中ModelPresenter为所有网络请求的Presenter，如下：</p>\n<p><img src=\"https://ws2.sinaimg.cn/large/005Zbr7egy1ftwgp7f3ncj30h9072gnk.jpg\" alt=\"ModelPresenter\"></p>\n<p>DataService为Retrofit请求接口，如下：</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/005Zbr7egy1ftwgq54wmfj30h306wac0.jpg\" alt=\"DataService\"></p>\n<p>网络层的整体流程如下</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/005Zbr7egy1ftwgq54wmfj30h306wac0.jpg\" alt=\"网络层流程\"></p>\n<p>其中第三层返回的是HttpBean<T>，第二层返回的是业务层需要的T类型</p>\n<h2 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h2><h3 id=\"模型设计\"><a href=\"#模型设计\" class=\"headerlink\" title=\"模型设计\"></a>模型设计</h3><p>在和后台对接的时候，定义一个统一的数据结构，这样才好统一处理状态码，利用泛型，我们可以设计借口返回的数据模型为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HttpBean</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String msg;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> T data;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> code;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>不同的网络请求只需要传入相应的数据模型即可，那么利用Retrofit请求数据的接口如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">DataService</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@GET(RequestCons.MY_BOX)</span></span><br><span class=\"line\">    Observable&lt;HttpBean&lt;BoxData&gt;&gt; <span class=\"title function_\">getBox</span><span class=\"params\">(<span class=\"meta\">@Query(&quot;client_id&quot;)</span> String client_id, <span class=\"meta\">@Query(&quot;client_secret&quot;)</span> String secret, <span class=\"meta\">@Query(&quot;visit_user_id&quot;)</span> <span class=\"type\">long</span> user_id)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GET(RequestCons.COMMENTS_LIST)</span></span><br><span class=\"line\">    Observable&lt;HttpBean&lt;CommentData&gt;&gt; <span class=\"title function_\">getComments</span><span class=\"params\">(<span class=\"meta\">@Query(&quot;client_id&quot;)</span> String client_id, <span class=\"meta\">@Query(&quot;client_secret&quot;)</span> String secret, <span class=\"meta\">@Query(&quot;object_id&quot;)</span> <span class=\"type\">long</span> object_id)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GET(RequestCons.TOPIC)</span></span><br><span class=\"line\">    Observable&lt;HttpBean&lt;TopicData&gt;&gt; <span class=\"title function_\">getTopic</span><span class=\"params\">(<span class=\"meta\">@Query(&quot;client_id&quot;)</span> String client_id, <span class=\"meta\">@Query(&quot;client_secret&quot;)</span> String secret, <span class=\"meta\">@Query(&quot;id&quot;)</span> <span class=\"type\">long</span> id)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>业务层向模型层请求数据的接口如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ModelPresenter</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**     * 下载box数据接口     */</span></span><br><span class=\"line\">    Observable&lt;BoxData&gt; <span class=\"title function_\">loadBoxData</span><span class=\"params\">(String client_id, String secret, <span class=\"type\">long</span> user_id)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**     * 下载评论数据接口     */</span></span><br><span class=\"line\">    Observable&lt;CommentData&gt; <span class=\"title function_\">loadCommentData</span><span class=\"params\">(String client_id, String secret, <span class=\"type\">long</span> object_id)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**     * 下载Topic商品     */</span></span><br><span class=\"line\">    Observable&lt;TopicData&gt; <span class=\"title function_\">loadTopic</span><span class=\"params\">(String client_id, String secret, <span class=\"type\">long</span> id)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过对比两个接口，可以发现业务层无需关心状态码了，只会拿到Observable<T>而不是Obervable&lt;HttpBean<T>&gt;</p>\n<h3 id=\"ModelPresenterImpl的实现\"><a href=\"#ModelPresenterImpl的实现\" class=\"headerlink\" title=\"ModelPresenterImpl的实现\"></a>ModelPresenterImpl的实现</h3><p>ModelPresenterImpl继承自BaseModelImpl，本身的实现其实很简单，主要工作就是调用DataService对应的方法，然后过滤状态码，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ModelPresenterImpl</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseModelImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ModelPresenter</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Observable&lt;BoxData&gt; <span class=\"title function_\">loadBoxData</span><span class=\"params\">(String client_id, String secret, <span class=\"type\">long</span> user_id)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> filterStatus(mDataService.getBox(client_id,secret,user_id));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Observable&lt;CommentData&gt; <span class=\"title function_\">loadCommentData</span><span class=\"params\">(String client_id, String secret, <span class=\"type\">long</span> object_id)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> filterStatus(mDataService.getComments(client_id,secret,object_id));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Observable&lt;TopicData&gt; <span class=\"title function_\">loadTopic</span><span class=\"params\">(String client_id, String secret, <span class=\"type\">long</span> id)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> filterStatus(mDataService.getTopic(client_id,secret,id));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"BaseModelImpl的实现\"><a href=\"#BaseModelImpl的实现\" class=\"headerlink\" title=\"BaseModelImpl的实现\"></a>BaseModelImpl的实现</h3><p>BaseModelImpl做了以下两点工作</p>\n<ol>\n<li>创建OkHttpClient、Retrofit、DataService</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">BaseModelImpl</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.baseUrl = RequestCons.BASE_URL;</span><br><span class=\"line\">    <span class=\"type\">OkHttpClient</span> <span class=\"variable\">client</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OkHttpClient</span>.Builder()</span><br><span class=\"line\">            .connectTimeout(<span class=\"number\">10</span>, TimeUnit.SECONDS)</span><br><span class=\"line\">            .build();</span><br><span class=\"line\">    mRetrofit = <span class=\"keyword\">new</span> <span class=\"title class_\">Retrofit</span>.Builder()</span><br><span class=\"line\">            .baseUrl(baseUrl)</span><br><span class=\"line\">            .client(client)</span><br><span class=\"line\">            .addConverterFactory(GsonConverterFactory.create())</span><br><span class=\"line\">            .addCallAdapterFactory(RxJavaCallAdapterFactory.create())</span><br><span class=\"line\">            .build();</span><br><span class=\"line\">    mDataService = mRetrofit.create(DataService.class);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>利用Rxjava的map操作符过滤状态码</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** * 给返回结果去掉状态码等属性,</span></span><br><span class=\"line\"><span class=\"comment\"> * 如果是查询出错,则返回状态码对应的描述给用户</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> observable</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Observable <span class=\"title function_\">filterStatus</span><span class=\"params\">(Observable observable)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> observable.map(<span class=\"keyword\">new</span> <span class=\"title class_\">ResultFilter</span>());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ResultFilter</span>&lt;T&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">Func1</span>&lt;HttpBean&lt;T&gt;, T&gt; &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> T <span class=\"title function_\">call</span><span class=\"params\">(HttpBean&lt;T&gt; tHttpBean)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tHttpBean.getStatus() != <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ApiException</span>(tHttpBean.getStatus());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tHttpBean.getData();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此处代码是一个关键点，利用操作符map给请求的数据“去壳”，只返回给业务层所需要的模型，如果当前请求的状态码不是成功的标志，那么抛出异常，交给应用层的OnError处理，确保应用层的onNext方法只处理成功的结果，纯粹专一。</p>\n<h3 id=\"配置状态码过滤器\"><a href=\"#配置状态码过滤器\" class=\"headerlink\" title=\"配置状态码过滤器\"></a>配置状态码过滤器</h3><p>状态码过滤器一共需要两个类</p>\n<ol>\n<li>常量说明类</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ResponseCons</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">STATUS_SUCCESS</span>  <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">SUCCESS_MSG</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;成功&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">STATU_1000</span> <span class=\"operator\">=</span> <span class=\"number\">1000</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">FAILURE_1000</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;调用权限失败&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>状态码匹配工具类</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StatusUtils</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StatusResult</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"type\">int</span> status;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> String desc;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> isSuccess;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">StatusResult</span> <span class=\"variable\">mStatusResult</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StatusResult</span>();</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> StatusResult <span class=\"title function_\">judgeStatus</span><span class=\"params\">(<span class=\"type\">int</span> status)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">desc</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">isSuccess</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (status) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> ResponseCons.STATUS_SUCCESS:</span><br><span class=\"line\">                desc = ResponseCons.SUCCESS_MSG;</span><br><span class=\"line\">                isSuccess = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> ResponseCons.STATU_1000:</span><br><span class=\"line\">                desc = ResponseCons.FAILURE_1000;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mStatusResult.status = status;</span><br><span class=\"line\">        mStatusResult.desc = desc;</span><br><span class=\"line\">        mStatusResult.isSuccess = isSuccess;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mStatusResult;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在BaseModelImpl中对网络请求结果的状态码进行判断，如果不是标志成功的状态码，那么就抛出一个异常，在异常中利用状态码匹配工具类找到对应错误描述并且返回</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ApiException</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">RuntimeException</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ApiException</span><span class=\"params\">(<span class=\"type\">int</span> status)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(getErrorDesc(status));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">getErrorDesc</span><span class=\"params\">(<span class=\"type\">int</span> status)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> StatusUtils.judgeStatus(status).desc;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>随着业务的扩展，如出现新的状态码，那么只需要往常亮类和匹配工具类增加状态码和错误描述即可，不需要更改网络层其他代码，还可以拓展成将错误码和对应描述信息存储在本地，当成配置文件，那么当产品发布之后，如果后台增加错误码，只需要download新的状态码配置文件即可，不需要发布新版本应用。</p>\n<h3 id=\"其他网络错误处理\"><a href=\"#其他网络错误处理\" class=\"headerlink\" title=\"其他网络错误处理\"></a>其他网络错误处理</h3><p>以上已经基本实现了网络层的功能，包括发起请求，解析返回结果并且统一过滤状态码，将请求成功的结果返回到Observable.onNext()，将失败结果返回到Observable.onError()。</p>\n<p><strong>然而网络请求并不是一直稳定的，所以所有网络请求都有可能出现超时、无网络连接或者其他40x，50x错误。</strong></p>\n<p>因此还需要再做一层错误过滤，在Retrofit中，所有的异常都会抛出，并且最终由Observable的onError接收，所以我们可以自定义一个FilterSubscriber继承自Subscriber，实现onError接口，对传入的throwable参数进行判处理，代码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FilterSubscriber</span>&lt;T&gt; <span class=\"keyword\">extends</span> <span class=\"title class_\">Subscriber</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String error;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCompleted</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onError</span><span class=\"params\">(Throwable e)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e <span class=\"keyword\">instanceof</span> TimeoutException || e <span class=\"keyword\">instanceof</span> SocketTimeoutException</span><br><span class=\"line\">            || e <span class=\"keyword\">instanceof</span> ConnectException)&#123;</span><br><span class=\"line\">            error = <span class=\"string\">&quot;超时了&quot;</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (e <span class=\"keyword\">instanceof</span> JsonSyntaxException)&#123;</span><br><span class=\"line\">            error = <span class=\"string\">&quot;Json格式出错了&quot;</span>;</span><br><span class=\"line\">            <span class=\"comment\">//假如导致这个异常触发的原因是服务器的问题，那么应该让服务器知道，所以可以在这里</span></span><br><span class=\"line\">            <span class=\"comment\">//选择上传原始异常描述信息给服务器</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            error = e.getMessage();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于我们提取出异常处理类，在异常处理类的onError( )中统一对所有异常进行处理，所以当一些异常确定是或者疑似是服务器的bug，抑或是未知bug，我们应该及时上报服务器，让服务器收集错误信息，及时修复，所以在onError( )中选择上传数据请求的异常信息是一个不错的选择。当然服务器的异常也可以后台自己收集，这里只是提供一种策略而已。</p>\n<h3 id=\"应用层调用\"><a href=\"#应用层调用\" class=\"headerlink\" title=\"应用层调用\"></a>应用层调用</h3><p>做完了发送请求，解析数据，错误处理，最后就是应用层调用了，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">loadTopicSuccess</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    Observable&lt;TopicData&gt; observable = mModelPresenter.loadTopic(<span class=\"string\">&quot;bt_app_ios&quot;</span>, <span class=\"string\">&quot;9c1e6634ce1c5098e056628cd66a17a5&quot;</span>, <span class=\"number\">1346</span>);</span><br><span class=\"line\">    observable.subscribeOn(Schedulers.io())</span><br><span class=\"line\">            .observeOn(AndroidSchedulers.mainThread())</span><br><span class=\"line\">            .subscribe(<span class=\"keyword\">new</span> <span class=\"title class_\">FilterSubscriber</span>&lt;TopicData&gt;() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCompleted</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                    MLog.d(<span class=\"string\">&quot;Topic信息下载完毕&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onNext</span><span class=\"params\">(TopicData data)</span> &#123;</span><br><span class=\"line\">                    mMainView.showSuccess(data);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onError</span><span class=\"params\">(Throwable e)</span> &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">super</span>.onError(e);</span><br><span class=\"line\">                    mMainView.showError(error);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>需要注意的是，在onError(Throwable e){ }中第一行代码需要super.onError(e),然后接下去的异常信息的描述是error字符串。</strong></p>\n<p>做完以上工作之后，往后如果需要添加新的接口，那么只需要以下几步</p>\n<ol>\n<li>在requestCons添加新的接口的文件路径</li>\n<li>增加相应的bean文件</li>\n<li>在DataService中添加新的接口方法</li>\n<li>在ModelPresenter添加新的接口方法并且在Impl中实现</li>\n</ol>\n<p>而不需要再处理以下内容</p>\n<ol>\n<li>客户端的创建</li>\n<li>状态码过滤</li>\n<li>网络异常过滤</li>\n</ol>\n<p><a href=\"https://link.jianshu.com/?t=https://github.com/LittleMango/RxJava-Retrofit-/tree/master\">上传的源码</a>使用MVP设计模式的思想，如果想了解如何使用MVP的同学可以下载看看。</p>\n<p>【<a href=\"https://www.jianshu.com/p/c88ebf1e0ca7\">原文链接</a>】</p>\n","more":"<p>不同的网络请求有不同的返回结果，当同时也有很多相同的地方，比如数据的整体结构可以是这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;code&quot;: 1000,</span><br><span class=\"line\">    &quot;msg&quot;: &quot;调用权限失败&quot;,</span><br><span class=\"line\">    &quot;data&quot;: &#123;</span><br><span class=\"line\">            ***</span><br><span class=\"line\">            ***</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果接口数据的设计如上，那么每个请求都会有如下三点相同的部分</p>\n<ol>\n<li>状态码</li>\n<li>网络异常</li>\n<li>相同的网络请求策略</li>\n</ol>\n<p>既然有相同的部分，那么就有必要对相同的部分统一处理</p>\n<h2 id=\"主要功能图解\"><a href=\"#主要功能图解\" class=\"headerlink\" title=\"主要功能图解\"></a>主要功能图解</h2><p>整体采用MVP设计模式，如下：</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/005Zbr7egy1ftwgnr2k9bj30g803675c.jpg\" alt=\"MVP架构\"></p>\n<p>其中ModelPresenter为所有网络请求的Presenter，如下：</p>\n<p><img src=\"https://ws2.sinaimg.cn/large/005Zbr7egy1ftwgp7f3ncj30h9072gnk.jpg\" alt=\"ModelPresenter\"></p>\n<p>DataService为Retrofit请求接口，如下：</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/005Zbr7egy1ftwgq54wmfj30h306wac0.jpg\" alt=\"DataService\"></p>\n<p>网络层的整体流程如下</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/005Zbr7egy1ftwgq54wmfj30h306wac0.jpg\" alt=\"网络层流程\"></p>\n<p>其中第三层返回的是HttpBean<T>，第二层返回的是业务层需要的T类型</p>\n<h2 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h2><h3 id=\"模型设计\"><a href=\"#模型设计\" class=\"headerlink\" title=\"模型设计\"></a>模型设计</h3><p>在和后台对接的时候，定义一个统一的数据结构，这样才好统一处理状态码，利用泛型，我们可以设计借口返回的数据模型为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HttpBean</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String msg;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> T data;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> code;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>不同的网络请求只需要传入相应的数据模型即可，那么利用Retrofit请求数据的接口如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">DataService</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@GET(RequestCons.MY_BOX)</span></span><br><span class=\"line\">    Observable&lt;HttpBean&lt;BoxData&gt;&gt; <span class=\"title function_\">getBox</span><span class=\"params\">(<span class=\"meta\">@Query(&quot;client_id&quot;)</span> String client_id, <span class=\"meta\">@Query(&quot;client_secret&quot;)</span> String secret, <span class=\"meta\">@Query(&quot;visit_user_id&quot;)</span> <span class=\"type\">long</span> user_id)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GET(RequestCons.COMMENTS_LIST)</span></span><br><span class=\"line\">    Observable&lt;HttpBean&lt;CommentData&gt;&gt; <span class=\"title function_\">getComments</span><span class=\"params\">(<span class=\"meta\">@Query(&quot;client_id&quot;)</span> String client_id, <span class=\"meta\">@Query(&quot;client_secret&quot;)</span> String secret, <span class=\"meta\">@Query(&quot;object_id&quot;)</span> <span class=\"type\">long</span> object_id)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GET(RequestCons.TOPIC)</span></span><br><span class=\"line\">    Observable&lt;HttpBean&lt;TopicData&gt;&gt; <span class=\"title function_\">getTopic</span><span class=\"params\">(<span class=\"meta\">@Query(&quot;client_id&quot;)</span> String client_id, <span class=\"meta\">@Query(&quot;client_secret&quot;)</span> String secret, <span class=\"meta\">@Query(&quot;id&quot;)</span> <span class=\"type\">long</span> id)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>业务层向模型层请求数据的接口如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ModelPresenter</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**     * 下载box数据接口     */</span></span><br><span class=\"line\">    Observable&lt;BoxData&gt; <span class=\"title function_\">loadBoxData</span><span class=\"params\">(String client_id, String secret, <span class=\"type\">long</span> user_id)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**     * 下载评论数据接口     */</span></span><br><span class=\"line\">    Observable&lt;CommentData&gt; <span class=\"title function_\">loadCommentData</span><span class=\"params\">(String client_id, String secret, <span class=\"type\">long</span> object_id)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**     * 下载Topic商品     */</span></span><br><span class=\"line\">    Observable&lt;TopicData&gt; <span class=\"title function_\">loadTopic</span><span class=\"params\">(String client_id, String secret, <span class=\"type\">long</span> id)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过对比两个接口，可以发现业务层无需关心状态码了，只会拿到Observable<T>而不是Obervable&lt;HttpBean<T>&gt;</p>\n<h3 id=\"ModelPresenterImpl的实现\"><a href=\"#ModelPresenterImpl的实现\" class=\"headerlink\" title=\"ModelPresenterImpl的实现\"></a>ModelPresenterImpl的实现</h3><p>ModelPresenterImpl继承自BaseModelImpl，本身的实现其实很简单，主要工作就是调用DataService对应的方法，然后过滤状态码，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ModelPresenterImpl</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseModelImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ModelPresenter</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Observable&lt;BoxData&gt; <span class=\"title function_\">loadBoxData</span><span class=\"params\">(String client_id, String secret, <span class=\"type\">long</span> user_id)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> filterStatus(mDataService.getBox(client_id,secret,user_id));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Observable&lt;CommentData&gt; <span class=\"title function_\">loadCommentData</span><span class=\"params\">(String client_id, String secret, <span class=\"type\">long</span> object_id)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> filterStatus(mDataService.getComments(client_id,secret,object_id));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Observable&lt;TopicData&gt; <span class=\"title function_\">loadTopic</span><span class=\"params\">(String client_id, String secret, <span class=\"type\">long</span> id)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> filterStatus(mDataService.getTopic(client_id,secret,id));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"BaseModelImpl的实现\"><a href=\"#BaseModelImpl的实现\" class=\"headerlink\" title=\"BaseModelImpl的实现\"></a>BaseModelImpl的实现</h3><p>BaseModelImpl做了以下两点工作</p>\n<ol>\n<li>创建OkHttpClient、Retrofit、DataService</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">BaseModelImpl</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.baseUrl = RequestCons.BASE_URL;</span><br><span class=\"line\">    <span class=\"type\">OkHttpClient</span> <span class=\"variable\">client</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OkHttpClient</span>.Builder()</span><br><span class=\"line\">            .connectTimeout(<span class=\"number\">10</span>, TimeUnit.SECONDS)</span><br><span class=\"line\">            .build();</span><br><span class=\"line\">    mRetrofit = <span class=\"keyword\">new</span> <span class=\"title class_\">Retrofit</span>.Builder()</span><br><span class=\"line\">            .baseUrl(baseUrl)</span><br><span class=\"line\">            .client(client)</span><br><span class=\"line\">            .addConverterFactory(GsonConverterFactory.create())</span><br><span class=\"line\">            .addCallAdapterFactory(RxJavaCallAdapterFactory.create())</span><br><span class=\"line\">            .build();</span><br><span class=\"line\">    mDataService = mRetrofit.create(DataService.class);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>利用Rxjava的map操作符过滤状态码</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** * 给返回结果去掉状态码等属性,</span></span><br><span class=\"line\"><span class=\"comment\"> * 如果是查询出错,则返回状态码对应的描述给用户</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> observable</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Observable <span class=\"title function_\">filterStatus</span><span class=\"params\">(Observable observable)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> observable.map(<span class=\"keyword\">new</span> <span class=\"title class_\">ResultFilter</span>());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ResultFilter</span>&lt;T&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">Func1</span>&lt;HttpBean&lt;T&gt;, T&gt; &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> T <span class=\"title function_\">call</span><span class=\"params\">(HttpBean&lt;T&gt; tHttpBean)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tHttpBean.getStatus() != <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ApiException</span>(tHttpBean.getStatus());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tHttpBean.getData();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此处代码是一个关键点，利用操作符map给请求的数据“去壳”，只返回给业务层所需要的模型，如果当前请求的状态码不是成功的标志，那么抛出异常，交给应用层的OnError处理，确保应用层的onNext方法只处理成功的结果，纯粹专一。</p>\n<h3 id=\"配置状态码过滤器\"><a href=\"#配置状态码过滤器\" class=\"headerlink\" title=\"配置状态码过滤器\"></a>配置状态码过滤器</h3><p>状态码过滤器一共需要两个类</p>\n<ol>\n<li>常量说明类</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ResponseCons</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">STATUS_SUCCESS</span>  <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">SUCCESS_MSG</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;成功&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">STATU_1000</span> <span class=\"operator\">=</span> <span class=\"number\">1000</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">FAILURE_1000</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;调用权限失败&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>状态码匹配工具类</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StatusUtils</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StatusResult</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"type\">int</span> status;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> String desc;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> isSuccess;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">StatusResult</span> <span class=\"variable\">mStatusResult</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StatusResult</span>();</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> StatusResult <span class=\"title function_\">judgeStatus</span><span class=\"params\">(<span class=\"type\">int</span> status)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">desc</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">isSuccess</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (status) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> ResponseCons.STATUS_SUCCESS:</span><br><span class=\"line\">                desc = ResponseCons.SUCCESS_MSG;</span><br><span class=\"line\">                isSuccess = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> ResponseCons.STATU_1000:</span><br><span class=\"line\">                desc = ResponseCons.FAILURE_1000;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mStatusResult.status = status;</span><br><span class=\"line\">        mStatusResult.desc = desc;</span><br><span class=\"line\">        mStatusResult.isSuccess = isSuccess;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mStatusResult;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在BaseModelImpl中对网络请求结果的状态码进行判断，如果不是标志成功的状态码，那么就抛出一个异常，在异常中利用状态码匹配工具类找到对应错误描述并且返回</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ApiException</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">RuntimeException</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ApiException</span><span class=\"params\">(<span class=\"type\">int</span> status)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(getErrorDesc(status));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">getErrorDesc</span><span class=\"params\">(<span class=\"type\">int</span> status)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> StatusUtils.judgeStatus(status).desc;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>随着业务的扩展，如出现新的状态码，那么只需要往常亮类和匹配工具类增加状态码和错误描述即可，不需要更改网络层其他代码，还可以拓展成将错误码和对应描述信息存储在本地，当成配置文件，那么当产品发布之后，如果后台增加错误码，只需要download新的状态码配置文件即可，不需要发布新版本应用。</p>\n<h3 id=\"其他网络错误处理\"><a href=\"#其他网络错误处理\" class=\"headerlink\" title=\"其他网络错误处理\"></a>其他网络错误处理</h3><p>以上已经基本实现了网络层的功能，包括发起请求，解析返回结果并且统一过滤状态码，将请求成功的结果返回到Observable.onNext()，将失败结果返回到Observable.onError()。</p>\n<p><strong>然而网络请求并不是一直稳定的，所以所有网络请求都有可能出现超时、无网络连接或者其他40x，50x错误。</strong></p>\n<p>因此还需要再做一层错误过滤，在Retrofit中，所有的异常都会抛出，并且最终由Observable的onError接收，所以我们可以自定义一个FilterSubscriber继承自Subscriber，实现onError接口，对传入的throwable参数进行判处理，代码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FilterSubscriber</span>&lt;T&gt; <span class=\"keyword\">extends</span> <span class=\"title class_\">Subscriber</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String error;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCompleted</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onError</span><span class=\"params\">(Throwable e)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e <span class=\"keyword\">instanceof</span> TimeoutException || e <span class=\"keyword\">instanceof</span> SocketTimeoutException</span><br><span class=\"line\">            || e <span class=\"keyword\">instanceof</span> ConnectException)&#123;</span><br><span class=\"line\">            error = <span class=\"string\">&quot;超时了&quot;</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (e <span class=\"keyword\">instanceof</span> JsonSyntaxException)&#123;</span><br><span class=\"line\">            error = <span class=\"string\">&quot;Json格式出错了&quot;</span>;</span><br><span class=\"line\">            <span class=\"comment\">//假如导致这个异常触发的原因是服务器的问题，那么应该让服务器知道，所以可以在这里</span></span><br><span class=\"line\">            <span class=\"comment\">//选择上传原始异常描述信息给服务器</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            error = e.getMessage();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于我们提取出异常处理类，在异常处理类的onError( )中统一对所有异常进行处理，所以当一些异常确定是或者疑似是服务器的bug，抑或是未知bug，我们应该及时上报服务器，让服务器收集错误信息，及时修复，所以在onError( )中选择上传数据请求的异常信息是一个不错的选择。当然服务器的异常也可以后台自己收集，这里只是提供一种策略而已。</p>\n<h3 id=\"应用层调用\"><a href=\"#应用层调用\" class=\"headerlink\" title=\"应用层调用\"></a>应用层调用</h3><p>做完了发送请求，解析数据，错误处理，最后就是应用层调用了，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">loadTopicSuccess</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    Observable&lt;TopicData&gt; observable = mModelPresenter.loadTopic(<span class=\"string\">&quot;bt_app_ios&quot;</span>, <span class=\"string\">&quot;9c1e6634ce1c5098e056628cd66a17a5&quot;</span>, <span class=\"number\">1346</span>);</span><br><span class=\"line\">    observable.subscribeOn(Schedulers.io())</span><br><span class=\"line\">            .observeOn(AndroidSchedulers.mainThread())</span><br><span class=\"line\">            .subscribe(<span class=\"keyword\">new</span> <span class=\"title class_\">FilterSubscriber</span>&lt;TopicData&gt;() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCompleted</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                    MLog.d(<span class=\"string\">&quot;Topic信息下载完毕&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onNext</span><span class=\"params\">(TopicData data)</span> &#123;</span><br><span class=\"line\">                    mMainView.showSuccess(data);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onError</span><span class=\"params\">(Throwable e)</span> &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">super</span>.onError(e);</span><br><span class=\"line\">                    mMainView.showError(error);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>需要注意的是，在onError(Throwable e){ }中第一行代码需要super.onError(e),然后接下去的异常信息的描述是error字符串。</strong></p>\n<p>做完以上工作之后，往后如果需要添加新的接口，那么只需要以下几步</p>\n<ol>\n<li>在requestCons添加新的接口的文件路径</li>\n<li>增加相应的bean文件</li>\n<li>在DataService中添加新的接口方法</li>\n<li>在ModelPresenter添加新的接口方法并且在Impl中实现</li>\n</ol>\n<p>而不需要再处理以下内容</p>\n<ol>\n<li>客户端的创建</li>\n<li>状态码过滤</li>\n<li>网络异常过滤</li>\n</ol>\n<p><a href=\"https://link.jianshu.com/?t=https://github.com/LittleMango/RxJava-Retrofit-/tree/master\">上传的源码</a>使用MVP设计模式的思想，如果想了解如何使用MVP的同学可以下载看看。</p>\n<p>【<a href=\"https://www.jianshu.com/p/c88ebf1e0ca7\">原文链接</a>】</p>\n","categories":[{"name":"教程分享","path":"api/categories/教程分享.json"},{"name":"Android","path":"api/categories/Android.json"}],"tags":[{"name":"Android","path":"api/tags/Android.json"},{"name":"Retrofit","path":"api/tags/Retrofit.json"},{"name":"RxJava","path":"api/tags/RxJava.json"}]}