{"title":"怎么创建一个良好的Git提交信息","slug":"git-commit-message","date":"2021-09-15T03:21:00.000Z","updated":"2022-10-19T14:40:00.251Z","comments":true,"path":"api/articles/git-commit-message.json","realPath":"/2021/git-commit-message/index/","excerpt":null,"covers":["/img/2021082220342679.png","/img/20210822204707398.png","/img/2021082221021797.png"],"cover":"/img/2021082220342679.png","content":"<blockquote>\n<p> 原文：<a href=\"https://dev.to/chrissiemhrk/git-commit-message-5e21\">https://dev.to/chrissiemhrk/git-commit-message-5e21</a></p>\n</blockquote>\n<p>提交信息是对提交之前添加和更改的文件所做的更改的简短描述。</p>\n<p>良好的提交信息不仅对你所参与的项目上其它的团队成员很重要，对你自己而言也很重要，你需要跟踪所有提交，并确切知道在提交期间发生的变动。</p>\n<p>即使你开发的是个人项目，我也建议你开始养成编写良好的提交信息的习惯。</p>\n<p>可以随着你的个人习惯和公司来改变</p>\n<h2 id=\"文字规范\"><a href=\"#文字规范\" class=\"headerlink\" title=\"文字规范\"></a>文字规范</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type: subject</span><br><span class=\"line\"></span><br><span class=\"line\">body (可选)</span><br><span class=\"line\"></span><br><span class=\"line\">footer (可选)</span><br></pre></td></tr></table></figure>\n\n<p>不过也有人说commit一共应该由5个部分组成，具体内容如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type: subject</span><br><span class=\"line\"></span><br><span class=\"line\">scope: doc, middleware, core, config, plugin</span><br><span class=\"line\"></span><br><span class=\"line\">subject:</span><br><span class=\"line\"></span><br><span class=\"line\">body (可选)</span><br><span class=\"line\"></span><br><span class=\"line\">footer (可选)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1、-type\"><a href=\"#1、-type\" class=\"headerlink\" title=\"1、 type\"></a>1、 type</h3><p>提交 commit 的类型，包括以下几种</p>\n<ul>\n<li>feat: 新功能</li>\n<li>fix: 修复问题</li>\n<li>docs: 修改文档</li>\n<li>style: 修改代码格式，不影响代码逻辑</li>\n<li>refactor: 重构代码，理论上不影响现有功能</li>\n<li>perf: 提升性能</li>\n<li>test: 增加修改测试用例</li>\n<li>chore: 修改工具相关（包括但不限于文档、代码生成等）</li>\n<li>deps: 升级依赖</li>\n</ul>\n<h3 id=\"2、scope\"><a href=\"#2、scope\" class=\"headerlink\" title=\"2、scope\"></a>2、scope</h3><p>修改文件的范围（包括但不限于 doc, middleware, core, config, plugin）</p>\n<h3 id=\"3、subject\"><a href=\"#3、subject\" class=\"headerlink\" title=\"3、subject\"></a>3、subject</h3><p>用一句话清楚的描述这次提交做了什么，它应该包含对所做更改的简短描述。长度不能超过50个字符，应以大写字母开头，命令式的语法。“Add”，而不是 “Added” 或 “Adds”。</p>\n<h3 id=\"4、body\"><a href=\"#4、body\" class=\"headerlink\" title=\"4、body\"></a>4、body</h3><p>正文用于说明你进行了哪些更改以及进行更改的原因。补充 subject，适当增加原因、目的等相关因素，也可不写。并非所有提交都很复杂，需要一个正文，尤其是如果你仅是开发一个个人的项目，因此正文是可选的。</p>\n<h3 id=\"5、footer\"><a href=\"#5、footer\" class=\"headerlink\" title=\"5、footer\"></a>5、footer</h3><p>页脚也是可选的，主要在你使用issue追踪引用issue ID时使用。</p>\n<ul>\n<li>当有非兼容修改(Breaking Change)时必须在这里描述清楚</li>\n<li>关联相关 issue，如 <code>Closes #1</code>, <code>Closes #2, #3</code></li>\n<li>如果功能点有新增或修改的，还需要关联文档<code>doc</code></li>\n</ul>\n<h2 id=\"emoji规范\"><a href=\"#emoji规范\" class=\"headerlink\" title=\"emoji规范\"></a>emoji规范</h2><blockquote>\n<p>注：以下emoji表情在git提交时已经完全支持，哪怕下面的表情显示不完整也不用慌，可以直接在git-submit里使用。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>emoji</th>\n<th>emoji代码</th>\n<th>commit说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>🎨 (调色板)</td>\n<td>:art:</td>\n<td>改进代码结构&#x2F;代码格式</td>\n</tr>\n<tr>\n<td>⚡️ (闪电)</td>\n<td>:zap:</td>\n<td>提升性能</td>\n</tr>\n<tr>\n<td>🐎 (赛马)</td>\n<td>:racehorse:</td>\n<td>提升性能</td>\n</tr>\n<tr>\n<td>🔥 (火焰)</td>\n<td>:fire:</td>\n<td>移除代码或文件</td>\n</tr>\n<tr>\n<td>🐛 (bug)</td>\n<td>:bug:</td>\n<td>修复 bug</td>\n</tr>\n<tr>\n<td>🚑 (急救车)</td>\n<td>:ambulance:</td>\n<td>重要补丁</td>\n</tr>\n<tr>\n<td>✨ (火花)</td>\n<td>:sparkles:</td>\n<td>引入新功能</td>\n</tr>\n<tr>\n<td>📝 (铅笔)</td>\n<td>:pencil:</td>\n<td>撰写文档</td>\n</tr>\n<tr>\n<td>🚀 (火箭)</td>\n<td>:rocket:</td>\n<td>部署功能</td>\n</tr>\n<tr>\n<td>🎉 (庆祝)</td>\n<td>:tada:</td>\n<td>初次提交</td>\n</tr>\n<tr>\n<td>✅ (白色复选框)</td>\n<td>:white_check_mark:</td>\n<td>增加测试</td>\n</tr>\n<tr>\n<td>🔒 (锁)</td>\n<td>:lock:</td>\n<td>修复安全问题</td>\n</tr>\n<tr>\n<td>🍎 (苹果)</td>\n<td>:apple:</td>\n<td>修复 macOS 下的问题</td>\n</tr>\n<tr>\n<td>🐧 (企鹅)</td>\n<td>:penguin:</td>\n<td>修复 Linux 下的问题</td>\n</tr>\n<tr>\n<td>🏁 (旗帜)</td>\n<td>:checked_flag:</td>\n<td>修复 Windows 下的问题</td>\n</tr>\n<tr>\n<td>🔖 (书签)</td>\n<td>:bookmark:</td>\n<td>发行&#x2F;版本标签</td>\n</tr>\n<tr>\n<td>🚨 (警车灯)</td>\n<td>:rotating_light:</td>\n<td>移除 linter 警告</td>\n</tr>\n<tr>\n<td>🚧 (施工)</td>\n<td>:construction:</td>\n<td>工作进行中</td>\n</tr>\n<tr>\n<td>💚 (绿心)</td>\n<td>:green_heart:</td>\n<td>修复 CI 构建问题</td>\n</tr>\n<tr>\n<td>⬇️ (下降箭头)</td>\n<td>:arrow_down:</td>\n<td>降级依赖</td>\n</tr>\n<tr>\n<td>(上升箭头)</td>\n<td>:arrow_up:</td>\n<td>升级依赖</td>\n</tr>\n<tr>\n<td>👷 (工人)</td>\n<td>:construction_worker:</td>\n<td>添加 CI 构建系统</td>\n</tr>\n<tr>\n<td>📈 (上升趋势图)</td>\n<td>:chart_with_upwards_trend:</td>\n<td>添加分析或跟踪代码</td>\n</tr>\n<tr>\n<td>🔨 (锤子)</td>\n<td>:hammer:</td>\n<td>重大重构</td>\n</tr>\n<tr>\n<td>➖ (减号)</td>\n<td>:heavy_minus_sign:</td>\n<td>减少一个依赖</td>\n</tr>\n<tr>\n<td>🐳 (鲸鱼)</td>\n<td>:whale:</td>\n<td>相关工作</td>\n</tr>\n<tr>\n<td>➕ (加号)</td>\n<td>:heavy_plus_sign:</td>\n<td>增加一个依赖</td>\n</tr>\n<tr>\n<td>🔧 (扳手)</td>\n<td>:wrench:</td>\n<td>修改配置文件</td>\n</tr>\n<tr>\n<td>🌐 (地球)</td>\n<td>:globe_with_meridians:</td>\n<td>国际化与本地化</td>\n</tr>\n<tr>\n<td>✏️ (铅笔)</td>\n<td>:pencil2:</td>\n<td>修复 typo</td>\n</tr>\n</tbody></table>\n<hr>\n<p>这是Udacity学生git提交信息的例子<a href=\"https://udacity.github.io/git-styleguide/\">Udacity Git Commit Message Style Guide</a></p>\n<blockquote>\n<p>feat: 少于50个字符的更改概括。</p>\n<p>如有必要，提供更详细的说明文字，约72字符左右。在某些情况下，第一行被视为提交的主题，其余文本作为正文。 将摘要与正文分开的空行至关重要（除非没有正文）；各种工具，例如 log，shortlog和rebase，如果同时运行两者，可能会造成混乱。</p>\n<p>解释该提交解决的问题。注意说明为什么做这个更改（代码作了注释）。另一方面，是否会导致负面的作用或其他不直观的后果？这也是需要说明的地方。</p>\n<p>空白行之后是其它段落。</p>\n<ul>\n<li>项目要点也可以加进来</li>\n<li>通常在项目符号前使用连字符或星号，用一个空格隔开，中间有空白行，但是约定在这里变化</li>\n</ul>\n<p>如果你使用issue追踪，可以在footer中写上对issue的关联，就像这样：</p>\n<p>Resolves: #123See<br>also: #456, #789</p>\n</blockquote>\n<p>这是一个实际的例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docs: Fix typo in README.md</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"正文之外同样有一些有意思的评论：\"><a href=\"#正文之外同样有一些有意思的评论：\" class=\"headerlink\" title=\"正文之外同样有一些有意思的评论：\"></a>正文之外同样有一些有意思的评论：</h2><hr>\n<p>简短明了，感谢你的这篇文章！<br>我倾向于使用表情符号作为类型——一看就显示了提交的类型，例如：</p>\n<p>➕ :heavy_plus_sign: 添加文件或实现功能时<br>🔨 :hammer: 修复bug或处理issue时<br>💚 :green_heart: 在改进代码或注释时<br>⚡ :zap: 在提高性能时<br>📜 :scroll: 更新文档或readme时<br>🔑 :key: 在处理安全相关时<br>🔁 :repeat: 更新依赖或数据时<br>✅ :white_check_mark: 建立一个新的release时<br>👕 :shirt: 重构或删除linter警告时<br>❌ :x: 删除代码或文件时</p>\n<p>…提交历史看起来很棒：</p>\n<p><img src=\"/img/2021082220342679.png\"></p>\n<hr>\n<p>我讨厌别人这么做。它在git日志中看起来令人困惑。只需使用unicode表情符号，它们就可以在任何地方使用。</p>\n<p>顺便说一下，我最喜欢的表情符号用于提交信息：🎆🎊🎉😖💢😅 （我通常将它们放在提交信息的末尾）</p>\n<hr>\n<p>我目前使用git alias创建带有表情符号的漂亮提交消息，我的提交信息结构如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[emoji] &lt;type&gt;(scope): &lt;message&gt;</span><br></pre></td></tr></table></figure>\n\n<p>例如</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">🐞 FIX(pages): security issue fix on pages table</span><br></pre></td></tr></table></figure>\n\n<p>这是我的.gitconfig</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Git Commit, Add all and Push — in one step.</span><br><span class=\"line\">cap = &quot;!f() &#123; git commit -m \\&quot;$@\\&quot;; &#125;; f&quot;</span><br><span class=\"line\"># NEW.</span><br><span class=\"line\">new = &quot;!f() &#123; git cap \\&quot;📦 NEW($1): $2\\&quot;; &#125;; f&quot;</span><br><span class=\"line\"># IMPROVE.</span><br><span class=\"line\">imp = &quot;!f() &#123; git cap \\&quot;👌 IMPROVE($1): $2\\&quot;; &#125;; f&quot;</span><br><span class=\"line\"># UPDATE.</span><br><span class=\"line\">up = &quot;!f() &#123; git cap \\&quot;✍🏻 UPDATE($1): $2\\&quot;; &#125;; f&quot;</span><br><span class=\"line\"># FIX.</span><br><span class=\"line\">fix = &quot;!f() &#123; git cap \\&quot;🐞 FIX($1): $2\\&quot;; &#125;; f&quot;</span><br><span class=\"line\"># RELEASE.</span><br><span class=\"line\">rlz = &quot;!f() &#123; git cap \\&quot;🚀 RELEASE($1): $2\\&quot;; &#125;; f&quot;</span><br><span class=\"line\"># DOC.</span><br><span class=\"line\">doc = &quot;!f() &#123; git cap \\&quot;📖 DOC($1): $2\\&quot;; &#125;; f&quot;</span><br><span class=\"line\"># TEST.</span><br><span class=\"line\">tst = &quot;!f() &#123; git cap \\&quot;🤖 TEST($1): $2\\&quot;; &#125;; f&quot;</span><br><span class=\"line\"># BREAKING CHANGE.</span><br><span class=\"line\">brk = &quot;!f() &#123; git cap \\&quot;‼️ BREAKING CHANGES($1): $2\\&quot;; &#125;; f&quot;</span><br><span class=\"line\"># REMOVE</span><br><span class=\"line\">remove = &quot;!f() &#123; git cap \\&quot;🗑 REMOVE($1): $2\\&quot;; &#125;; f&quot;</span><br><span class=\"line\"># REFACTOR</span><br><span class=\"line\">ref = &quot;!f() &#123; git cap \\&quot;♻️ REFACTOR($1): $2\\&quot;; &#125;; f&quot;</span><br><span class=\"line\"># INITIAL COMMIT</span><br><span class=\"line\">int = &quot;!f() &#123; git cap \\&quot;🎉 INITIAL COMMIT($1): $2\\&quot;; &#125;; f&quot;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>感谢你的提议！</p>\n<p>这是Git表情符号的一个网站：<a href=\"https://gitmoji.carloscuesta.me/\">https://gitmoji.carloscuesta.me/</a></p>\n<p><img src=\"/img/20210822204707398.png\"></p>\n<p>🎉 ：tada:初次提交<br>🚀 ：rocket:[Add] 实现新功能时<br>🔨 ：hammer:[Fix]修复bug或处理issue时<br>🎨 ：art:[Refactor] 当重构&#x2F;改善代码时<br>🚧 ：construction: [WIP]<br>📝 ：pencil: [Minor] 一些小更新</p>\n<hr>\n<p>大家可以使用随机提交信息生成网站。享受它吧！</p>\n<p><a href=\"https://paulospx.github.io/some_if_statements/commits.html\">https://paulospx.github.io/some_if_statements&#x2F;commits.html</a></p>\n<p><img src=\"/img/2021082221021797.png\"></p>\n","more":"<blockquote>\n<p> 原文：<a href=\"https://dev.to/chrissiemhrk/git-commit-message-5e21\">https://dev.to/chrissiemhrk/git-commit-message-5e21</a></p>\n</blockquote>\n<p>提交信息是对提交之前添加和更改的文件所做的更改的简短描述。</p>\n<p>良好的提交信息不仅对你所参与的项目上其它的团队成员很重要，对你自己而言也很重要，你需要跟踪所有提交，并确切知道在提交期间发生的变动。</p>\n<p>即使你开发的是个人项目，我也建议你开始养成编写良好的提交信息的习惯。</p>\n<p>可以随着你的个人习惯和公司来改变</p>\n<h2 id=\"文字规范\"><a href=\"#文字规范\" class=\"headerlink\" title=\"文字规范\"></a>文字规范</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type: subject</span><br><span class=\"line\"></span><br><span class=\"line\">body (可选)</span><br><span class=\"line\"></span><br><span class=\"line\">footer (可选)</span><br></pre></td></tr></table></figure>\n\n<p>不过也有人说commit一共应该由5个部分组成，具体内容如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type: subject</span><br><span class=\"line\"></span><br><span class=\"line\">scope: doc, middleware, core, config, plugin</span><br><span class=\"line\"></span><br><span class=\"line\">subject:</span><br><span class=\"line\"></span><br><span class=\"line\">body (可选)</span><br><span class=\"line\"></span><br><span class=\"line\">footer (可选)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1、-type\"><a href=\"#1、-type\" class=\"headerlink\" title=\"1、 type\"></a>1、 type</h3><p>提交 commit 的类型，包括以下几种</p>\n<ul>\n<li>feat: 新功能</li>\n<li>fix: 修复问题</li>\n<li>docs: 修改文档</li>\n<li>style: 修改代码格式，不影响代码逻辑</li>\n<li>refactor: 重构代码，理论上不影响现有功能</li>\n<li>perf: 提升性能</li>\n<li>test: 增加修改测试用例</li>\n<li>chore: 修改工具相关（包括但不限于文档、代码生成等）</li>\n<li>deps: 升级依赖</li>\n</ul>\n<h3 id=\"2、scope\"><a href=\"#2、scope\" class=\"headerlink\" title=\"2、scope\"></a>2、scope</h3><p>修改文件的范围（包括但不限于 doc, middleware, core, config, plugin）</p>\n<h3 id=\"3、subject\"><a href=\"#3、subject\" class=\"headerlink\" title=\"3、subject\"></a>3、subject</h3><p>用一句话清楚的描述这次提交做了什么，它应该包含对所做更改的简短描述。长度不能超过50个字符，应以大写字母开头，命令式的语法。“Add”，而不是 “Added” 或 “Adds”。</p>\n<h3 id=\"4、body\"><a href=\"#4、body\" class=\"headerlink\" title=\"4、body\"></a>4、body</h3><p>正文用于说明你进行了哪些更改以及进行更改的原因。补充 subject，适当增加原因、目的等相关因素，也可不写。并非所有提交都很复杂，需要一个正文，尤其是如果你仅是开发一个个人的项目，因此正文是可选的。</p>\n<h3 id=\"5、footer\"><a href=\"#5、footer\" class=\"headerlink\" title=\"5、footer\"></a>5、footer</h3><p>页脚也是可选的，主要在你使用issue追踪引用issue ID时使用。</p>\n<ul>\n<li>当有非兼容修改(Breaking Change)时必须在这里描述清楚</li>\n<li>关联相关 issue，如 <code>Closes #1</code>, <code>Closes #2, #3</code></li>\n<li>如果功能点有新增或修改的，还需要关联文档<code>doc</code></li>\n</ul>\n<h2 id=\"emoji规范\"><a href=\"#emoji规范\" class=\"headerlink\" title=\"emoji规范\"></a>emoji规范</h2><blockquote>\n<p>注：以下emoji表情在git提交时已经完全支持，哪怕下面的表情显示不完整也不用慌，可以直接在git-submit里使用。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>emoji</th>\n<th>emoji代码</th>\n<th>commit说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>🎨 (调色板)</td>\n<td>:art:</td>\n<td>改进代码结构&#x2F;代码格式</td>\n</tr>\n<tr>\n<td>⚡️ (闪电)</td>\n<td>:zap:</td>\n<td>提升性能</td>\n</tr>\n<tr>\n<td>🐎 (赛马)</td>\n<td>:racehorse:</td>\n<td>提升性能</td>\n</tr>\n<tr>\n<td>🔥 (火焰)</td>\n<td>:fire:</td>\n<td>移除代码或文件</td>\n</tr>\n<tr>\n<td>🐛 (bug)</td>\n<td>:bug:</td>\n<td>修复 bug</td>\n</tr>\n<tr>\n<td>🚑 (急救车)</td>\n<td>:ambulance:</td>\n<td>重要补丁</td>\n</tr>\n<tr>\n<td>✨ (火花)</td>\n<td>:sparkles:</td>\n<td>引入新功能</td>\n</tr>\n<tr>\n<td>📝 (铅笔)</td>\n<td>:pencil:</td>\n<td>撰写文档</td>\n</tr>\n<tr>\n<td>🚀 (火箭)</td>\n<td>:rocket:</td>\n<td>部署功能</td>\n</tr>\n<tr>\n<td>🎉 (庆祝)</td>\n<td>:tada:</td>\n<td>初次提交</td>\n</tr>\n<tr>\n<td>✅ (白色复选框)</td>\n<td>:white_check_mark:</td>\n<td>增加测试</td>\n</tr>\n<tr>\n<td>🔒 (锁)</td>\n<td>:lock:</td>\n<td>修复安全问题</td>\n</tr>\n<tr>\n<td>🍎 (苹果)</td>\n<td>:apple:</td>\n<td>修复 macOS 下的问题</td>\n</tr>\n<tr>\n<td>🐧 (企鹅)</td>\n<td>:penguin:</td>\n<td>修复 Linux 下的问题</td>\n</tr>\n<tr>\n<td>🏁 (旗帜)</td>\n<td>:checked_flag:</td>\n<td>修复 Windows 下的问题</td>\n</tr>\n<tr>\n<td>🔖 (书签)</td>\n<td>:bookmark:</td>\n<td>发行&#x2F;版本标签</td>\n</tr>\n<tr>\n<td>🚨 (警车灯)</td>\n<td>:rotating_light:</td>\n<td>移除 linter 警告</td>\n</tr>\n<tr>\n<td>🚧 (施工)</td>\n<td>:construction:</td>\n<td>工作进行中</td>\n</tr>\n<tr>\n<td>💚 (绿心)</td>\n<td>:green_heart:</td>\n<td>修复 CI 构建问题</td>\n</tr>\n<tr>\n<td>⬇️ (下降箭头)</td>\n<td>:arrow_down:</td>\n<td>降级依赖</td>\n</tr>\n<tr>\n<td>(上升箭头)</td>\n<td>:arrow_up:</td>\n<td>升级依赖</td>\n</tr>\n<tr>\n<td>👷 (工人)</td>\n<td>:construction_worker:</td>\n<td>添加 CI 构建系统</td>\n</tr>\n<tr>\n<td>📈 (上升趋势图)</td>\n<td>:chart_with_upwards_trend:</td>\n<td>添加分析或跟踪代码</td>\n</tr>\n<tr>\n<td>🔨 (锤子)</td>\n<td>:hammer:</td>\n<td>重大重构</td>\n</tr>\n<tr>\n<td>➖ (减号)</td>\n<td>:heavy_minus_sign:</td>\n<td>减少一个依赖</td>\n</tr>\n<tr>\n<td>🐳 (鲸鱼)</td>\n<td>:whale:</td>\n<td>相关工作</td>\n</tr>\n<tr>\n<td>➕ (加号)</td>\n<td>:heavy_plus_sign:</td>\n<td>增加一个依赖</td>\n</tr>\n<tr>\n<td>🔧 (扳手)</td>\n<td>:wrench:</td>\n<td>修改配置文件</td>\n</tr>\n<tr>\n<td>🌐 (地球)</td>\n<td>:globe_with_meridians:</td>\n<td>国际化与本地化</td>\n</tr>\n<tr>\n<td>✏️ (铅笔)</td>\n<td>:pencil2:</td>\n<td>修复 typo</td>\n</tr>\n</tbody></table>\n<hr>\n<p>这是Udacity学生git提交信息的例子<a href=\"https://udacity.github.io/git-styleguide/\">Udacity Git Commit Message Style Guide</a></p>\n<blockquote>\n<p>feat: 少于50个字符的更改概括。</p>\n<p>如有必要，提供更详细的说明文字，约72字符左右。在某些情况下，第一行被视为提交的主题，其余文本作为正文。 将摘要与正文分开的空行至关重要（除非没有正文）；各种工具，例如 log，shortlog和rebase，如果同时运行两者，可能会造成混乱。</p>\n<p>解释该提交解决的问题。注意说明为什么做这个更改（代码作了注释）。另一方面，是否会导致负面的作用或其他不直观的后果？这也是需要说明的地方。</p>\n<p>空白行之后是其它段落。</p>\n<ul>\n<li>项目要点也可以加进来</li>\n<li>通常在项目符号前使用连字符或星号，用一个空格隔开，中间有空白行，但是约定在这里变化</li>\n</ul>\n<p>如果你使用issue追踪，可以在footer中写上对issue的关联，就像这样：</p>\n<p>Resolves: #123See<br>also: #456, #789</p>\n</blockquote>\n<p>这是一个实际的例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docs: Fix typo in README.md</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"正文之外同样有一些有意思的评论：\"><a href=\"#正文之外同样有一些有意思的评论：\" class=\"headerlink\" title=\"正文之外同样有一些有意思的评论：\"></a>正文之外同样有一些有意思的评论：</h2><hr>\n<p>简短明了，感谢你的这篇文章！<br>我倾向于使用表情符号作为类型——一看就显示了提交的类型，例如：</p>\n<p>➕ :heavy_plus_sign: 添加文件或实现功能时<br>🔨 :hammer: 修复bug或处理issue时<br>💚 :green_heart: 在改进代码或注释时<br>⚡ :zap: 在提高性能时<br>📜 :scroll: 更新文档或readme时<br>🔑 :key: 在处理安全相关时<br>🔁 :repeat: 更新依赖或数据时<br>✅ :white_check_mark: 建立一个新的release时<br>👕 :shirt: 重构或删除linter警告时<br>❌ :x: 删除代码或文件时</p>\n<p>…提交历史看起来很棒：</p>\n<p><img src=\"/img/2021082220342679.png\"></p>\n<hr>\n<p>我讨厌别人这么做。它在git日志中看起来令人困惑。只需使用unicode表情符号，它们就可以在任何地方使用。</p>\n<p>顺便说一下，我最喜欢的表情符号用于提交信息：🎆🎊🎉😖💢😅 （我通常将它们放在提交信息的末尾）</p>\n<hr>\n<p>我目前使用git alias创建带有表情符号的漂亮提交消息，我的提交信息结构如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[emoji] &lt;type&gt;(scope): &lt;message&gt;</span><br></pre></td></tr></table></figure>\n\n<p>例如</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">🐞 FIX(pages): security issue fix on pages table</span><br></pre></td></tr></table></figure>\n\n<p>这是我的.gitconfig</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Git Commit, Add all and Push — in one step.</span><br><span class=\"line\">cap = &quot;!f() &#123; git commit -m \\&quot;$@\\&quot;; &#125;; f&quot;</span><br><span class=\"line\"># NEW.</span><br><span class=\"line\">new = &quot;!f() &#123; git cap \\&quot;📦 NEW($1): $2\\&quot;; &#125;; f&quot;</span><br><span class=\"line\"># IMPROVE.</span><br><span class=\"line\">imp = &quot;!f() &#123; git cap \\&quot;👌 IMPROVE($1): $2\\&quot;; &#125;; f&quot;</span><br><span class=\"line\"># UPDATE.</span><br><span class=\"line\">up = &quot;!f() &#123; git cap \\&quot;✍🏻 UPDATE($1): $2\\&quot;; &#125;; f&quot;</span><br><span class=\"line\"># FIX.</span><br><span class=\"line\">fix = &quot;!f() &#123; git cap \\&quot;🐞 FIX($1): $2\\&quot;; &#125;; f&quot;</span><br><span class=\"line\"># RELEASE.</span><br><span class=\"line\">rlz = &quot;!f() &#123; git cap \\&quot;🚀 RELEASE($1): $2\\&quot;; &#125;; f&quot;</span><br><span class=\"line\"># DOC.</span><br><span class=\"line\">doc = &quot;!f() &#123; git cap \\&quot;📖 DOC($1): $2\\&quot;; &#125;; f&quot;</span><br><span class=\"line\"># TEST.</span><br><span class=\"line\">tst = &quot;!f() &#123; git cap \\&quot;🤖 TEST($1): $2\\&quot;; &#125;; f&quot;</span><br><span class=\"line\"># BREAKING CHANGE.</span><br><span class=\"line\">brk = &quot;!f() &#123; git cap \\&quot;‼️ BREAKING CHANGES($1): $2\\&quot;; &#125;; f&quot;</span><br><span class=\"line\"># REMOVE</span><br><span class=\"line\">remove = &quot;!f() &#123; git cap \\&quot;🗑 REMOVE($1): $2\\&quot;; &#125;; f&quot;</span><br><span class=\"line\"># REFACTOR</span><br><span class=\"line\">ref = &quot;!f() &#123; git cap \\&quot;♻️ REFACTOR($1): $2\\&quot;; &#125;; f&quot;</span><br><span class=\"line\"># INITIAL COMMIT</span><br><span class=\"line\">int = &quot;!f() &#123; git cap \\&quot;🎉 INITIAL COMMIT($1): $2\\&quot;; &#125;; f&quot;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>感谢你的提议！</p>\n<p>这是Git表情符号的一个网站：<a href=\"https://gitmoji.carloscuesta.me/\">https://gitmoji.carloscuesta.me/</a></p>\n<p><img src=\"/img/20210822204707398.png\"></p>\n<p>🎉 ：tada:初次提交<br>🚀 ：rocket:[Add] 实现新功能时<br>🔨 ：hammer:[Fix]修复bug或处理issue时<br>🎨 ：art:[Refactor] 当重构&#x2F;改善代码时<br>🚧 ：construction: [WIP]<br>📝 ：pencil: [Minor] 一些小更新</p>\n<hr>\n<p>大家可以使用随机提交信息生成网站。享受它吧！</p>\n<p><a href=\"https://paulospx.github.io/some_if_statements/commits.html\">https://paulospx.github.io/some_if_statements&#x2F;commits.html</a></p>\n<p><img src=\"/img/2021082221021797.png\"></p>\n","categories":[{"name":"教程分享","path":"api/categories/教程分享.json"},{"name":"Git","path":"api/categories/Git.json"}],"tags":[{"name":"Git","path":"api/tags/Git.json"}]}