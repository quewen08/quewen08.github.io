{"title":"Git 操作","slug":"git_step","date":"2018-12-08T03:21:00.000Z","updated":"2022-10-19T14:40:00.252Z","comments":true,"path":"api/articles/git_step.json","realPath":"/2018/git_step/index/","excerpt":null,"covers":["/img/img/git_step/trees.png","/img/img/git_step/branches.png"],"cover":"/img/img/git_step/trees.png","content":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p><a href=\"http://git-scm.com/download/mac\">下载 git OSX 版</a></p>\n<p><a href=\"http://git-for-windows.github.io/\">下载 git Windows 版</a></p>\n<p><a href=\"http://book.git-scm.com/2_installing_git.html\">下载 git Linux 版</a></p>\n<p>&#x3D;&#x3D;&#x3D;</p>\n<h2 id=\"创建新仓库\"><a href=\"#创建新仓库\" class=\"headerlink\" title=\"创建新仓库\"></a>创建新仓库</h2><p>创建新文件夹，打开，然后执行</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n\n<p>以创建新的 git 仓库。</p>\n<p>&#x3D;&#x3D;</p>\n<h2 id=\"检出仓库\"><a href=\"#检出仓库\" class=\"headerlink\" title=\"检出仓库\"></a>检出仓库</h2><p>执行如下命令以创建一个本地仓库的克隆版本：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> /path/to/repository</span><br></pre></td></tr></table></figure>\n<p>如果是远端服务器上的仓库，你的命令会是这个样子：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> username@host:/path/to/repository</span><br></pre></td></tr></table></figure>\n\n<p>&#x3D;&#x3D;&#x3D;</p>\n<h2 id=\"工作流\"><a href=\"#工作流\" class=\"headerlink\" title=\"工作流\"></a>工作流</h2><p>你的本地仓库由 git 维护的三棵“树”组成。第一个是你的<code>工作目录</code>，它持有实际文件；第二个是<code>暂存区（Index）</code>，它像个缓存区域，临时保存你的改动；最后是<code>HEAD</code>，它指向你最后一次提交的结果。<br><img src=\"/img/img/git_step/trees.png\"></p>\n<p>&#x3D;&#x3D;&#x3D;</p>\n<h2 id=\"添加和提交\"><a href=\"#添加和提交\" class=\"headerlink\" title=\"添加和提交\"></a>添加和提交</h2><p>你可以提出更改（把它们添加到暂存区），使用如下命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 添加文件 filename</span></span><br><span class=\"line\">git add &lt;filename&gt;</span><br><span class=\"line\"><span class=\"comment\"># 添加所有文件</span></span><br><span class=\"line\">git add *</span><br></pre></td></tr></table></figure>\n<p>这是 git 基本工作流程的第一步；使用如下命令以实际提交改动：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">&quot;代码提交信息&quot;</span></span><br></pre></td></tr></table></figure>\n<p>现在，你的改动已经提交到了<code>HEAD</code>，但是还没到你的远端仓库。</p>\n<p>&#x3D;&#x3D;</p>\n<h2 id=\"推送改动\"><a href=\"#推送改动\" class=\"headerlink\" title=\"推送改动\"></a>推送改动</h2><p>你的改动现在已经在本地仓库的 HEAD 中了。执行如下命令以将这些改动提交到远端仓库：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n<p>可以把<code>master</code>换成你想要推送的任何分支。</p>\n<p>如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin &lt;server&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如此你就能够将你的改动推送到所添加的服务器上去了。</p>\n<p>&#x3D;&#x3D;&#x3D;</p>\n<h2 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h2><p>分支是用来将特性开发绝缘开来的。在你创建仓库的时候，master 是“默认的”分支。在其他分支上进行开发，完成后再将它们合并到主分支上。<br><img src=\"/img/img/git_step/branches.png\"></p>\n<p>&#x3D;&#x3D;</p>\n<p>创建一个叫做“feature_x”的分支，并切换过去：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b feature_x</span><br></pre></td></tr></table></figure>\n<p>切换回主分支：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master</span><br></pre></td></tr></table></figure>\n<p>再把新建的分支删掉：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d feature_x</span><br></pre></td></tr></table></figure>\n<p>除非你将分支推送到远端仓库，不然该分支就是 不为他人所见的：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin &lt;branch&gt;</span><br></pre></td></tr></table></figure>\n\n<p>&#x3D;&#x3D;&#x3D;</p>\n<h2 id=\"更新与合并\"><a href=\"#更新与合并\" class=\"headerlink\" title=\"更新与合并\"></a>更新与合并</h2><p>要更新你的本地仓库至最新改动，执行：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull</span><br></pre></td></tr></table></figure>\n<p>以在你的工作目录中 获取(fetch)并合并(merge)远端的改动。<br>要合并其他分支到你的当前分支（例如<code>master</code>），执行：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge &lt;branch&gt;</span><br></pre></td></tr></table></figure>\n\n<p>&#x3D;&#x3D;</p>\n<p>在这两种情况下，git都会尝试去自动合并改动。遗憾的是，这可能并非每次都成功，并可能出现冲突（conflicts）。 这时候就需要你修改这些文件来手动合并这些冲突（conflicts）。改完之后，你需要执行如下命令以将它们标记为合并成功：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add &lt;filename&gt;</span><br></pre></td></tr></table></figure>\n<p>在合并改动之前，你可以使用如下命令预览差异：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff &lt;source_branch&gt; &lt;target_branch&gt;</span><br></pre></td></tr></table></figure>\n\n<p>&#x3D;&#x3D;&#x3D;</p>\n<h2 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h2><p>为软件发布创建标签是推荐的。这个概念早已存在，在 SVN 中也有。你可以执行如下命令创建一个叫做 1.0.0 的标签：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag 1.0.0 1b2e1d63ff</span><br></pre></td></tr></table></figure>\n<p>1b2e1d63ff 是你想要标记的提交 ID 的前 10 位字符。可以使用下列命令获取提交 ID：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span></span><br></pre></td></tr></table></figure>\n<p>你也可以使用少一点的提交 ID 前几位，只要它的指向具有唯一性。</p>\n<p>&#x3D;&#x3D;&#x3D;</p>\n<h2 id=\"log\"><a href=\"#log\" class=\"headerlink\" title=\"log\"></a>log</h2><h1 id=\"如果你想了解本地仓库的历史记录，最简单的命令就是使用-你可以添加一些参数来修改他的输出，从而得到自己想要的结果。-只看某一个人的提交记录-一个压缩后的每一条提交记录只占一行的输出\"><a href=\"#如果你想了解本地仓库的历史记录，最简单的命令就是使用-你可以添加一些参数来修改他的输出，从而得到自己想要的结果。-只看某一个人的提交记录-一个压缩后的每一条提交记录只占一行的输出\" class=\"headerlink\" title=\"如果你想了解本地仓库的历史记录，最简单的命令就是使用:你可以添加一些参数来修改他的输出，从而得到自己想要的结果。 只看某一个人的提交记录:一个压缩后的每一条提交记录只占一行的输出:\"></a>如果你想了解本地仓库的历史记录，最简单的命令就是使用:<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span></span><br></pre></td></tr></table></figure><br>你可以添加一些参数来修改他的输出，从而得到自己想要的结果。 只看某一个人的提交记录:<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> --author=bob</span><br></pre></td></tr></table></figure><br>一个压缩后的每一条提交记录只占一行的输出:<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> --pretty=oneline</span><br></pre></td></tr></table></figure></h1><p>或者你想通过 ASCII 艺术的树形结构来展示所有的分支, 每个分支都标示了他的名字和标签:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> --graph --oneline --decorate --all</span><br></pre></td></tr></table></figure>\n<p>看看哪些文件改变了:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> --name-status</span><br></pre></td></tr></table></figure>\n<p>这些只是你可以使用的参数中很小的一部分。更多的信息，参考：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> --<span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p>&#x3D;&#x3D;&#x3D;</p>\n<h2 id=\"替换本地改动\"><a href=\"#替换本地改动\" class=\"headerlink\" title=\"替换本地改动\"></a>替换本地改动</h2><p>假如你操作失误（当然，这最好永远不要发生），你可以使用如下命令替换掉本地改动：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -- &lt;filename&gt;</span><br></pre></td></tr></table></figure>\n<p>此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。已添加到暂存区的改动以及新文件都不会受到影响。</p>\n<p>假如你想丢弃你在本地的所有改动与提交，可以到服务器上获取最新的版本历史，并将你本地主分支指向它：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch origin</span><br><span class=\"line\">git reset --hard origin/master</span><br></pre></td></tr></table></figure>\n\n<p>&#x3D;&#x3D;&#x3D;</p>\n<h3 id=\"实用小贴士\"><a href=\"#实用小贴士\" class=\"headerlink\" title=\"实用小贴士\"></a>实用小贴士</h3><p>内建的图形化 git：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitk</span><br></pre></td></tr></table></figure>\n<p>彩色的 git 输出：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config color.ui <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>显示历史记录时，每个提交的信息只显示一行：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config format.pretty oneline</span><br></pre></td></tr></table></figure>\n<p>交互式添加文件到暂存区：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add -i</span><br></pre></td></tr></table></figure>\n\n<p>&#x3D;&#x3D;&#x3D;</p>\n<h1 id=\"链接与资源\"><a href=\"#链接与资源\" class=\"headerlink\" title=\"链接与资源\"></a>链接与资源</h1><p>&#x3D;&#x3D;</p>\n<h3 id=\"图形化客户端\"><a href=\"#图形化客户端\" class=\"headerlink\" title=\"图形化客户端\"></a>图形化客户端</h3><p><a href=\"http://gitx.laullon.com/\">GitX (L) (OSX, 开源软件)</a><br><a href=\"http://www.git-tower.com/\">Tower (OSX)</a><br><a href=\"http://www.sourcetreeapp.com/\">Source Tree (OSX, 免费)</a><br><a href=\"http://mac.github.com/\">GitHub for Mac (OSX, 免费)</a><br><a href=\"https://itunes.apple.com/gb/app/gitbox/id403388357?mt=12\">GitBox (OSX, App Store)</a></p>\n<p>&#x3D;&#x3D;</p>\n<h3 id=\"指南和手册\"><a href=\"#指南和手册\" class=\"headerlink\" title=\"指南和手册\"></a>指南和手册</h3><p><a href=\"http://book.git-scm.com/\">Git 社区参考书</a><br><a href=\"http://progit.org/book/\">专业 Git</a><br><a href=\"http://think-like-a-git.net/\">像 git 那样思考</a><br><a href=\"http://help.github.com/\">GitHub 帮助</a><br><a href=\"http://marklodato.github.io/visual-git-guide/index-zh-cn.html\">图解 Git</a></p>\n","more":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p><a href=\"http://git-scm.com/download/mac\">下载 git OSX 版</a></p>\n<p><a href=\"http://git-for-windows.github.io/\">下载 git Windows 版</a></p>\n<p><a href=\"http://book.git-scm.com/2_installing_git.html\">下载 git Linux 版</a></p>\n<p>&#x3D;&#x3D;&#x3D;</p>\n<h2 id=\"创建新仓库\"><a href=\"#创建新仓库\" class=\"headerlink\" title=\"创建新仓库\"></a>创建新仓库</h2><p>创建新文件夹，打开，然后执行</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n\n<p>以创建新的 git 仓库。</p>\n<p>&#x3D;&#x3D;</p>\n<h2 id=\"检出仓库\"><a href=\"#检出仓库\" class=\"headerlink\" title=\"检出仓库\"></a>检出仓库</h2><p>执行如下命令以创建一个本地仓库的克隆版本：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> /path/to/repository</span><br></pre></td></tr></table></figure>\n<p>如果是远端服务器上的仓库，你的命令会是这个样子：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> username@host:/path/to/repository</span><br></pre></td></tr></table></figure>\n\n<p>&#x3D;&#x3D;&#x3D;</p>\n<h2 id=\"工作流\"><a href=\"#工作流\" class=\"headerlink\" title=\"工作流\"></a>工作流</h2><p>你的本地仓库由 git 维护的三棵“树”组成。第一个是你的<code>工作目录</code>，它持有实际文件；第二个是<code>暂存区（Index）</code>，它像个缓存区域，临时保存你的改动；最后是<code>HEAD</code>，它指向你最后一次提交的结果。<br><img src=\"/img/img/git_step/trees.png\"></p>\n<p>&#x3D;&#x3D;&#x3D;</p>\n<h2 id=\"添加和提交\"><a href=\"#添加和提交\" class=\"headerlink\" title=\"添加和提交\"></a>添加和提交</h2><p>你可以提出更改（把它们添加到暂存区），使用如下命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 添加文件 filename</span></span><br><span class=\"line\">git add &lt;filename&gt;</span><br><span class=\"line\"><span class=\"comment\"># 添加所有文件</span></span><br><span class=\"line\">git add *</span><br></pre></td></tr></table></figure>\n<p>这是 git 基本工作流程的第一步；使用如下命令以实际提交改动：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">&quot;代码提交信息&quot;</span></span><br></pre></td></tr></table></figure>\n<p>现在，你的改动已经提交到了<code>HEAD</code>，但是还没到你的远端仓库。</p>\n<p>&#x3D;&#x3D;</p>\n<h2 id=\"推送改动\"><a href=\"#推送改动\" class=\"headerlink\" title=\"推送改动\"></a>推送改动</h2><p>你的改动现在已经在本地仓库的 HEAD 中了。执行如下命令以将这些改动提交到远端仓库：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n<p>可以把<code>master</code>换成你想要推送的任何分支。</p>\n<p>如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin &lt;server&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如此你就能够将你的改动推送到所添加的服务器上去了。</p>\n<p>&#x3D;&#x3D;&#x3D;</p>\n<h2 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h2><p>分支是用来将特性开发绝缘开来的。在你创建仓库的时候，master 是“默认的”分支。在其他分支上进行开发，完成后再将它们合并到主分支上。<br><img src=\"/img/img/git_step/branches.png\"></p>\n<p>&#x3D;&#x3D;</p>\n<p>创建一个叫做“feature_x”的分支，并切换过去：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b feature_x</span><br></pre></td></tr></table></figure>\n<p>切换回主分支：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master</span><br></pre></td></tr></table></figure>\n<p>再把新建的分支删掉：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d feature_x</span><br></pre></td></tr></table></figure>\n<p>除非你将分支推送到远端仓库，不然该分支就是 不为他人所见的：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin &lt;branch&gt;</span><br></pre></td></tr></table></figure>\n\n<p>&#x3D;&#x3D;&#x3D;</p>\n<h2 id=\"更新与合并\"><a href=\"#更新与合并\" class=\"headerlink\" title=\"更新与合并\"></a>更新与合并</h2><p>要更新你的本地仓库至最新改动，执行：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull</span><br></pre></td></tr></table></figure>\n<p>以在你的工作目录中 获取(fetch)并合并(merge)远端的改动。<br>要合并其他分支到你的当前分支（例如<code>master</code>），执行：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge &lt;branch&gt;</span><br></pre></td></tr></table></figure>\n\n<p>&#x3D;&#x3D;</p>\n<p>在这两种情况下，git都会尝试去自动合并改动。遗憾的是，这可能并非每次都成功，并可能出现冲突（conflicts）。 这时候就需要你修改这些文件来手动合并这些冲突（conflicts）。改完之后，你需要执行如下命令以将它们标记为合并成功：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add &lt;filename&gt;</span><br></pre></td></tr></table></figure>\n<p>在合并改动之前，你可以使用如下命令预览差异：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff &lt;source_branch&gt; &lt;target_branch&gt;</span><br></pre></td></tr></table></figure>\n\n<p>&#x3D;&#x3D;&#x3D;</p>\n<h2 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h2><p>为软件发布创建标签是推荐的。这个概念早已存在，在 SVN 中也有。你可以执行如下命令创建一个叫做 1.0.0 的标签：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag 1.0.0 1b2e1d63ff</span><br></pre></td></tr></table></figure>\n<p>1b2e1d63ff 是你想要标记的提交 ID 的前 10 位字符。可以使用下列命令获取提交 ID：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span></span><br></pre></td></tr></table></figure>\n<p>你也可以使用少一点的提交 ID 前几位，只要它的指向具有唯一性。</p>\n<p>&#x3D;&#x3D;&#x3D;</p>\n<h2 id=\"log\"><a href=\"#log\" class=\"headerlink\" title=\"log\"></a>log</h2><h1 id=\"如果你想了解本地仓库的历史记录，最简单的命令就是使用-你可以添加一些参数来修改他的输出，从而得到自己想要的结果。-只看某一个人的提交记录-一个压缩后的每一条提交记录只占一行的输出\"><a href=\"#如果你想了解本地仓库的历史记录，最简单的命令就是使用-你可以添加一些参数来修改他的输出，从而得到自己想要的结果。-只看某一个人的提交记录-一个压缩后的每一条提交记录只占一行的输出\" class=\"headerlink\" title=\"如果你想了解本地仓库的历史记录，最简单的命令就是使用:你可以添加一些参数来修改他的输出，从而得到自己想要的结果。 只看某一个人的提交记录:一个压缩后的每一条提交记录只占一行的输出:\"></a>如果你想了解本地仓库的历史记录，最简单的命令就是使用:<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span></span><br></pre></td></tr></table></figure><br>你可以添加一些参数来修改他的输出，从而得到自己想要的结果。 只看某一个人的提交记录:<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> --author=bob</span><br></pre></td></tr></table></figure><br>一个压缩后的每一条提交记录只占一行的输出:<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> --pretty=oneline</span><br></pre></td></tr></table></figure></h1><p>或者你想通过 ASCII 艺术的树形结构来展示所有的分支, 每个分支都标示了他的名字和标签:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> --graph --oneline --decorate --all</span><br></pre></td></tr></table></figure>\n<p>看看哪些文件改变了:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> --name-status</span><br></pre></td></tr></table></figure>\n<p>这些只是你可以使用的参数中很小的一部分。更多的信息，参考：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> --<span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p>&#x3D;&#x3D;&#x3D;</p>\n<h2 id=\"替换本地改动\"><a href=\"#替换本地改动\" class=\"headerlink\" title=\"替换本地改动\"></a>替换本地改动</h2><p>假如你操作失误（当然，这最好永远不要发生），你可以使用如下命令替换掉本地改动：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -- &lt;filename&gt;</span><br></pre></td></tr></table></figure>\n<p>此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。已添加到暂存区的改动以及新文件都不会受到影响。</p>\n<p>假如你想丢弃你在本地的所有改动与提交，可以到服务器上获取最新的版本历史，并将你本地主分支指向它：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch origin</span><br><span class=\"line\">git reset --hard origin/master</span><br></pre></td></tr></table></figure>\n\n<p>&#x3D;&#x3D;&#x3D;</p>\n<h3 id=\"实用小贴士\"><a href=\"#实用小贴士\" class=\"headerlink\" title=\"实用小贴士\"></a>实用小贴士</h3><p>内建的图形化 git：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitk</span><br></pre></td></tr></table></figure>\n<p>彩色的 git 输出：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config color.ui <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>显示历史记录时，每个提交的信息只显示一行：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config format.pretty oneline</span><br></pre></td></tr></table></figure>\n<p>交互式添加文件到暂存区：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add -i</span><br></pre></td></tr></table></figure>\n\n<p>&#x3D;&#x3D;&#x3D;</p>\n<h1 id=\"链接与资源\"><a href=\"#链接与资源\" class=\"headerlink\" title=\"链接与资源\"></a>链接与资源</h1><p>&#x3D;&#x3D;</p>\n<h3 id=\"图形化客户端\"><a href=\"#图形化客户端\" class=\"headerlink\" title=\"图形化客户端\"></a>图形化客户端</h3><p><a href=\"http://gitx.laullon.com/\">GitX (L) (OSX, 开源软件)</a><br><a href=\"http://www.git-tower.com/\">Tower (OSX)</a><br><a href=\"http://www.sourcetreeapp.com/\">Source Tree (OSX, 免费)</a><br><a href=\"http://mac.github.com/\">GitHub for Mac (OSX, 免费)</a><br><a href=\"https://itunes.apple.com/gb/app/gitbox/id403388357?mt=12\">GitBox (OSX, App Store)</a></p>\n<p>&#x3D;&#x3D;</p>\n<h3 id=\"指南和手册\"><a href=\"#指南和手册\" class=\"headerlink\" title=\"指南和手册\"></a>指南和手册</h3><p><a href=\"http://book.git-scm.com/\">Git 社区参考书</a><br><a href=\"http://progit.org/book/\">专业 Git</a><br><a href=\"http://think-like-a-git.net/\">像 git 那样思考</a><br><a href=\"http://help.github.com/\">GitHub 帮助</a><br><a href=\"http://marklodato.github.io/visual-git-guide/index-zh-cn.html\">图解 Git</a></p>\n","categories":[{"name":"教程分享","path":"api/categories/教程分享.json"},{"name":"Git","path":"api/categories/Git.json"}],"tags":[{"name":"Git","path":"api/tags/Git.json"}]}